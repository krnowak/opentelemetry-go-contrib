// Code generated by "wrappergen -basetype=driver.Stmt -exttypes=driver.ColumnConverter;driver.NamedValueChecker;driver.StmtExecContext;driver.StmtQueryContext -extrafields=setup,*tracingSetup;savedQuery,string -prefix=traceDS -newfuncname=newStmt"; DO NOT EDIT.

package driver

import (
	"context"
	"database/sql/driver"
)

type (
	idriverStmt0 interface {
		driver.Stmt
	}

	tdriverStmt0 struct {
		r          idriverStmt0
		setup      *tracingSetup
		savedQuery string
	}

	idriverStmt1 interface {
		driver.Stmt
		driver.ColumnConverter
	}

	tdriverStmt1 struct {
		r          idriverStmt1
		setup      *tracingSetup
		savedQuery string
	}

	idriverStmt2 interface {
		driver.Stmt
		driver.NamedValueChecker
	}

	tdriverStmt2 struct {
		r          idriverStmt2
		setup      *tracingSetup
		savedQuery string
	}

	idriverStmt3 interface {
		driver.Stmt
		driver.StmtExecContext
	}

	tdriverStmt3 struct {
		r          idriverStmt3
		setup      *tracingSetup
		savedQuery string
	}

	idriverStmt4 interface {
		driver.Stmt
		driver.StmtQueryContext
	}

	tdriverStmt4 struct {
		r          idriverStmt4
		setup      *tracingSetup
		savedQuery string
	}

	idriverStmt5 interface {
		driver.Stmt
		driver.ColumnConverter
		driver.NamedValueChecker
	}

	tdriverStmt5 struct {
		r          idriverStmt5
		setup      *tracingSetup
		savedQuery string
	}

	idriverStmt6 interface {
		driver.Stmt
		driver.ColumnConverter
		driver.StmtExecContext
	}

	tdriverStmt6 struct {
		r          idriverStmt6
		setup      *tracingSetup
		savedQuery string
	}

	idriverStmt7 interface {
		driver.Stmt
		driver.ColumnConverter
		driver.StmtQueryContext
	}

	tdriverStmt7 struct {
		r          idriverStmt7
		setup      *tracingSetup
		savedQuery string
	}

	idriverStmt8 interface {
		driver.Stmt
		driver.NamedValueChecker
		driver.StmtExecContext
	}

	tdriverStmt8 struct {
		r          idriverStmt8
		setup      *tracingSetup
		savedQuery string
	}

	idriverStmt9 interface {
		driver.Stmt
		driver.NamedValueChecker
		driver.StmtQueryContext
	}

	tdriverStmt9 struct {
		r          idriverStmt9
		setup      *tracingSetup
		savedQuery string
	}

	idriverStmt10 interface {
		driver.Stmt
		driver.StmtExecContext
		driver.StmtQueryContext
	}

	tdriverStmt10 struct {
		r          idriverStmt10
		setup      *tracingSetup
		savedQuery string
	}

	idriverStmt11 interface {
		driver.Stmt
		driver.ColumnConverter
		driver.NamedValueChecker
		driver.StmtExecContext
	}

	tdriverStmt11 struct {
		r          idriverStmt11
		setup      *tracingSetup
		savedQuery string
	}

	idriverStmt12 interface {
		driver.Stmt
		driver.ColumnConverter
		driver.NamedValueChecker
		driver.StmtQueryContext
	}

	tdriverStmt12 struct {
		r          idriverStmt12
		setup      *tracingSetup
		savedQuery string
	}

	idriverStmt13 interface {
		driver.Stmt
		driver.ColumnConverter
		driver.StmtExecContext
		driver.StmtQueryContext
	}

	tdriverStmt13 struct {
		r          idriverStmt13
		setup      *tracingSetup
		savedQuery string
	}

	idriverStmt14 interface {
		driver.Stmt
		driver.NamedValueChecker
		driver.StmtExecContext
		driver.StmtQueryContext
	}

	tdriverStmt14 struct {
		r          idriverStmt14
		setup      *tracingSetup
		savedQuery string
	}

	idriverStmt15 interface {
		driver.Stmt
		driver.ColumnConverter
		driver.NamedValueChecker
		driver.StmtExecContext
		driver.StmtQueryContext
	}

	tdriverStmt15 struct {
		r          idriverStmt15
		setup      *tracingSetup
		savedQuery string
	}
)

var (
	_ driver.Stmt              = &tdriverStmt0{}
	_ driver.Stmt              = &tdriverStmt1{}
	_ driver.ColumnConverter   = &tdriverStmt1{}
	_ driver.Stmt              = &tdriverStmt2{}
	_ driver.NamedValueChecker = &tdriverStmt2{}
	_ driver.Stmt              = &tdriverStmt3{}
	_ driver.StmtExecContext   = &tdriverStmt3{}
	_ driver.Stmt              = &tdriverStmt4{}
	_ driver.StmtQueryContext  = &tdriverStmt4{}
	_ driver.Stmt              = &tdriverStmt5{}
	_ driver.ColumnConverter   = &tdriverStmt5{}
	_ driver.NamedValueChecker = &tdriverStmt5{}
	_ driver.Stmt              = &tdriverStmt6{}
	_ driver.ColumnConverter   = &tdriverStmt6{}
	_ driver.StmtExecContext   = &tdriverStmt6{}
	_ driver.Stmt              = &tdriverStmt7{}
	_ driver.ColumnConverter   = &tdriverStmt7{}
	_ driver.StmtQueryContext  = &tdriverStmt7{}
	_ driver.Stmt              = &tdriverStmt8{}
	_ driver.NamedValueChecker = &tdriverStmt8{}
	_ driver.StmtExecContext   = &tdriverStmt8{}
	_ driver.Stmt              = &tdriverStmt9{}
	_ driver.NamedValueChecker = &tdriverStmt9{}
	_ driver.StmtQueryContext  = &tdriverStmt9{}
	_ driver.Stmt              = &tdriverStmt10{}
	_ driver.StmtExecContext   = &tdriverStmt10{}
	_ driver.StmtQueryContext  = &tdriverStmt10{}
	_ driver.Stmt              = &tdriverStmt11{}
	_ driver.ColumnConverter   = &tdriverStmt11{}
	_ driver.NamedValueChecker = &tdriverStmt11{}
	_ driver.StmtExecContext   = &tdriverStmt11{}
	_ driver.Stmt              = &tdriverStmt12{}
	_ driver.ColumnConverter   = &tdriverStmt12{}
	_ driver.NamedValueChecker = &tdriverStmt12{}
	_ driver.StmtQueryContext  = &tdriverStmt12{}
	_ driver.Stmt              = &tdriverStmt13{}
	_ driver.ColumnConverter   = &tdriverStmt13{}
	_ driver.StmtExecContext   = &tdriverStmt13{}
	_ driver.StmtQueryContext  = &tdriverStmt13{}
	_ driver.Stmt              = &tdriverStmt14{}
	_ driver.NamedValueChecker = &tdriverStmt14{}
	_ driver.StmtExecContext   = &tdriverStmt14{}
	_ driver.StmtQueryContext  = &tdriverStmt14{}
	_ driver.Stmt              = &tdriverStmt15{}
	_ driver.ColumnConverter   = &tdriverStmt15{}
	_ driver.NamedValueChecker = &tdriverStmt15{}
	_ driver.StmtExecContext   = &tdriverStmt15{}
	_ driver.StmtQueryContext  = &tdriverStmt15{}
)

func (odriverStmt0 *tdriverStmt0) Close() error {
	return traceDSClose(odriverStmt0.r, odriverStmt0.setup, odriverStmt0.savedQuery)
}
func (odriverStmt0 *tdriverStmt0) Exec(args []driver.Value) (driver.Result, error) {
	return traceDSExec(odriverStmt0.r, odriverStmt0.setup, odriverStmt0.savedQuery, args)
}
func (odriverStmt0 *tdriverStmt0) NumInput() int {
	return traceDSNumInput(odriverStmt0.r, odriverStmt0.setup, odriverStmt0.savedQuery)
}
func (odriverStmt0 *tdriverStmt0) Query(args []driver.Value) (driver.Rows, error) {
	return traceDSQuery(odriverStmt0.r, odriverStmt0.setup, odriverStmt0.savedQuery, args)
}

func (odriverStmt1 *tdriverStmt1) Close() error {
	return traceDSClose(odriverStmt1.r, odriverStmt1.setup, odriverStmt1.savedQuery)
}
func (odriverStmt1 *tdriverStmt1) Exec(args []driver.Value) (driver.Result, error) {
	return traceDSExec(odriverStmt1.r, odriverStmt1.setup, odriverStmt1.savedQuery, args)
}
func (odriverStmt1 *tdriverStmt1) NumInput() int {
	return traceDSNumInput(odriverStmt1.r, odriverStmt1.setup, odriverStmt1.savedQuery)
}
func (odriverStmt1 *tdriverStmt1) Query(args []driver.Value) (driver.Rows, error) {
	return traceDSQuery(odriverStmt1.r, odriverStmt1.setup, odriverStmt1.savedQuery, args)
}
func (odriverStmt1 *tdriverStmt1) ColumnConverter(idx int) driver.ValueConverter {
	return traceDSColumnConverter(odriverStmt1.r, odriverStmt1.setup, odriverStmt1.savedQuery, idx)
}

func (odriverStmt2 *tdriverStmt2) Close() error {
	return traceDSClose(odriverStmt2.r, odriverStmt2.setup, odriverStmt2.savedQuery)
}
func (odriverStmt2 *tdriverStmt2) Exec(args []driver.Value) (driver.Result, error) {
	return traceDSExec(odriverStmt2.r, odriverStmt2.setup, odriverStmt2.savedQuery, args)
}
func (odriverStmt2 *tdriverStmt2) NumInput() int {
	return traceDSNumInput(odriverStmt2.r, odriverStmt2.setup, odriverStmt2.savedQuery)
}
func (odriverStmt2 *tdriverStmt2) Query(args []driver.Value) (driver.Rows, error) {
	return traceDSQuery(odriverStmt2.r, odriverStmt2.setup, odriverStmt2.savedQuery, args)
}
func (odriverStmt2 *tdriverStmt2) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDSCheckNamedValue(odriverStmt2.r, odriverStmt2.setup, odriverStmt2.savedQuery, param0)
}

func (odriverStmt3 *tdriverStmt3) Close() error {
	return traceDSClose(odriverStmt3.r, odriverStmt3.setup, odriverStmt3.savedQuery)
}
func (odriverStmt3 *tdriverStmt3) Exec(args []driver.Value) (driver.Result, error) {
	return traceDSExec(odriverStmt3.r, odriverStmt3.setup, odriverStmt3.savedQuery, args)
}
func (odriverStmt3 *tdriverStmt3) NumInput() int {
	return traceDSNumInput(odriverStmt3.r, odriverStmt3.setup, odriverStmt3.savedQuery)
}
func (odriverStmt3 *tdriverStmt3) Query(args []driver.Value) (driver.Rows, error) {
	return traceDSQuery(odriverStmt3.r, odriverStmt3.setup, odriverStmt3.savedQuery, args)
}
func (odriverStmt3 *tdriverStmt3) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error) {
	return traceDSExecContext(odriverStmt3.r, odriverStmt3.setup, odriverStmt3.savedQuery, ctx, args)
}

func (odriverStmt4 *tdriverStmt4) Close() error {
	return traceDSClose(odriverStmt4.r, odriverStmt4.setup, odriverStmt4.savedQuery)
}
func (odriverStmt4 *tdriverStmt4) Exec(args []driver.Value) (driver.Result, error) {
	return traceDSExec(odriverStmt4.r, odriverStmt4.setup, odriverStmt4.savedQuery, args)
}
func (odriverStmt4 *tdriverStmt4) NumInput() int {
	return traceDSNumInput(odriverStmt4.r, odriverStmt4.setup, odriverStmt4.savedQuery)
}
func (odriverStmt4 *tdriverStmt4) Query(args []driver.Value) (driver.Rows, error) {
	return traceDSQuery(odriverStmt4.r, odriverStmt4.setup, odriverStmt4.savedQuery, args)
}
func (odriverStmt4 *tdriverStmt4) QueryContext(ctx context.Context, args []driver.NamedValue) (driver.Rows, error) {
	return traceDSQueryContext(odriverStmt4.r, odriverStmt4.setup, odriverStmt4.savedQuery, ctx, args)
}

func (odriverStmt5 *tdriverStmt5) Close() error {
	return traceDSClose(odriverStmt5.r, odriverStmt5.setup, odriverStmt5.savedQuery)
}
func (odriverStmt5 *tdriverStmt5) Exec(args []driver.Value) (driver.Result, error) {
	return traceDSExec(odriverStmt5.r, odriverStmt5.setup, odriverStmt5.savedQuery, args)
}
func (odriverStmt5 *tdriverStmt5) NumInput() int {
	return traceDSNumInput(odriverStmt5.r, odriverStmt5.setup, odriverStmt5.savedQuery)
}
func (odriverStmt5 *tdriverStmt5) Query(args []driver.Value) (driver.Rows, error) {
	return traceDSQuery(odriverStmt5.r, odriverStmt5.setup, odriverStmt5.savedQuery, args)
}
func (odriverStmt5 *tdriverStmt5) ColumnConverter(idx int) driver.ValueConverter {
	return traceDSColumnConverter(odriverStmt5.r, odriverStmt5.setup, odriverStmt5.savedQuery, idx)
}
func (odriverStmt5 *tdriverStmt5) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDSCheckNamedValue(odriverStmt5.r, odriverStmt5.setup, odriverStmt5.savedQuery, param0)
}

func (odriverStmt6 *tdriverStmt6) Close() error {
	return traceDSClose(odriverStmt6.r, odriverStmt6.setup, odriverStmt6.savedQuery)
}
func (odriverStmt6 *tdriverStmt6) Exec(args []driver.Value) (driver.Result, error) {
	return traceDSExec(odriverStmt6.r, odriverStmt6.setup, odriverStmt6.savedQuery, args)
}
func (odriverStmt6 *tdriverStmt6) NumInput() int {
	return traceDSNumInput(odriverStmt6.r, odriverStmt6.setup, odriverStmt6.savedQuery)
}
func (odriverStmt6 *tdriverStmt6) Query(args []driver.Value) (driver.Rows, error) {
	return traceDSQuery(odriverStmt6.r, odriverStmt6.setup, odriverStmt6.savedQuery, args)
}
func (odriverStmt6 *tdriverStmt6) ColumnConverter(idx int) driver.ValueConverter {
	return traceDSColumnConverter(odriverStmt6.r, odriverStmt6.setup, odriverStmt6.savedQuery, idx)
}
func (odriverStmt6 *tdriverStmt6) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error) {
	return traceDSExecContext(odriverStmt6.r, odriverStmt6.setup, odriverStmt6.savedQuery, ctx, args)
}

func (odriverStmt7 *tdriverStmt7) Close() error {
	return traceDSClose(odriverStmt7.r, odriverStmt7.setup, odriverStmt7.savedQuery)
}
func (odriverStmt7 *tdriverStmt7) Exec(args []driver.Value) (driver.Result, error) {
	return traceDSExec(odriverStmt7.r, odriverStmt7.setup, odriverStmt7.savedQuery, args)
}
func (odriverStmt7 *tdriverStmt7) NumInput() int {
	return traceDSNumInput(odriverStmt7.r, odriverStmt7.setup, odriverStmt7.savedQuery)
}
func (odriverStmt7 *tdriverStmt7) Query(args []driver.Value) (driver.Rows, error) {
	return traceDSQuery(odriverStmt7.r, odriverStmt7.setup, odriverStmt7.savedQuery, args)
}
func (odriverStmt7 *tdriverStmt7) ColumnConverter(idx int) driver.ValueConverter {
	return traceDSColumnConverter(odriverStmt7.r, odriverStmt7.setup, odriverStmt7.savedQuery, idx)
}
func (odriverStmt7 *tdriverStmt7) QueryContext(ctx context.Context, args []driver.NamedValue) (driver.Rows, error) {
	return traceDSQueryContext(odriverStmt7.r, odriverStmt7.setup, odriverStmt7.savedQuery, ctx, args)
}

func (odriverStmt8 *tdriverStmt8) Close() error {
	return traceDSClose(odriverStmt8.r, odriverStmt8.setup, odriverStmt8.savedQuery)
}
func (odriverStmt8 *tdriverStmt8) Exec(args []driver.Value) (driver.Result, error) {
	return traceDSExec(odriverStmt8.r, odriverStmt8.setup, odriverStmt8.savedQuery, args)
}
func (odriverStmt8 *tdriverStmt8) NumInput() int {
	return traceDSNumInput(odriverStmt8.r, odriverStmt8.setup, odriverStmt8.savedQuery)
}
func (odriverStmt8 *tdriverStmt8) Query(args []driver.Value) (driver.Rows, error) {
	return traceDSQuery(odriverStmt8.r, odriverStmt8.setup, odriverStmt8.savedQuery, args)
}
func (odriverStmt8 *tdriverStmt8) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDSCheckNamedValue(odriverStmt8.r, odriverStmt8.setup, odriverStmt8.savedQuery, param0)
}
func (odriverStmt8 *tdriverStmt8) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error) {
	return traceDSExecContext(odriverStmt8.r, odriverStmt8.setup, odriverStmt8.savedQuery, ctx, args)
}

func (odriverStmt9 *tdriverStmt9) Close() error {
	return traceDSClose(odriverStmt9.r, odriverStmt9.setup, odriverStmt9.savedQuery)
}
func (odriverStmt9 *tdriverStmt9) Exec(args []driver.Value) (driver.Result, error) {
	return traceDSExec(odriverStmt9.r, odriverStmt9.setup, odriverStmt9.savedQuery, args)
}
func (odriverStmt9 *tdriverStmt9) NumInput() int {
	return traceDSNumInput(odriverStmt9.r, odriverStmt9.setup, odriverStmt9.savedQuery)
}
func (odriverStmt9 *tdriverStmt9) Query(args []driver.Value) (driver.Rows, error) {
	return traceDSQuery(odriverStmt9.r, odriverStmt9.setup, odriverStmt9.savedQuery, args)
}
func (odriverStmt9 *tdriverStmt9) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDSCheckNamedValue(odriverStmt9.r, odriverStmt9.setup, odriverStmt9.savedQuery, param0)
}
func (odriverStmt9 *tdriverStmt9) QueryContext(ctx context.Context, args []driver.NamedValue) (driver.Rows, error) {
	return traceDSQueryContext(odriverStmt9.r, odriverStmt9.setup, odriverStmt9.savedQuery, ctx, args)
}

func (odriverStmt10 *tdriverStmt10) Close() error {
	return traceDSClose(odriverStmt10.r, odriverStmt10.setup, odriverStmt10.savedQuery)
}
func (odriverStmt10 *tdriverStmt10) Exec(args []driver.Value) (driver.Result, error) {
	return traceDSExec(odriverStmt10.r, odriverStmt10.setup, odriverStmt10.savedQuery, args)
}
func (odriverStmt10 *tdriverStmt10) NumInput() int {
	return traceDSNumInput(odriverStmt10.r, odriverStmt10.setup, odriverStmt10.savedQuery)
}
func (odriverStmt10 *tdriverStmt10) Query(args []driver.Value) (driver.Rows, error) {
	return traceDSQuery(odriverStmt10.r, odriverStmt10.setup, odriverStmt10.savedQuery, args)
}
func (odriverStmt10 *tdriverStmt10) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error) {
	return traceDSExecContext(odriverStmt10.r, odriverStmt10.setup, odriverStmt10.savedQuery, ctx, args)
}
func (odriverStmt10 *tdriverStmt10) QueryContext(ctx context.Context, args []driver.NamedValue) (driver.Rows, error) {
	return traceDSQueryContext(odriverStmt10.r, odriverStmt10.setup, odriverStmt10.savedQuery, ctx, args)
}

func (odriverStmt11 *tdriverStmt11) Close() error {
	return traceDSClose(odriverStmt11.r, odriverStmt11.setup, odriverStmt11.savedQuery)
}
func (odriverStmt11 *tdriverStmt11) Exec(args []driver.Value) (driver.Result, error) {
	return traceDSExec(odriverStmt11.r, odriverStmt11.setup, odriverStmt11.savedQuery, args)
}
func (odriverStmt11 *tdriverStmt11) NumInput() int {
	return traceDSNumInput(odriverStmt11.r, odriverStmt11.setup, odriverStmt11.savedQuery)
}
func (odriverStmt11 *tdriverStmt11) Query(args []driver.Value) (driver.Rows, error) {
	return traceDSQuery(odriverStmt11.r, odriverStmt11.setup, odriverStmt11.savedQuery, args)
}
func (odriverStmt11 *tdriverStmt11) ColumnConverter(idx int) driver.ValueConverter {
	return traceDSColumnConverter(odriverStmt11.r, odriverStmt11.setup, odriverStmt11.savedQuery, idx)
}
func (odriverStmt11 *tdriverStmt11) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDSCheckNamedValue(odriverStmt11.r, odriverStmt11.setup, odriverStmt11.savedQuery, param0)
}
func (odriverStmt11 *tdriverStmt11) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error) {
	return traceDSExecContext(odriverStmt11.r, odriverStmt11.setup, odriverStmt11.savedQuery, ctx, args)
}

func (odriverStmt12 *tdriverStmt12) Close() error {
	return traceDSClose(odriverStmt12.r, odriverStmt12.setup, odriverStmt12.savedQuery)
}
func (odriverStmt12 *tdriverStmt12) Exec(args []driver.Value) (driver.Result, error) {
	return traceDSExec(odriverStmt12.r, odriverStmt12.setup, odriverStmt12.savedQuery, args)
}
func (odriverStmt12 *tdriverStmt12) NumInput() int {
	return traceDSNumInput(odriverStmt12.r, odriverStmt12.setup, odriverStmt12.savedQuery)
}
func (odriverStmt12 *tdriverStmt12) Query(args []driver.Value) (driver.Rows, error) {
	return traceDSQuery(odriverStmt12.r, odriverStmt12.setup, odriverStmt12.savedQuery, args)
}
func (odriverStmt12 *tdriverStmt12) ColumnConverter(idx int) driver.ValueConverter {
	return traceDSColumnConverter(odriverStmt12.r, odriverStmt12.setup, odriverStmt12.savedQuery, idx)
}
func (odriverStmt12 *tdriverStmt12) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDSCheckNamedValue(odriverStmt12.r, odriverStmt12.setup, odriverStmt12.savedQuery, param0)
}
func (odriverStmt12 *tdriverStmt12) QueryContext(ctx context.Context, args []driver.NamedValue) (driver.Rows, error) {
	return traceDSQueryContext(odriverStmt12.r, odriverStmt12.setup, odriverStmt12.savedQuery, ctx, args)
}

func (odriverStmt13 *tdriverStmt13) Close() error {
	return traceDSClose(odriverStmt13.r, odriverStmt13.setup, odriverStmt13.savedQuery)
}
func (odriverStmt13 *tdriverStmt13) Exec(args []driver.Value) (driver.Result, error) {
	return traceDSExec(odriverStmt13.r, odriverStmt13.setup, odriverStmt13.savedQuery, args)
}
func (odriverStmt13 *tdriverStmt13) NumInput() int {
	return traceDSNumInput(odriverStmt13.r, odriverStmt13.setup, odriverStmt13.savedQuery)
}
func (odriverStmt13 *tdriverStmt13) Query(args []driver.Value) (driver.Rows, error) {
	return traceDSQuery(odriverStmt13.r, odriverStmt13.setup, odriverStmt13.savedQuery, args)
}
func (odriverStmt13 *tdriverStmt13) ColumnConverter(idx int) driver.ValueConverter {
	return traceDSColumnConverter(odriverStmt13.r, odriverStmt13.setup, odriverStmt13.savedQuery, idx)
}
func (odriverStmt13 *tdriverStmt13) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error) {
	return traceDSExecContext(odriverStmt13.r, odriverStmt13.setup, odriverStmt13.savedQuery, ctx, args)
}
func (odriverStmt13 *tdriverStmt13) QueryContext(ctx context.Context, args []driver.NamedValue) (driver.Rows, error) {
	return traceDSQueryContext(odriverStmt13.r, odriverStmt13.setup, odriverStmt13.savedQuery, ctx, args)
}

func (odriverStmt14 *tdriverStmt14) Close() error {
	return traceDSClose(odriverStmt14.r, odriverStmt14.setup, odriverStmt14.savedQuery)
}
func (odriverStmt14 *tdriverStmt14) Exec(args []driver.Value) (driver.Result, error) {
	return traceDSExec(odriverStmt14.r, odriverStmt14.setup, odriverStmt14.savedQuery, args)
}
func (odriverStmt14 *tdriverStmt14) NumInput() int {
	return traceDSNumInput(odriverStmt14.r, odriverStmt14.setup, odriverStmt14.savedQuery)
}
func (odriverStmt14 *tdriverStmt14) Query(args []driver.Value) (driver.Rows, error) {
	return traceDSQuery(odriverStmt14.r, odriverStmt14.setup, odriverStmt14.savedQuery, args)
}
func (odriverStmt14 *tdriverStmt14) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDSCheckNamedValue(odriverStmt14.r, odriverStmt14.setup, odriverStmt14.savedQuery, param0)
}
func (odriverStmt14 *tdriverStmt14) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error) {
	return traceDSExecContext(odriverStmt14.r, odriverStmt14.setup, odriverStmt14.savedQuery, ctx, args)
}
func (odriverStmt14 *tdriverStmt14) QueryContext(ctx context.Context, args []driver.NamedValue) (driver.Rows, error) {
	return traceDSQueryContext(odriverStmt14.r, odriverStmt14.setup, odriverStmt14.savedQuery, ctx, args)
}

func (odriverStmt15 *tdriverStmt15) Close() error {
	return traceDSClose(odriverStmt15.r, odriverStmt15.setup, odriverStmt15.savedQuery)
}
func (odriverStmt15 *tdriverStmt15) Exec(args []driver.Value) (driver.Result, error) {
	return traceDSExec(odriverStmt15.r, odriverStmt15.setup, odriverStmt15.savedQuery, args)
}
func (odriverStmt15 *tdriverStmt15) NumInput() int {
	return traceDSNumInput(odriverStmt15.r, odriverStmt15.setup, odriverStmt15.savedQuery)
}
func (odriverStmt15 *tdriverStmt15) Query(args []driver.Value) (driver.Rows, error) {
	return traceDSQuery(odriverStmt15.r, odriverStmt15.setup, odriverStmt15.savedQuery, args)
}
func (odriverStmt15 *tdriverStmt15) ColumnConverter(idx int) driver.ValueConverter {
	return traceDSColumnConverter(odriverStmt15.r, odriverStmt15.setup, odriverStmt15.savedQuery, idx)
}
func (odriverStmt15 *tdriverStmt15) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDSCheckNamedValue(odriverStmt15.r, odriverStmt15.setup, odriverStmt15.savedQuery, param0)
}
func (odriverStmt15 *tdriverStmt15) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error) {
	return traceDSExecContext(odriverStmt15.r, odriverStmt15.setup, odriverStmt15.savedQuery, ctx, args)
}
func (odriverStmt15 *tdriverStmt15) QueryContext(ctx context.Context, args []driver.NamedValue) (driver.Rows, error) {
	return traceDSQueryContext(odriverStmt15.r, odriverStmt15.setup, odriverStmt15.savedQuery, ctx, args)
}

func newStmt(traceDSStmt driver.Stmt, setup *tracingSetup, savedQuery string) driver.Stmt {
	switch r := traceDSStmt.(type) {
	case idriverStmt15:
		return &tdriverStmt15{
			r:          r,
			setup:      setup,
			savedQuery: savedQuery,
		}
	case idriverStmt14:
		return &tdriverStmt14{
			r:          r,
			setup:      setup,
			savedQuery: savedQuery,
		}
	case idriverStmt13:
		return &tdriverStmt13{
			r:          r,
			setup:      setup,
			savedQuery: savedQuery,
		}
	case idriverStmt12:
		return &tdriverStmt12{
			r:          r,
			setup:      setup,
			savedQuery: savedQuery,
		}
	case idriverStmt11:
		return &tdriverStmt11{
			r:          r,
			setup:      setup,
			savedQuery: savedQuery,
		}
	case idriverStmt10:
		return &tdriverStmt10{
			r:          r,
			setup:      setup,
			savedQuery: savedQuery,
		}
	case idriverStmt9:
		return &tdriverStmt9{
			r:          r,
			setup:      setup,
			savedQuery: savedQuery,
		}
	case idriverStmt8:
		return &tdriverStmt8{
			r:          r,
			setup:      setup,
			savedQuery: savedQuery,
		}
	case idriverStmt7:
		return &tdriverStmt7{
			r:          r,
			setup:      setup,
			savedQuery: savedQuery,
		}
	case idriverStmt6:
		return &tdriverStmt6{
			r:          r,
			setup:      setup,
			savedQuery: savedQuery,
		}
	case idriverStmt5:
		return &tdriverStmt5{
			r:          r,
			setup:      setup,
			savedQuery: savedQuery,
		}
	case idriverStmt4:
		return &tdriverStmt4{
			r:          r,
			setup:      setup,
			savedQuery: savedQuery,
		}
	case idriverStmt3:
		return &tdriverStmt3{
			r:          r,
			setup:      setup,
			savedQuery: savedQuery,
		}
	case idriverStmt2:
		return &tdriverStmt2{
			r:          r,
			setup:      setup,
			savedQuery: savedQuery,
		}
	case idriverStmt1:
		return &tdriverStmt1{
			r:          r,
			setup:      setup,
			savedQuery: savedQuery,
		}
	}
	return &tdriverStmt0{
		r:          traceDSStmt,
		setup:      setup,
		savedQuery: savedQuery,
	}
}
