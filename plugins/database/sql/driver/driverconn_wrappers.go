// Code generated by "wrappergen -basetype=driver.Conn -exttypes=driver.ConnBeginTx;driver.ConnPrepareContext;driver.Execer;driver.ExecerContext;driver.NamedValueChecker;driver.Pinger;driver.Queryer;driver.QueryerContext;driver.SessionResetter -extrafields=setup,*tracingSetup -prefix=traceDC -newfuncname=newConn"; DO NOT EDIT.

package driver

import (
	"context"
	"database/sql/driver"
)

type (
	idriverConn0 interface {
		driver.Conn
	}

	tdriverConn0 struct {
		r     idriverConn0
		setup *tracingSetup
	}

	idriverConn1 interface {
		driver.Conn
		driver.ConnBeginTx
	}

	tdriverConn1 struct {
		r     idriverConn1
		setup *tracingSetup
	}

	idriverConn2 interface {
		driver.Conn
		driver.ConnPrepareContext
	}

	tdriverConn2 struct {
		r     idriverConn2
		setup *tracingSetup
	}

	idriverConn3 interface {
		driver.Conn
		driver.Execer
	}

	tdriverConn3 struct {
		r     idriverConn3
		setup *tracingSetup
	}

	idriverConn4 interface {
		driver.Conn
		driver.ExecerContext
	}

	tdriverConn4 struct {
		r     idriverConn4
		setup *tracingSetup
	}

	idriverConn5 interface {
		driver.Conn
		driver.NamedValueChecker
	}

	tdriverConn5 struct {
		r     idriverConn5
		setup *tracingSetup
	}

	idriverConn6 interface {
		driver.Conn
		driver.Pinger
	}

	tdriverConn6 struct {
		r     idriverConn6
		setup *tracingSetup
	}

	idriverConn7 interface {
		driver.Conn
		driver.Queryer
	}

	tdriverConn7 struct {
		r     idriverConn7
		setup *tracingSetup
	}

	idriverConn8 interface {
		driver.Conn
		driver.QueryerContext
	}

	tdriverConn8 struct {
		r     idriverConn8
		setup *tracingSetup
	}

	idriverConn9 interface {
		driver.Conn
		driver.SessionResetter
	}

	tdriverConn9 struct {
		r     idriverConn9
		setup *tracingSetup
	}

	idriverConn10 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
	}

	tdriverConn10 struct {
		r     idriverConn10
		setup *tracingSetup
	}

	idriverConn11 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
	}

	tdriverConn11 struct {
		r     idriverConn11
		setup *tracingSetup
	}

	idriverConn12 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
	}

	tdriverConn12 struct {
		r     idriverConn12
		setup *tracingSetup
	}

	idriverConn13 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.NamedValueChecker
	}

	tdriverConn13 struct {
		r     idriverConn13
		setup *tracingSetup
	}

	idriverConn14 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Pinger
	}

	tdriverConn14 struct {
		r     idriverConn14
		setup *tracingSetup
	}

	idriverConn15 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Queryer
	}

	tdriverConn15 struct {
		r     idriverConn15
		setup *tracingSetup
	}

	idriverConn16 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.QueryerContext
	}

	tdriverConn16 struct {
		r     idriverConn16
		setup *tracingSetup
	}

	idriverConn17 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.SessionResetter
	}

	tdriverConn17 struct {
		r     idriverConn17
		setup *tracingSetup
	}

	idriverConn18 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
	}

	tdriverConn18 struct {
		r     idriverConn18
		setup *tracingSetup
	}

	idriverConn19 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
	}

	tdriverConn19 struct {
		r     idriverConn19
		setup *tracingSetup
	}

	idriverConn20 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.NamedValueChecker
	}

	tdriverConn20 struct {
		r     idriverConn20
		setup *tracingSetup
	}

	idriverConn21 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Pinger
	}

	tdriverConn21 struct {
		r     idriverConn21
		setup *tracingSetup
	}

	idriverConn22 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Queryer
	}

	tdriverConn22 struct {
		r     idriverConn22
		setup *tracingSetup
	}

	idriverConn23 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.QueryerContext
	}

	tdriverConn23 struct {
		r     idriverConn23
		setup *tracingSetup
	}

	idriverConn24 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.SessionResetter
	}

	tdriverConn24 struct {
		r     idriverConn24
		setup *tracingSetup
	}

	idriverConn25 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
	}

	tdriverConn25 struct {
		r     idriverConn25
		setup *tracingSetup
	}

	idriverConn26 interface {
		driver.Conn
		driver.Execer
		driver.NamedValueChecker
	}

	tdriverConn26 struct {
		r     idriverConn26
		setup *tracingSetup
	}

	idriverConn27 interface {
		driver.Conn
		driver.Execer
		driver.Pinger
	}

	tdriverConn27 struct {
		r     idriverConn27
		setup *tracingSetup
	}

	idriverConn28 interface {
		driver.Conn
		driver.Execer
		driver.Queryer
	}

	tdriverConn28 struct {
		r     idriverConn28
		setup *tracingSetup
	}

	idriverConn29 interface {
		driver.Conn
		driver.Execer
		driver.QueryerContext
	}

	tdriverConn29 struct {
		r     idriverConn29
		setup *tracingSetup
	}

	idriverConn30 interface {
		driver.Conn
		driver.Execer
		driver.SessionResetter
	}

	tdriverConn30 struct {
		r     idriverConn30
		setup *tracingSetup
	}

	idriverConn31 interface {
		driver.Conn
		driver.ExecerContext
		driver.NamedValueChecker
	}

	tdriverConn31 struct {
		r     idriverConn31
		setup *tracingSetup
	}

	idriverConn32 interface {
		driver.Conn
		driver.ExecerContext
		driver.Pinger
	}

	tdriverConn32 struct {
		r     idriverConn32
		setup *tracingSetup
	}

	idriverConn33 interface {
		driver.Conn
		driver.ExecerContext
		driver.Queryer
	}

	tdriverConn33 struct {
		r     idriverConn33
		setup *tracingSetup
	}

	idriverConn34 interface {
		driver.Conn
		driver.ExecerContext
		driver.QueryerContext
	}

	tdriverConn34 struct {
		r     idriverConn34
		setup *tracingSetup
	}

	idriverConn35 interface {
		driver.Conn
		driver.ExecerContext
		driver.SessionResetter
	}

	tdriverConn35 struct {
		r     idriverConn35
		setup *tracingSetup
	}

	idriverConn36 interface {
		driver.Conn
		driver.NamedValueChecker
		driver.Pinger
	}

	tdriverConn36 struct {
		r     idriverConn36
		setup *tracingSetup
	}

	idriverConn37 interface {
		driver.Conn
		driver.NamedValueChecker
		driver.Queryer
	}

	tdriverConn37 struct {
		r     idriverConn37
		setup *tracingSetup
	}

	idriverConn38 interface {
		driver.Conn
		driver.NamedValueChecker
		driver.QueryerContext
	}

	tdriverConn38 struct {
		r     idriverConn38
		setup *tracingSetup
	}

	idriverConn39 interface {
		driver.Conn
		driver.NamedValueChecker
		driver.SessionResetter
	}

	tdriverConn39 struct {
		r     idriverConn39
		setup *tracingSetup
	}

	idriverConn40 interface {
		driver.Conn
		driver.Pinger
		driver.Queryer
	}

	tdriverConn40 struct {
		r     idriverConn40
		setup *tracingSetup
	}

	idriverConn41 interface {
		driver.Conn
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn41 struct {
		r     idriverConn41
		setup *tracingSetup
	}

	idriverConn42 interface {
		driver.Conn
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn42 struct {
		r     idriverConn42
		setup *tracingSetup
	}

	idriverConn43 interface {
		driver.Conn
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn43 struct {
		r     idriverConn43
		setup *tracingSetup
	}

	idriverConn44 interface {
		driver.Conn
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn44 struct {
		r     idriverConn44
		setup *tracingSetup
	}

	idriverConn45 interface {
		driver.Conn
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn45 struct {
		r     idriverConn45
		setup *tracingSetup
	}

	idriverConn46 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
	}

	tdriverConn46 struct {
		r     idriverConn46
		setup *tracingSetup
	}

	idriverConn47 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
	}

	tdriverConn47 struct {
		r     idriverConn47
		setup *tracingSetup
	}

	idriverConn48 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.NamedValueChecker
	}

	tdriverConn48 struct {
		r     idriverConn48
		setup *tracingSetup
	}

	idriverConn49 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Pinger
	}

	tdriverConn49 struct {
		r     idriverConn49
		setup *tracingSetup
	}

	idriverConn50 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Queryer
	}

	tdriverConn50 struct {
		r     idriverConn50
		setup *tracingSetup
	}

	idriverConn51 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.QueryerContext
	}

	tdriverConn51 struct {
		r     idriverConn51
		setup *tracingSetup
	}

	idriverConn52 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.SessionResetter
	}

	tdriverConn52 struct {
		r     idriverConn52
		setup *tracingSetup
	}

	idriverConn53 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
	}

	tdriverConn53 struct {
		r     idriverConn53
		setup *tracingSetup
	}

	idriverConn54 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.NamedValueChecker
	}

	tdriverConn54 struct {
		r     idriverConn54
		setup *tracingSetup
	}

	idriverConn55 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.Pinger
	}

	tdriverConn55 struct {
		r     idriverConn55
		setup *tracingSetup
	}

	idriverConn56 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.Queryer
	}

	tdriverConn56 struct {
		r     idriverConn56
		setup *tracingSetup
	}

	idriverConn57 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.QueryerContext
	}

	tdriverConn57 struct {
		r     idriverConn57
		setup *tracingSetup
	}

	idriverConn58 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.SessionResetter
	}

	tdriverConn58 struct {
		r     idriverConn58
		setup *tracingSetup
	}

	idriverConn59 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.NamedValueChecker
	}

	tdriverConn59 struct {
		r     idriverConn59
		setup *tracingSetup
	}

	idriverConn60 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.Pinger
	}

	tdriverConn60 struct {
		r     idriverConn60
		setup *tracingSetup
	}

	idriverConn61 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.Queryer
	}

	tdriverConn61 struct {
		r     idriverConn61
		setup *tracingSetup
	}

	idriverConn62 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.QueryerContext
	}

	tdriverConn62 struct {
		r     idriverConn62
		setup *tracingSetup
	}

	idriverConn63 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.SessionResetter
	}

	tdriverConn63 struct {
		r     idriverConn63
		setup *tracingSetup
	}

	idriverConn64 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.NamedValueChecker
		driver.Pinger
	}

	tdriverConn64 struct {
		r     idriverConn64
		setup *tracingSetup
	}

	idriverConn65 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.NamedValueChecker
		driver.Queryer
	}

	tdriverConn65 struct {
		r     idriverConn65
		setup *tracingSetup
	}

	idriverConn66 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.NamedValueChecker
		driver.QueryerContext
	}

	tdriverConn66 struct {
		r     idriverConn66
		setup *tracingSetup
	}

	idriverConn67 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.NamedValueChecker
		driver.SessionResetter
	}

	tdriverConn67 struct {
		r     idriverConn67
		setup *tracingSetup
	}

	idriverConn68 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Pinger
		driver.Queryer
	}

	tdriverConn68 struct {
		r     idriverConn68
		setup *tracingSetup
	}

	idriverConn69 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn69 struct {
		r     idriverConn69
		setup *tracingSetup
	}

	idriverConn70 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn70 struct {
		r     idriverConn70
		setup *tracingSetup
	}

	idriverConn71 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn71 struct {
		r     idriverConn71
		setup *tracingSetup
	}

	idriverConn72 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn72 struct {
		r     idriverConn72
		setup *tracingSetup
	}

	idriverConn73 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn73 struct {
		r     idriverConn73
		setup *tracingSetup
	}

	idriverConn74 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
	}

	tdriverConn74 struct {
		r     idriverConn74
		setup *tracingSetup
	}

	idriverConn75 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
	}

	tdriverConn75 struct {
		r     idriverConn75
		setup *tracingSetup
	}

	idriverConn76 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.Pinger
	}

	tdriverConn76 struct {
		r     idriverConn76
		setup *tracingSetup
	}

	idriverConn77 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.Queryer
	}

	tdriverConn77 struct {
		r     idriverConn77
		setup *tracingSetup
	}

	idriverConn78 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.QueryerContext
	}

	tdriverConn78 struct {
		r     idriverConn78
		setup *tracingSetup
	}

	idriverConn79 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.SessionResetter
	}

	tdriverConn79 struct {
		r     idriverConn79
		setup *tracingSetup
	}

	idriverConn80 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
	}

	tdriverConn80 struct {
		r     idriverConn80
		setup *tracingSetup
	}

	idriverConn81 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Pinger
	}

	tdriverConn81 struct {
		r     idriverConn81
		setup *tracingSetup
	}

	idriverConn82 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Queryer
	}

	tdriverConn82 struct {
		r     idriverConn82
		setup *tracingSetup
	}

	idriverConn83 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.QueryerContext
	}

	tdriverConn83 struct {
		r     idriverConn83
		setup *tracingSetup
	}

	idriverConn84 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.SessionResetter
	}

	tdriverConn84 struct {
		r     idriverConn84
		setup *tracingSetup
	}

	idriverConn85 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Pinger
	}

	tdriverConn85 struct {
		r     idriverConn85
		setup *tracingSetup
	}

	idriverConn86 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Queryer
	}

	tdriverConn86 struct {
		r     idriverConn86
		setup *tracingSetup
	}

	idriverConn87 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.QueryerContext
	}

	tdriverConn87 struct {
		r     idriverConn87
		setup *tracingSetup
	}

	idriverConn88 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.SessionResetter
	}

	tdriverConn88 struct {
		r     idriverConn88
		setup *tracingSetup
	}

	idriverConn89 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Pinger
		driver.Queryer
	}

	tdriverConn89 struct {
		r     idriverConn89
		setup *tracingSetup
	}

	idriverConn90 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn90 struct {
		r     idriverConn90
		setup *tracingSetup
	}

	idriverConn91 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn91 struct {
		r     idriverConn91
		setup *tracingSetup
	}

	idriverConn92 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn92 struct {
		r     idriverConn92
		setup *tracingSetup
	}

	idriverConn93 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn93 struct {
		r     idriverConn93
		setup *tracingSetup
	}

	idriverConn94 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn94 struct {
		r     idriverConn94
		setup *tracingSetup
	}

	idriverConn95 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
	}

	tdriverConn95 struct {
		r     idriverConn95
		setup *tracingSetup
	}

	idriverConn96 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.Pinger
	}

	tdriverConn96 struct {
		r     idriverConn96
		setup *tracingSetup
	}

	idriverConn97 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.Queryer
	}

	tdriverConn97 struct {
		r     idriverConn97
		setup *tracingSetup
	}

	idriverConn98 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.QueryerContext
	}

	tdriverConn98 struct {
		r     idriverConn98
		setup *tracingSetup
	}

	idriverConn99 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.SessionResetter
	}

	tdriverConn99 struct {
		r     idriverConn99
		setup *tracingSetup
	}

	idriverConn100 interface {
		driver.Conn
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
	}

	tdriverConn100 struct {
		r     idriverConn100
		setup *tracingSetup
	}

	idriverConn101 interface {
		driver.Conn
		driver.Execer
		driver.NamedValueChecker
		driver.Queryer
	}

	tdriverConn101 struct {
		r     idriverConn101
		setup *tracingSetup
	}

	idriverConn102 interface {
		driver.Conn
		driver.Execer
		driver.NamedValueChecker
		driver.QueryerContext
	}

	tdriverConn102 struct {
		r     idriverConn102
		setup *tracingSetup
	}

	idriverConn103 interface {
		driver.Conn
		driver.Execer
		driver.NamedValueChecker
		driver.SessionResetter
	}

	tdriverConn103 struct {
		r     idriverConn103
		setup *tracingSetup
	}

	idriverConn104 interface {
		driver.Conn
		driver.Execer
		driver.Pinger
		driver.Queryer
	}

	tdriverConn104 struct {
		r     idriverConn104
		setup *tracingSetup
	}

	idriverConn105 interface {
		driver.Conn
		driver.Execer
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn105 struct {
		r     idriverConn105
		setup *tracingSetup
	}

	idriverConn106 interface {
		driver.Conn
		driver.Execer
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn106 struct {
		r     idriverConn106
		setup *tracingSetup
	}

	idriverConn107 interface {
		driver.Conn
		driver.Execer
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn107 struct {
		r     idriverConn107
		setup *tracingSetup
	}

	idriverConn108 interface {
		driver.Conn
		driver.Execer
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn108 struct {
		r     idriverConn108
		setup *tracingSetup
	}

	idriverConn109 interface {
		driver.Conn
		driver.Execer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn109 struct {
		r     idriverConn109
		setup *tracingSetup
	}

	idriverConn110 interface {
		driver.Conn
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
	}

	tdriverConn110 struct {
		r     idriverConn110
		setup *tracingSetup
	}

	idriverConn111 interface {
		driver.Conn
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
	}

	tdriverConn111 struct {
		r     idriverConn111
		setup *tracingSetup
	}

	idriverConn112 interface {
		driver.Conn
		driver.ExecerContext
		driver.NamedValueChecker
		driver.QueryerContext
	}

	tdriverConn112 struct {
		r     idriverConn112
		setup *tracingSetup
	}

	idriverConn113 interface {
		driver.Conn
		driver.ExecerContext
		driver.NamedValueChecker
		driver.SessionResetter
	}

	tdriverConn113 struct {
		r     idriverConn113
		setup *tracingSetup
	}

	idriverConn114 interface {
		driver.Conn
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
	}

	tdriverConn114 struct {
		r     idriverConn114
		setup *tracingSetup
	}

	idriverConn115 interface {
		driver.Conn
		driver.ExecerContext
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn115 struct {
		r     idriverConn115
		setup *tracingSetup
	}

	idriverConn116 interface {
		driver.Conn
		driver.ExecerContext
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn116 struct {
		r     idriverConn116
		setup *tracingSetup
	}

	idriverConn117 interface {
		driver.Conn
		driver.ExecerContext
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn117 struct {
		r     idriverConn117
		setup *tracingSetup
	}

	idriverConn118 interface {
		driver.Conn
		driver.ExecerContext
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn118 struct {
		r     idriverConn118
		setup *tracingSetup
	}

	idriverConn119 interface {
		driver.Conn
		driver.ExecerContext
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn119 struct {
		r     idriverConn119
		setup *tracingSetup
	}

	idriverConn120 interface {
		driver.Conn
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
	}

	tdriverConn120 struct {
		r     idriverConn120
		setup *tracingSetup
	}

	idriverConn121 interface {
		driver.Conn
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn121 struct {
		r     idriverConn121
		setup *tracingSetup
	}

	idriverConn122 interface {
		driver.Conn
		driver.NamedValueChecker
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn122 struct {
		r     idriverConn122
		setup *tracingSetup
	}

	idriverConn123 interface {
		driver.Conn
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn123 struct {
		r     idriverConn123
		setup *tracingSetup
	}

	idriverConn124 interface {
		driver.Conn
		driver.NamedValueChecker
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn124 struct {
		r     idriverConn124
		setup *tracingSetup
	}

	idriverConn125 interface {
		driver.Conn
		driver.NamedValueChecker
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn125 struct {
		r     idriverConn125
		setup *tracingSetup
	}

	idriverConn126 interface {
		driver.Conn
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn126 struct {
		r     idriverConn126
		setup *tracingSetup
	}

	idriverConn127 interface {
		driver.Conn
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn127 struct {
		r     idriverConn127
		setup *tracingSetup
	}

	idriverConn128 interface {
		driver.Conn
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn128 struct {
		r     idriverConn128
		setup *tracingSetup
	}

	idriverConn129 interface {
		driver.Conn
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn129 struct {
		r     idriverConn129
		setup *tracingSetup
	}

	idriverConn130 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
	}

	tdriverConn130 struct {
		r     idriverConn130
		setup *tracingSetup
	}

	idriverConn131 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
	}

	tdriverConn131 struct {
		r     idriverConn131
		setup *tracingSetup
	}

	idriverConn132 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.Pinger
	}

	tdriverConn132 struct {
		r     idriverConn132
		setup *tracingSetup
	}

	idriverConn133 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.Queryer
	}

	tdriverConn133 struct {
		r     idriverConn133
		setup *tracingSetup
	}

	idriverConn134 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.QueryerContext
	}

	tdriverConn134 struct {
		r     idriverConn134
		setup *tracingSetup
	}

	idriverConn135 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.SessionResetter
	}

	tdriverConn135 struct {
		r     idriverConn135
		setup *tracingSetup
	}

	idriverConn136 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
	}

	tdriverConn136 struct {
		r     idriverConn136
		setup *tracingSetup
	}

	idriverConn137 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Pinger
	}

	tdriverConn137 struct {
		r     idriverConn137
		setup *tracingSetup
	}

	idriverConn138 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Queryer
	}

	tdriverConn138 struct {
		r     idriverConn138
		setup *tracingSetup
	}

	idriverConn139 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.QueryerContext
	}

	tdriverConn139 struct {
		r     idriverConn139
		setup *tracingSetup
	}

	idriverConn140 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.SessionResetter
	}

	tdriverConn140 struct {
		r     idriverConn140
		setup *tracingSetup
	}

	idriverConn141 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Pinger
	}

	tdriverConn141 struct {
		r     idriverConn141
		setup *tracingSetup
	}

	idriverConn142 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Queryer
	}

	tdriverConn142 struct {
		r     idriverConn142
		setup *tracingSetup
	}

	idriverConn143 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.QueryerContext
	}

	tdriverConn143 struct {
		r     idriverConn143
		setup *tracingSetup
	}

	idriverConn144 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.SessionResetter
	}

	tdriverConn144 struct {
		r     idriverConn144
		setup *tracingSetup
	}

	idriverConn145 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Pinger
		driver.Queryer
	}

	tdriverConn145 struct {
		r     idriverConn145
		setup *tracingSetup
	}

	idriverConn146 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn146 struct {
		r     idriverConn146
		setup *tracingSetup
	}

	idriverConn147 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn147 struct {
		r     idriverConn147
		setup *tracingSetup
	}

	idriverConn148 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn148 struct {
		r     idriverConn148
		setup *tracingSetup
	}

	idriverConn149 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn149 struct {
		r     idriverConn149
		setup *tracingSetup
	}

	idriverConn150 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn150 struct {
		r     idriverConn150
		setup *tracingSetup
	}

	idriverConn151 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
	}

	tdriverConn151 struct {
		r     idriverConn151
		setup *tracingSetup
	}

	idriverConn152 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.Pinger
	}

	tdriverConn152 struct {
		r     idriverConn152
		setup *tracingSetup
	}

	idriverConn153 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.Queryer
	}

	tdriverConn153 struct {
		r     idriverConn153
		setup *tracingSetup
	}

	idriverConn154 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.QueryerContext
	}

	tdriverConn154 struct {
		r     idriverConn154
		setup *tracingSetup
	}

	idriverConn155 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.SessionResetter
	}

	tdriverConn155 struct {
		r     idriverConn155
		setup *tracingSetup
	}

	idriverConn156 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
	}

	tdriverConn156 struct {
		r     idriverConn156
		setup *tracingSetup
	}

	idriverConn157 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.NamedValueChecker
		driver.Queryer
	}

	tdriverConn157 struct {
		r     idriverConn157
		setup *tracingSetup
	}

	idriverConn158 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.NamedValueChecker
		driver.QueryerContext
	}

	tdriverConn158 struct {
		r     idriverConn158
		setup *tracingSetup
	}

	idriverConn159 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.NamedValueChecker
		driver.SessionResetter
	}

	tdriverConn159 struct {
		r     idriverConn159
		setup *tracingSetup
	}

	idriverConn160 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.Pinger
		driver.Queryer
	}

	tdriverConn160 struct {
		r     idriverConn160
		setup *tracingSetup
	}

	idriverConn161 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn161 struct {
		r     idriverConn161
		setup *tracingSetup
	}

	idriverConn162 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn162 struct {
		r     idriverConn162
		setup *tracingSetup
	}

	idriverConn163 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn163 struct {
		r     idriverConn163
		setup *tracingSetup
	}

	idriverConn164 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn164 struct {
		r     idriverConn164
		setup *tracingSetup
	}

	idriverConn165 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn165 struct {
		r     idriverConn165
		setup *tracingSetup
	}

	idriverConn166 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
	}

	tdriverConn166 struct {
		r     idriverConn166
		setup *tracingSetup
	}

	idriverConn167 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
	}

	tdriverConn167 struct {
		r     idriverConn167
		setup *tracingSetup
	}

	idriverConn168 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.NamedValueChecker
		driver.QueryerContext
	}

	tdriverConn168 struct {
		r     idriverConn168
		setup *tracingSetup
	}

	idriverConn169 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.NamedValueChecker
		driver.SessionResetter
	}

	tdriverConn169 struct {
		r     idriverConn169
		setup *tracingSetup
	}

	idriverConn170 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
	}

	tdriverConn170 struct {
		r     idriverConn170
		setup *tracingSetup
	}

	idriverConn171 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn171 struct {
		r     idriverConn171
		setup *tracingSetup
	}

	idriverConn172 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn172 struct {
		r     idriverConn172
		setup *tracingSetup
	}

	idriverConn173 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn173 struct {
		r     idriverConn173
		setup *tracingSetup
	}

	idriverConn174 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn174 struct {
		r     idriverConn174
		setup *tracingSetup
	}

	idriverConn175 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn175 struct {
		r     idriverConn175
		setup *tracingSetup
	}

	idriverConn176 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
	}

	tdriverConn176 struct {
		r     idriverConn176
		setup *tracingSetup
	}

	idriverConn177 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn177 struct {
		r     idriverConn177
		setup *tracingSetup
	}

	idriverConn178 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.NamedValueChecker
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn178 struct {
		r     idriverConn178
		setup *tracingSetup
	}

	idriverConn179 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn179 struct {
		r     idriverConn179
		setup *tracingSetup
	}

	idriverConn180 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.NamedValueChecker
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn180 struct {
		r     idriverConn180
		setup *tracingSetup
	}

	idriverConn181 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.NamedValueChecker
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn181 struct {
		r     idriverConn181
		setup *tracingSetup
	}

	idriverConn182 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn182 struct {
		r     idriverConn182
		setup *tracingSetup
	}

	idriverConn183 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn183 struct {
		r     idriverConn183
		setup *tracingSetup
	}

	idriverConn184 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn184 struct {
		r     idriverConn184
		setup *tracingSetup
	}

	idriverConn185 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn185 struct {
		r     idriverConn185
		setup *tracingSetup
	}

	idriverConn186 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
	}

	tdriverConn186 struct {
		r     idriverConn186
		setup *tracingSetup
	}

	idriverConn187 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Pinger
	}

	tdriverConn187 struct {
		r     idriverConn187
		setup *tracingSetup
	}

	idriverConn188 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Queryer
	}

	tdriverConn188 struct {
		r     idriverConn188
		setup *tracingSetup
	}

	idriverConn189 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.QueryerContext
	}

	tdriverConn189 struct {
		r     idriverConn189
		setup *tracingSetup
	}

	idriverConn190 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.SessionResetter
	}

	tdriverConn190 struct {
		r     idriverConn190
		setup *tracingSetup
	}

	idriverConn191 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
	}

	tdriverConn191 struct {
		r     idriverConn191
		setup *tracingSetup
	}

	idriverConn192 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Queryer
	}

	tdriverConn192 struct {
		r     idriverConn192
		setup *tracingSetup
	}

	idriverConn193 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.QueryerContext
	}

	tdriverConn193 struct {
		r     idriverConn193
		setup *tracingSetup
	}

	idriverConn194 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.SessionResetter
	}

	tdriverConn194 struct {
		r     idriverConn194
		setup *tracingSetup
	}

	idriverConn195 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.Pinger
		driver.Queryer
	}

	tdriverConn195 struct {
		r     idriverConn195
		setup *tracingSetup
	}

	idriverConn196 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn196 struct {
		r     idriverConn196
		setup *tracingSetup
	}

	idriverConn197 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn197 struct {
		r     idriverConn197
		setup *tracingSetup
	}

	idriverConn198 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn198 struct {
		r     idriverConn198
		setup *tracingSetup
	}

	idriverConn199 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn199 struct {
		r     idriverConn199
		setup *tracingSetup
	}

	idriverConn200 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn200 struct {
		r     idriverConn200
		setup *tracingSetup
	}

	idriverConn201 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
	}

	tdriverConn201 struct {
		r     idriverConn201
		setup *tracingSetup
	}

	idriverConn202 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
	}

	tdriverConn202 struct {
		r     idriverConn202
		setup *tracingSetup
	}

	idriverConn203 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.QueryerContext
	}

	tdriverConn203 struct {
		r     idriverConn203
		setup *tracingSetup
	}

	idriverConn204 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.SessionResetter
	}

	tdriverConn204 struct {
		r     idriverConn204
		setup *tracingSetup
	}

	idriverConn205 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
	}

	tdriverConn205 struct {
		r     idriverConn205
		setup *tracingSetup
	}

	idriverConn206 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn206 struct {
		r     idriverConn206
		setup *tracingSetup
	}

	idriverConn207 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn207 struct {
		r     idriverConn207
		setup *tracingSetup
	}

	idriverConn208 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn208 struct {
		r     idriverConn208
		setup *tracingSetup
	}

	idriverConn209 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn209 struct {
		r     idriverConn209
		setup *tracingSetup
	}

	idriverConn210 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn210 struct {
		r     idriverConn210
		setup *tracingSetup
	}

	idriverConn211 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
	}

	tdriverConn211 struct {
		r     idriverConn211
		setup *tracingSetup
	}

	idriverConn212 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn212 struct {
		r     idriverConn212
		setup *tracingSetup
	}

	idriverConn213 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn213 struct {
		r     idriverConn213
		setup *tracingSetup
	}

	idriverConn214 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn214 struct {
		r     idriverConn214
		setup *tracingSetup
	}

	idriverConn215 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn215 struct {
		r     idriverConn215
		setup *tracingSetup
	}

	idriverConn216 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn216 struct {
		r     idriverConn216
		setup *tracingSetup
	}

	idriverConn217 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn217 struct {
		r     idriverConn217
		setup *tracingSetup
	}

	idriverConn218 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn218 struct {
		r     idriverConn218
		setup *tracingSetup
	}

	idriverConn219 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn219 struct {
		r     idriverConn219
		setup *tracingSetup
	}

	idriverConn220 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn220 struct {
		r     idriverConn220
		setup *tracingSetup
	}

	idriverConn221 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
	}

	tdriverConn221 struct {
		r     idriverConn221
		setup *tracingSetup
	}

	idriverConn222 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
	}

	tdriverConn222 struct {
		r     idriverConn222
		setup *tracingSetup
	}

	idriverConn223 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.QueryerContext
	}

	tdriverConn223 struct {
		r     idriverConn223
		setup *tracingSetup
	}

	idriverConn224 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.SessionResetter
	}

	tdriverConn224 struct {
		r     idriverConn224
		setup *tracingSetup
	}

	idriverConn225 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
	}

	tdriverConn225 struct {
		r     idriverConn225
		setup *tracingSetup
	}

	idriverConn226 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn226 struct {
		r     idriverConn226
		setup *tracingSetup
	}

	idriverConn227 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn227 struct {
		r     idriverConn227
		setup *tracingSetup
	}

	idriverConn228 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn228 struct {
		r     idriverConn228
		setup *tracingSetup
	}

	idriverConn229 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn229 struct {
		r     idriverConn229
		setup *tracingSetup
	}

	idriverConn230 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn230 struct {
		r     idriverConn230
		setup *tracingSetup
	}

	idriverConn231 interface {
		driver.Conn
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
	}

	tdriverConn231 struct {
		r     idriverConn231
		setup *tracingSetup
	}

	idriverConn232 interface {
		driver.Conn
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn232 struct {
		r     idriverConn232
		setup *tracingSetup
	}

	idriverConn233 interface {
		driver.Conn
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn233 struct {
		r     idriverConn233
		setup *tracingSetup
	}

	idriverConn234 interface {
		driver.Conn
		driver.Execer
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn234 struct {
		r     idriverConn234
		setup *tracingSetup
	}

	idriverConn235 interface {
		driver.Conn
		driver.Execer
		driver.NamedValueChecker
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn235 struct {
		r     idriverConn235
		setup *tracingSetup
	}

	idriverConn236 interface {
		driver.Conn
		driver.Execer
		driver.NamedValueChecker
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn236 struct {
		r     idriverConn236
		setup *tracingSetup
	}

	idriverConn237 interface {
		driver.Conn
		driver.Execer
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn237 struct {
		r     idriverConn237
		setup *tracingSetup
	}

	idriverConn238 interface {
		driver.Conn
		driver.Execer
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn238 struct {
		r     idriverConn238
		setup *tracingSetup
	}

	idriverConn239 interface {
		driver.Conn
		driver.Execer
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn239 struct {
		r     idriverConn239
		setup *tracingSetup
	}

	idriverConn240 interface {
		driver.Conn
		driver.Execer
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn240 struct {
		r     idriverConn240
		setup *tracingSetup
	}

	idriverConn241 interface {
		driver.Conn
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
	}

	tdriverConn241 struct {
		r     idriverConn241
		setup *tracingSetup
	}

	idriverConn242 interface {
		driver.Conn
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn242 struct {
		r     idriverConn242
		setup *tracingSetup
	}

	idriverConn243 interface {
		driver.Conn
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn243 struct {
		r     idriverConn243
		setup *tracingSetup
	}

	idriverConn244 interface {
		driver.Conn
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn244 struct {
		r     idriverConn244
		setup *tracingSetup
	}

	idriverConn245 interface {
		driver.Conn
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn245 struct {
		r     idriverConn245
		setup *tracingSetup
	}

	idriverConn246 interface {
		driver.Conn
		driver.ExecerContext
		driver.NamedValueChecker
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn246 struct {
		r     idriverConn246
		setup *tracingSetup
	}

	idriverConn247 interface {
		driver.Conn
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn247 struct {
		r     idriverConn247
		setup *tracingSetup
	}

	idriverConn248 interface {
		driver.Conn
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn248 struct {
		r     idriverConn248
		setup *tracingSetup
	}

	idriverConn249 interface {
		driver.Conn
		driver.ExecerContext
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn249 struct {
		r     idriverConn249
		setup *tracingSetup
	}

	idriverConn250 interface {
		driver.Conn
		driver.ExecerContext
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn250 struct {
		r     idriverConn250
		setup *tracingSetup
	}

	idriverConn251 interface {
		driver.Conn
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn251 struct {
		r     idriverConn251
		setup *tracingSetup
	}

	idriverConn252 interface {
		driver.Conn
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn252 struct {
		r     idriverConn252
		setup *tracingSetup
	}

	idriverConn253 interface {
		driver.Conn
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn253 struct {
		r     idriverConn253
		setup *tracingSetup
	}

	idriverConn254 interface {
		driver.Conn
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn254 struct {
		r     idriverConn254
		setup *tracingSetup
	}

	idriverConn255 interface {
		driver.Conn
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn255 struct {
		r     idriverConn255
		setup *tracingSetup
	}

	idriverConn256 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
	}

	tdriverConn256 struct {
		r     idriverConn256
		setup *tracingSetup
	}

	idriverConn257 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Pinger
	}

	tdriverConn257 struct {
		r     idriverConn257
		setup *tracingSetup
	}

	idriverConn258 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Queryer
	}

	tdriverConn258 struct {
		r     idriverConn258
		setup *tracingSetup
	}

	idriverConn259 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.QueryerContext
	}

	tdriverConn259 struct {
		r     idriverConn259
		setup *tracingSetup
	}

	idriverConn260 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.SessionResetter
	}

	tdriverConn260 struct {
		r     idriverConn260
		setup *tracingSetup
	}

	idriverConn261 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
	}

	tdriverConn261 struct {
		r     idriverConn261
		setup *tracingSetup
	}

	idriverConn262 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Queryer
	}

	tdriverConn262 struct {
		r     idriverConn262
		setup *tracingSetup
	}

	idriverConn263 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.QueryerContext
	}

	tdriverConn263 struct {
		r     idriverConn263
		setup *tracingSetup
	}

	idriverConn264 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.SessionResetter
	}

	tdriverConn264 struct {
		r     idriverConn264
		setup *tracingSetup
	}

	idriverConn265 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.Pinger
		driver.Queryer
	}

	tdriverConn265 struct {
		r     idriverConn265
		setup *tracingSetup
	}

	idriverConn266 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn266 struct {
		r     idriverConn266
		setup *tracingSetup
	}

	idriverConn267 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn267 struct {
		r     idriverConn267
		setup *tracingSetup
	}

	idriverConn268 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn268 struct {
		r     idriverConn268
		setup *tracingSetup
	}

	idriverConn269 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn269 struct {
		r     idriverConn269
		setup *tracingSetup
	}

	idriverConn270 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn270 struct {
		r     idriverConn270
		setup *tracingSetup
	}

	idriverConn271 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
	}

	tdriverConn271 struct {
		r     idriverConn271
		setup *tracingSetup
	}

	idriverConn272 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
	}

	tdriverConn272 struct {
		r     idriverConn272
		setup *tracingSetup
	}

	idriverConn273 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.QueryerContext
	}

	tdriverConn273 struct {
		r     idriverConn273
		setup *tracingSetup
	}

	idriverConn274 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.SessionResetter
	}

	tdriverConn274 struct {
		r     idriverConn274
		setup *tracingSetup
	}

	idriverConn275 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
	}

	tdriverConn275 struct {
		r     idriverConn275
		setup *tracingSetup
	}

	idriverConn276 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn276 struct {
		r     idriverConn276
		setup *tracingSetup
	}

	idriverConn277 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn277 struct {
		r     idriverConn277
		setup *tracingSetup
	}

	idriverConn278 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn278 struct {
		r     idriverConn278
		setup *tracingSetup
	}

	idriverConn279 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn279 struct {
		r     idriverConn279
		setup *tracingSetup
	}

	idriverConn280 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn280 struct {
		r     idriverConn280
		setup *tracingSetup
	}

	idriverConn281 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
	}

	tdriverConn281 struct {
		r     idriverConn281
		setup *tracingSetup
	}

	idriverConn282 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn282 struct {
		r     idriverConn282
		setup *tracingSetup
	}

	idriverConn283 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn283 struct {
		r     idriverConn283
		setup *tracingSetup
	}

	idriverConn284 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn284 struct {
		r     idriverConn284
		setup *tracingSetup
	}

	idriverConn285 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn285 struct {
		r     idriverConn285
		setup *tracingSetup
	}

	idriverConn286 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn286 struct {
		r     idriverConn286
		setup *tracingSetup
	}

	idriverConn287 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn287 struct {
		r     idriverConn287
		setup *tracingSetup
	}

	idriverConn288 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn288 struct {
		r     idriverConn288
		setup *tracingSetup
	}

	idriverConn289 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn289 struct {
		r     idriverConn289
		setup *tracingSetup
	}

	idriverConn290 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn290 struct {
		r     idriverConn290
		setup *tracingSetup
	}

	idriverConn291 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
	}

	tdriverConn291 struct {
		r     idriverConn291
		setup *tracingSetup
	}

	idriverConn292 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
	}

	tdriverConn292 struct {
		r     idriverConn292
		setup *tracingSetup
	}

	idriverConn293 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.QueryerContext
	}

	tdriverConn293 struct {
		r     idriverConn293
		setup *tracingSetup
	}

	idriverConn294 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.SessionResetter
	}

	tdriverConn294 struct {
		r     idriverConn294
		setup *tracingSetup
	}

	idriverConn295 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
	}

	tdriverConn295 struct {
		r     idriverConn295
		setup *tracingSetup
	}

	idriverConn296 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn296 struct {
		r     idriverConn296
		setup *tracingSetup
	}

	idriverConn297 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn297 struct {
		r     idriverConn297
		setup *tracingSetup
	}

	idriverConn298 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn298 struct {
		r     idriverConn298
		setup *tracingSetup
	}

	idriverConn299 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn299 struct {
		r     idriverConn299
		setup *tracingSetup
	}

	idriverConn300 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn300 struct {
		r     idriverConn300
		setup *tracingSetup
	}

	idriverConn301 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
	}

	tdriverConn301 struct {
		r     idriverConn301
		setup *tracingSetup
	}

	idriverConn302 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn302 struct {
		r     idriverConn302
		setup *tracingSetup
	}

	idriverConn303 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn303 struct {
		r     idriverConn303
		setup *tracingSetup
	}

	idriverConn304 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn304 struct {
		r     idriverConn304
		setup *tracingSetup
	}

	idriverConn305 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.NamedValueChecker
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn305 struct {
		r     idriverConn305
		setup *tracingSetup
	}

	idriverConn306 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.NamedValueChecker
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn306 struct {
		r     idriverConn306
		setup *tracingSetup
	}

	idriverConn307 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn307 struct {
		r     idriverConn307
		setup *tracingSetup
	}

	idriverConn308 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn308 struct {
		r     idriverConn308
		setup *tracingSetup
	}

	idriverConn309 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn309 struct {
		r     idriverConn309
		setup *tracingSetup
	}

	idriverConn310 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn310 struct {
		r     idriverConn310
		setup *tracingSetup
	}

	idriverConn311 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
	}

	tdriverConn311 struct {
		r     idriverConn311
		setup *tracingSetup
	}

	idriverConn312 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn312 struct {
		r     idriverConn312
		setup *tracingSetup
	}

	idriverConn313 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn313 struct {
		r     idriverConn313
		setup *tracingSetup
	}

	idriverConn314 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn314 struct {
		r     idriverConn314
		setup *tracingSetup
	}

	idriverConn315 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn315 struct {
		r     idriverConn315
		setup *tracingSetup
	}

	idriverConn316 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.NamedValueChecker
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn316 struct {
		r     idriverConn316
		setup *tracingSetup
	}

	idriverConn317 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn317 struct {
		r     idriverConn317
		setup *tracingSetup
	}

	idriverConn318 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn318 struct {
		r     idriverConn318
		setup *tracingSetup
	}

	idriverConn319 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn319 struct {
		r     idriverConn319
		setup *tracingSetup
	}

	idriverConn320 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn320 struct {
		r     idriverConn320
		setup *tracingSetup
	}

	idriverConn321 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn321 struct {
		r     idriverConn321
		setup *tracingSetup
	}

	idriverConn322 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn322 struct {
		r     idriverConn322
		setup *tracingSetup
	}

	idriverConn323 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn323 struct {
		r     idriverConn323
		setup *tracingSetup
	}

	idriverConn324 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn324 struct {
		r     idriverConn324
		setup *tracingSetup
	}

	idriverConn325 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn325 struct {
		r     idriverConn325
		setup *tracingSetup
	}

	idriverConn326 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
	}

	tdriverConn326 struct {
		r     idriverConn326
		setup *tracingSetup
	}

	idriverConn327 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
	}

	tdriverConn327 struct {
		r     idriverConn327
		setup *tracingSetup
	}

	idriverConn328 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.QueryerContext
	}

	tdriverConn328 struct {
		r     idriverConn328
		setup *tracingSetup
	}

	idriverConn329 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.SessionResetter
	}

	tdriverConn329 struct {
		r     idriverConn329
		setup *tracingSetup
	}

	idriverConn330 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
	}

	tdriverConn330 struct {
		r     idriverConn330
		setup *tracingSetup
	}

	idriverConn331 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn331 struct {
		r     idriverConn331
		setup *tracingSetup
	}

	idriverConn332 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn332 struct {
		r     idriverConn332
		setup *tracingSetup
	}

	idriverConn333 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn333 struct {
		r     idriverConn333
		setup *tracingSetup
	}

	idriverConn334 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn334 struct {
		r     idriverConn334
		setup *tracingSetup
	}

	idriverConn335 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn335 struct {
		r     idriverConn335
		setup *tracingSetup
	}

	idriverConn336 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
	}

	tdriverConn336 struct {
		r     idriverConn336
		setup *tracingSetup
	}

	idriverConn337 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn337 struct {
		r     idriverConn337
		setup *tracingSetup
	}

	idriverConn338 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn338 struct {
		r     idriverConn338
		setup *tracingSetup
	}

	idriverConn339 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn339 struct {
		r     idriverConn339
		setup *tracingSetup
	}

	idriverConn340 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn340 struct {
		r     idriverConn340
		setup *tracingSetup
	}

	idriverConn341 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn341 struct {
		r     idriverConn341
		setup *tracingSetup
	}

	idriverConn342 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn342 struct {
		r     idriverConn342
		setup *tracingSetup
	}

	idriverConn343 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn343 struct {
		r     idriverConn343
		setup *tracingSetup
	}

	idriverConn344 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn344 struct {
		r     idriverConn344
		setup *tracingSetup
	}

	idriverConn345 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn345 struct {
		r     idriverConn345
		setup *tracingSetup
	}

	idriverConn346 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
	}

	tdriverConn346 struct {
		r     idriverConn346
		setup *tracingSetup
	}

	idriverConn347 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn347 struct {
		r     idriverConn347
		setup *tracingSetup
	}

	idriverConn348 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn348 struct {
		r     idriverConn348
		setup *tracingSetup
	}

	idriverConn349 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn349 struct {
		r     idriverConn349
		setup *tracingSetup
	}

	idriverConn350 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn350 struct {
		r     idriverConn350
		setup *tracingSetup
	}

	idriverConn351 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn351 struct {
		r     idriverConn351
		setup *tracingSetup
	}

	idriverConn352 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn352 struct {
		r     idriverConn352
		setup *tracingSetup
	}

	idriverConn353 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn353 struct {
		r     idriverConn353
		setup *tracingSetup
	}

	idriverConn354 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn354 struct {
		r     idriverConn354
		setup *tracingSetup
	}

	idriverConn355 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn355 struct {
		r     idriverConn355
		setup *tracingSetup
	}

	idriverConn356 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn356 struct {
		r     idriverConn356
		setup *tracingSetup
	}

	idriverConn357 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn357 struct {
		r     idriverConn357
		setup *tracingSetup
	}

	idriverConn358 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn358 struct {
		r     idriverConn358
		setup *tracingSetup
	}

	idriverConn359 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn359 struct {
		r     idriverConn359
		setup *tracingSetup
	}

	idriverConn360 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn360 struct {
		r     idriverConn360
		setup *tracingSetup
	}

	idriverConn361 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
	}

	tdriverConn361 struct {
		r     idriverConn361
		setup *tracingSetup
	}

	idriverConn362 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn362 struct {
		r     idriverConn362
		setup *tracingSetup
	}

	idriverConn363 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn363 struct {
		r     idriverConn363
		setup *tracingSetup
	}

	idriverConn364 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn364 struct {
		r     idriverConn364
		setup *tracingSetup
	}

	idriverConn365 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn365 struct {
		r     idriverConn365
		setup *tracingSetup
	}

	idriverConn366 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn366 struct {
		r     idriverConn366
		setup *tracingSetup
	}

	idriverConn367 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn367 struct {
		r     idriverConn367
		setup *tracingSetup
	}

	idriverConn368 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn368 struct {
		r     idriverConn368
		setup *tracingSetup
	}

	idriverConn369 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn369 struct {
		r     idriverConn369
		setup *tracingSetup
	}

	idriverConn370 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn370 struct {
		r     idriverConn370
		setup *tracingSetup
	}

	idriverConn371 interface {
		driver.Conn
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn371 struct {
		r     idriverConn371
		setup *tracingSetup
	}

	idriverConn372 interface {
		driver.Conn
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn372 struct {
		r     idriverConn372
		setup *tracingSetup
	}

	idriverConn373 interface {
		driver.Conn
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn373 struct {
		r     idriverConn373
		setup *tracingSetup
	}

	idriverConn374 interface {
		driver.Conn
		driver.Execer
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn374 struct {
		r     idriverConn374
		setup *tracingSetup
	}

	idriverConn375 interface {
		driver.Conn
		driver.Execer
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn375 struct {
		r     idriverConn375
		setup *tracingSetup
	}

	idriverConn376 interface {
		driver.Conn
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn376 struct {
		r     idriverConn376
		setup *tracingSetup
	}

	idriverConn377 interface {
		driver.Conn
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn377 struct {
		r     idriverConn377
		setup *tracingSetup
	}

	idriverConn378 interface {
		driver.Conn
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn378 struct {
		r     idriverConn378
		setup *tracingSetup
	}

	idriverConn379 interface {
		driver.Conn
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn379 struct {
		r     idriverConn379
		setup *tracingSetup
	}

	idriverConn380 interface {
		driver.Conn
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn380 struct {
		r     idriverConn380
		setup *tracingSetup
	}

	idriverConn381 interface {
		driver.Conn
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn381 struct {
		r     idriverConn381
		setup *tracingSetup
	}

	idriverConn382 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
	}

	tdriverConn382 struct {
		r     idriverConn382
		setup *tracingSetup
	}

	idriverConn383 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
	}

	tdriverConn383 struct {
		r     idriverConn383
		setup *tracingSetup
	}

	idriverConn384 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.QueryerContext
	}

	tdriverConn384 struct {
		r     idriverConn384
		setup *tracingSetup
	}

	idriverConn385 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.SessionResetter
	}

	tdriverConn385 struct {
		r     idriverConn385
		setup *tracingSetup
	}

	idriverConn386 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
	}

	tdriverConn386 struct {
		r     idriverConn386
		setup *tracingSetup
	}

	idriverConn387 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn387 struct {
		r     idriverConn387
		setup *tracingSetup
	}

	idriverConn388 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn388 struct {
		r     idriverConn388
		setup *tracingSetup
	}

	idriverConn389 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn389 struct {
		r     idriverConn389
		setup *tracingSetup
	}

	idriverConn390 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn390 struct {
		r     idriverConn390
		setup *tracingSetup
	}

	idriverConn391 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn391 struct {
		r     idriverConn391
		setup *tracingSetup
	}

	idriverConn392 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
	}

	tdriverConn392 struct {
		r     idriverConn392
		setup *tracingSetup
	}

	idriverConn393 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn393 struct {
		r     idriverConn393
		setup *tracingSetup
	}

	idriverConn394 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn394 struct {
		r     idriverConn394
		setup *tracingSetup
	}

	idriverConn395 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn395 struct {
		r     idriverConn395
		setup *tracingSetup
	}

	idriverConn396 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn396 struct {
		r     idriverConn396
		setup *tracingSetup
	}

	idriverConn397 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn397 struct {
		r     idriverConn397
		setup *tracingSetup
	}

	idriverConn398 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn398 struct {
		r     idriverConn398
		setup *tracingSetup
	}

	idriverConn399 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn399 struct {
		r     idriverConn399
		setup *tracingSetup
	}

	idriverConn400 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn400 struct {
		r     idriverConn400
		setup *tracingSetup
	}

	idriverConn401 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn401 struct {
		r     idriverConn401
		setup *tracingSetup
	}

	idriverConn402 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
	}

	tdriverConn402 struct {
		r     idriverConn402
		setup *tracingSetup
	}

	idriverConn403 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn403 struct {
		r     idriverConn403
		setup *tracingSetup
	}

	idriverConn404 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn404 struct {
		r     idriverConn404
		setup *tracingSetup
	}

	idriverConn405 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn405 struct {
		r     idriverConn405
		setup *tracingSetup
	}

	idriverConn406 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn406 struct {
		r     idriverConn406
		setup *tracingSetup
	}

	idriverConn407 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn407 struct {
		r     idriverConn407
		setup *tracingSetup
	}

	idriverConn408 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn408 struct {
		r     idriverConn408
		setup *tracingSetup
	}

	idriverConn409 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn409 struct {
		r     idriverConn409
		setup *tracingSetup
	}

	idriverConn410 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn410 struct {
		r     idriverConn410
		setup *tracingSetup
	}

	idriverConn411 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn411 struct {
		r     idriverConn411
		setup *tracingSetup
	}

	idriverConn412 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn412 struct {
		r     idriverConn412
		setup *tracingSetup
	}

	idriverConn413 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn413 struct {
		r     idriverConn413
		setup *tracingSetup
	}

	idriverConn414 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn414 struct {
		r     idriverConn414
		setup *tracingSetup
	}

	idriverConn415 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn415 struct {
		r     idriverConn415
		setup *tracingSetup
	}

	idriverConn416 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn416 struct {
		r     idriverConn416
		setup *tracingSetup
	}

	idriverConn417 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
	}

	tdriverConn417 struct {
		r     idriverConn417
		setup *tracingSetup
	}

	idriverConn418 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn418 struct {
		r     idriverConn418
		setup *tracingSetup
	}

	idriverConn419 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn419 struct {
		r     idriverConn419
		setup *tracingSetup
	}

	idriverConn420 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn420 struct {
		r     idriverConn420
		setup *tracingSetup
	}

	idriverConn421 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn421 struct {
		r     idriverConn421
		setup *tracingSetup
	}

	idriverConn422 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn422 struct {
		r     idriverConn422
		setup *tracingSetup
	}

	idriverConn423 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn423 struct {
		r     idriverConn423
		setup *tracingSetup
	}

	idriverConn424 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn424 struct {
		r     idriverConn424
		setup *tracingSetup
	}

	idriverConn425 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn425 struct {
		r     idriverConn425
		setup *tracingSetup
	}

	idriverConn426 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn426 struct {
		r     idriverConn426
		setup *tracingSetup
	}

	idriverConn427 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn427 struct {
		r     idriverConn427
		setup *tracingSetup
	}

	idriverConn428 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn428 struct {
		r     idriverConn428
		setup *tracingSetup
	}

	idriverConn429 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn429 struct {
		r     idriverConn429
		setup *tracingSetup
	}

	idriverConn430 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn430 struct {
		r     idriverConn430
		setup *tracingSetup
	}

	idriverConn431 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn431 struct {
		r     idriverConn431
		setup *tracingSetup
	}

	idriverConn432 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn432 struct {
		r     idriverConn432
		setup *tracingSetup
	}

	idriverConn433 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn433 struct {
		r     idriverConn433
		setup *tracingSetup
	}

	idriverConn434 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn434 struct {
		r     idriverConn434
		setup *tracingSetup
	}

	idriverConn435 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn435 struct {
		r     idriverConn435
		setup *tracingSetup
	}

	idriverConn436 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn436 struct {
		r     idriverConn436
		setup *tracingSetup
	}

	idriverConn437 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn437 struct {
		r     idriverConn437
		setup *tracingSetup
	}

	idriverConn438 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
	}

	tdriverConn438 struct {
		r     idriverConn438
		setup *tracingSetup
	}

	idriverConn439 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn439 struct {
		r     idriverConn439
		setup *tracingSetup
	}

	idriverConn440 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn440 struct {
		r     idriverConn440
		setup *tracingSetup
	}

	idriverConn441 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn441 struct {
		r     idriverConn441
		setup *tracingSetup
	}

	idriverConn442 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn442 struct {
		r     idriverConn442
		setup *tracingSetup
	}

	idriverConn443 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn443 struct {
		r     idriverConn443
		setup *tracingSetup
	}

	idriverConn444 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn444 struct {
		r     idriverConn444
		setup *tracingSetup
	}

	idriverConn445 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn445 struct {
		r     idriverConn445
		setup *tracingSetup
	}

	idriverConn446 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn446 struct {
		r     idriverConn446
		setup *tracingSetup
	}

	idriverConn447 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn447 struct {
		r     idriverConn447
		setup *tracingSetup
	}

	idriverConn448 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn448 struct {
		r     idriverConn448
		setup *tracingSetup
	}

	idriverConn449 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn449 struct {
		r     idriverConn449
		setup *tracingSetup
	}

	idriverConn450 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn450 struct {
		r     idriverConn450
		setup *tracingSetup
	}

	idriverConn451 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn451 struct {
		r     idriverConn451
		setup *tracingSetup
	}

	idriverConn452 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn452 struct {
		r     idriverConn452
		setup *tracingSetup
	}

	idriverConn453 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn453 struct {
		r     idriverConn453
		setup *tracingSetup
	}

	idriverConn454 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn454 struct {
		r     idriverConn454
		setup *tracingSetup
	}

	idriverConn455 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn455 struct {
		r     idriverConn455
		setup *tracingSetup
	}

	idriverConn456 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn456 struct {
		r     idriverConn456
		setup *tracingSetup
	}

	idriverConn457 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn457 struct {
		r     idriverConn457
		setup *tracingSetup
	}

	idriverConn458 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn458 struct {
		r     idriverConn458
		setup *tracingSetup
	}

	idriverConn459 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn459 struct {
		r     idriverConn459
		setup *tracingSetup
	}

	idriverConn460 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn460 struct {
		r     idriverConn460
		setup *tracingSetup
	}

	idriverConn461 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn461 struct {
		r     idriverConn461
		setup *tracingSetup
	}

	idriverConn462 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn462 struct {
		r     idriverConn462
		setup *tracingSetup
	}

	idriverConn463 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn463 struct {
		r     idriverConn463
		setup *tracingSetup
	}

	idriverConn464 interface {
		driver.Conn
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn464 struct {
		r     idriverConn464
		setup *tracingSetup
	}

	idriverConn465 interface {
		driver.Conn
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn465 struct {
		r     idriverConn465
		setup *tracingSetup
	}

	idriverConn466 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
	}

	tdriverConn466 struct {
		r     idriverConn466
		setup *tracingSetup
	}

	idriverConn467 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
	}

	tdriverConn467 struct {
		r     idriverConn467
		setup *tracingSetup
	}

	idriverConn468 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.SessionResetter
	}

	tdriverConn468 struct {
		r     idriverConn468
		setup *tracingSetup
	}

	idriverConn469 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn469 struct {
		r     idriverConn469
		setup *tracingSetup
	}

	idriverConn470 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn470 struct {
		r     idriverConn470
		setup *tracingSetup
	}

	idriverConn471 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn471 struct {
		r     idriverConn471
		setup *tracingSetup
	}

	idriverConn472 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn472 struct {
		r     idriverConn472
		setup *tracingSetup
	}

	idriverConn473 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn473 struct {
		r     idriverConn473
		setup *tracingSetup
	}

	idriverConn474 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn474 struct {
		r     idriverConn474
		setup *tracingSetup
	}

	idriverConn475 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn475 struct {
		r     idriverConn475
		setup *tracingSetup
	}

	idriverConn476 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn476 struct {
		r     idriverConn476
		setup *tracingSetup
	}

	idriverConn477 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn477 struct {
		r     idriverConn477
		setup *tracingSetup
	}

	idriverConn478 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn478 struct {
		r     idriverConn478
		setup *tracingSetup
	}

	idriverConn479 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn479 struct {
		r     idriverConn479
		setup *tracingSetup
	}

	idriverConn480 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn480 struct {
		r     idriverConn480
		setup *tracingSetup
	}

	idriverConn481 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn481 struct {
		r     idriverConn481
		setup *tracingSetup
	}

	idriverConn482 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn482 struct {
		r     idriverConn482
		setup *tracingSetup
	}

	idriverConn483 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn483 struct {
		r     idriverConn483
		setup *tracingSetup
	}

	idriverConn484 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn484 struct {
		r     idriverConn484
		setup *tracingSetup
	}

	idriverConn485 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn485 struct {
		r     idriverConn485
		setup *tracingSetup
	}

	idriverConn486 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn486 struct {
		r     idriverConn486
		setup *tracingSetup
	}

	idriverConn487 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn487 struct {
		r     idriverConn487
		setup *tracingSetup
	}

	idriverConn488 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn488 struct {
		r     idriverConn488
		setup *tracingSetup
	}

	idriverConn489 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn489 struct {
		r     idriverConn489
		setup *tracingSetup
	}

	idriverConn490 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn490 struct {
		r     idriverConn490
		setup *tracingSetup
	}

	idriverConn491 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn491 struct {
		r     idriverConn491
		setup *tracingSetup
	}

	idriverConn492 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn492 struct {
		r     idriverConn492
		setup *tracingSetup
	}

	idriverConn493 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn493 struct {
		r     idriverConn493
		setup *tracingSetup
	}

	idriverConn494 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn494 struct {
		r     idriverConn494
		setup *tracingSetup
	}

	idriverConn495 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn495 struct {
		r     idriverConn495
		setup *tracingSetup
	}

	idriverConn496 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn496 struct {
		r     idriverConn496
		setup *tracingSetup
	}

	idriverConn497 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn497 struct {
		r     idriverConn497
		setup *tracingSetup
	}

	idriverConn498 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn498 struct {
		r     idriverConn498
		setup *tracingSetup
	}

	idriverConn499 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn499 struct {
		r     idriverConn499
		setup *tracingSetup
	}

	idriverConn500 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn500 struct {
		r     idriverConn500
		setup *tracingSetup
	}

	idriverConn501 interface {
		driver.Conn
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn501 struct {
		r     idriverConn501
		setup *tracingSetup
	}

	idriverConn502 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
	}

	tdriverConn502 struct {
		r     idriverConn502
		setup *tracingSetup
	}

	idriverConn503 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.SessionResetter
	}

	tdriverConn503 struct {
		r     idriverConn503
		setup *tracingSetup
	}

	idriverConn504 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn504 struct {
		r     idriverConn504
		setup *tracingSetup
	}

	idriverConn505 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn505 struct {
		r     idriverConn505
		setup *tracingSetup
	}

	idriverConn506 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn506 struct {
		r     idriverConn506
		setup *tracingSetup
	}

	idriverConn507 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn507 struct {
		r     idriverConn507
		setup *tracingSetup
	}

	idriverConn508 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn508 struct {
		r     idriverConn508
		setup *tracingSetup
	}

	idriverConn509 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn509 struct {
		r     idriverConn509
		setup *tracingSetup
	}

	idriverConn510 interface {
		driver.Conn
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn510 struct {
		r     idriverConn510
		setup *tracingSetup
	}

	idriverConn511 interface {
		driver.Conn
		driver.ConnBeginTx
		driver.ConnPrepareContext
		driver.Execer
		driver.ExecerContext
		driver.NamedValueChecker
		driver.Pinger
		driver.Queryer
		driver.QueryerContext
		driver.SessionResetter
	}

	tdriverConn511 struct {
		r     idriverConn511
		setup *tracingSetup
	}
)

var (
	_ driver.Conn               = &tdriverConn0{}
	_ driver.Conn               = &tdriverConn1{}
	_ driver.ConnBeginTx        = &tdriverConn1{}
	_ driver.Conn               = &tdriverConn2{}
	_ driver.ConnPrepareContext = &tdriverConn2{}
	_ driver.Conn               = &tdriverConn3{}
	_ driver.Execer             = &tdriverConn3{}
	_ driver.Conn               = &tdriverConn4{}
	_ driver.ExecerContext      = &tdriverConn4{}
	_ driver.Conn               = &tdriverConn5{}
	_ driver.NamedValueChecker  = &tdriverConn5{}
	_ driver.Conn               = &tdriverConn6{}
	_ driver.Pinger             = &tdriverConn6{}
	_ driver.Conn               = &tdriverConn7{}
	_ driver.Queryer            = &tdriverConn7{}
	_ driver.Conn               = &tdriverConn8{}
	_ driver.QueryerContext     = &tdriverConn8{}
	_ driver.Conn               = &tdriverConn9{}
	_ driver.SessionResetter    = &tdriverConn9{}
	_ driver.Conn               = &tdriverConn10{}
	_ driver.ConnBeginTx        = &tdriverConn10{}
	_ driver.ConnPrepareContext = &tdriverConn10{}
	_ driver.Conn               = &tdriverConn11{}
	_ driver.ConnBeginTx        = &tdriverConn11{}
	_ driver.Execer             = &tdriverConn11{}
	_ driver.Conn               = &tdriverConn12{}
	_ driver.ConnBeginTx        = &tdriverConn12{}
	_ driver.ExecerContext      = &tdriverConn12{}
	_ driver.Conn               = &tdriverConn13{}
	_ driver.ConnBeginTx        = &tdriverConn13{}
	_ driver.NamedValueChecker  = &tdriverConn13{}
	_ driver.Conn               = &tdriverConn14{}
	_ driver.ConnBeginTx        = &tdriverConn14{}
	_ driver.Pinger             = &tdriverConn14{}
	_ driver.Conn               = &tdriverConn15{}
	_ driver.ConnBeginTx        = &tdriverConn15{}
	_ driver.Queryer            = &tdriverConn15{}
	_ driver.Conn               = &tdriverConn16{}
	_ driver.ConnBeginTx        = &tdriverConn16{}
	_ driver.QueryerContext     = &tdriverConn16{}
	_ driver.Conn               = &tdriverConn17{}
	_ driver.ConnBeginTx        = &tdriverConn17{}
	_ driver.SessionResetter    = &tdriverConn17{}
	_ driver.Conn               = &tdriverConn18{}
	_ driver.ConnPrepareContext = &tdriverConn18{}
	_ driver.Execer             = &tdriverConn18{}
	_ driver.Conn               = &tdriverConn19{}
	_ driver.ConnPrepareContext = &tdriverConn19{}
	_ driver.ExecerContext      = &tdriverConn19{}
	_ driver.Conn               = &tdriverConn20{}
	_ driver.ConnPrepareContext = &tdriverConn20{}
	_ driver.NamedValueChecker  = &tdriverConn20{}
	_ driver.Conn               = &tdriverConn21{}
	_ driver.ConnPrepareContext = &tdriverConn21{}
	_ driver.Pinger             = &tdriverConn21{}
	_ driver.Conn               = &tdriverConn22{}
	_ driver.ConnPrepareContext = &tdriverConn22{}
	_ driver.Queryer            = &tdriverConn22{}
	_ driver.Conn               = &tdriverConn23{}
	_ driver.ConnPrepareContext = &tdriverConn23{}
	_ driver.QueryerContext     = &tdriverConn23{}
	_ driver.Conn               = &tdriverConn24{}
	_ driver.ConnPrepareContext = &tdriverConn24{}
	_ driver.SessionResetter    = &tdriverConn24{}
	_ driver.Conn               = &tdriverConn25{}
	_ driver.Execer             = &tdriverConn25{}
	_ driver.ExecerContext      = &tdriverConn25{}
	_ driver.Conn               = &tdriverConn26{}
	_ driver.Execer             = &tdriverConn26{}
	_ driver.NamedValueChecker  = &tdriverConn26{}
	_ driver.Conn               = &tdriverConn27{}
	_ driver.Execer             = &tdriverConn27{}
	_ driver.Pinger             = &tdriverConn27{}
	_ driver.Conn               = &tdriverConn28{}
	_ driver.Execer             = &tdriverConn28{}
	_ driver.Queryer            = &tdriverConn28{}
	_ driver.Conn               = &tdriverConn29{}
	_ driver.Execer             = &tdriverConn29{}
	_ driver.QueryerContext     = &tdriverConn29{}
	_ driver.Conn               = &tdriverConn30{}
	_ driver.Execer             = &tdriverConn30{}
	_ driver.SessionResetter    = &tdriverConn30{}
	_ driver.Conn               = &tdriverConn31{}
	_ driver.ExecerContext      = &tdriverConn31{}
	_ driver.NamedValueChecker  = &tdriverConn31{}
	_ driver.Conn               = &tdriverConn32{}
	_ driver.ExecerContext      = &tdriverConn32{}
	_ driver.Pinger             = &tdriverConn32{}
	_ driver.Conn               = &tdriverConn33{}
	_ driver.ExecerContext      = &tdriverConn33{}
	_ driver.Queryer            = &tdriverConn33{}
	_ driver.Conn               = &tdriverConn34{}
	_ driver.ExecerContext      = &tdriverConn34{}
	_ driver.QueryerContext     = &tdriverConn34{}
	_ driver.Conn               = &tdriverConn35{}
	_ driver.ExecerContext      = &tdriverConn35{}
	_ driver.SessionResetter    = &tdriverConn35{}
	_ driver.Conn               = &tdriverConn36{}
	_ driver.NamedValueChecker  = &tdriverConn36{}
	_ driver.Pinger             = &tdriverConn36{}
	_ driver.Conn               = &tdriverConn37{}
	_ driver.NamedValueChecker  = &tdriverConn37{}
	_ driver.Queryer            = &tdriverConn37{}
	_ driver.Conn               = &tdriverConn38{}
	_ driver.NamedValueChecker  = &tdriverConn38{}
	_ driver.QueryerContext     = &tdriverConn38{}
	_ driver.Conn               = &tdriverConn39{}
	_ driver.NamedValueChecker  = &tdriverConn39{}
	_ driver.SessionResetter    = &tdriverConn39{}
	_ driver.Conn               = &tdriverConn40{}
	_ driver.Pinger             = &tdriverConn40{}
	_ driver.Queryer            = &tdriverConn40{}
	_ driver.Conn               = &tdriverConn41{}
	_ driver.Pinger             = &tdriverConn41{}
	_ driver.QueryerContext     = &tdriverConn41{}
	_ driver.Conn               = &tdriverConn42{}
	_ driver.Pinger             = &tdriverConn42{}
	_ driver.SessionResetter    = &tdriverConn42{}
	_ driver.Conn               = &tdriverConn43{}
	_ driver.Queryer            = &tdriverConn43{}
	_ driver.QueryerContext     = &tdriverConn43{}
	_ driver.Conn               = &tdriverConn44{}
	_ driver.Queryer            = &tdriverConn44{}
	_ driver.SessionResetter    = &tdriverConn44{}
	_ driver.Conn               = &tdriverConn45{}
	_ driver.QueryerContext     = &tdriverConn45{}
	_ driver.SessionResetter    = &tdriverConn45{}
	_ driver.Conn               = &tdriverConn46{}
	_ driver.ConnBeginTx        = &tdriverConn46{}
	_ driver.ConnPrepareContext = &tdriverConn46{}
	_ driver.Execer             = &tdriverConn46{}
	_ driver.Conn               = &tdriverConn47{}
	_ driver.ConnBeginTx        = &tdriverConn47{}
	_ driver.ConnPrepareContext = &tdriverConn47{}
	_ driver.ExecerContext      = &tdriverConn47{}
	_ driver.Conn               = &tdriverConn48{}
	_ driver.ConnBeginTx        = &tdriverConn48{}
	_ driver.ConnPrepareContext = &tdriverConn48{}
	_ driver.NamedValueChecker  = &tdriverConn48{}
	_ driver.Conn               = &tdriverConn49{}
	_ driver.ConnBeginTx        = &tdriverConn49{}
	_ driver.ConnPrepareContext = &tdriverConn49{}
	_ driver.Pinger             = &tdriverConn49{}
	_ driver.Conn               = &tdriverConn50{}
	_ driver.ConnBeginTx        = &tdriverConn50{}
	_ driver.ConnPrepareContext = &tdriverConn50{}
	_ driver.Queryer            = &tdriverConn50{}
	_ driver.Conn               = &tdriverConn51{}
	_ driver.ConnBeginTx        = &tdriverConn51{}
	_ driver.ConnPrepareContext = &tdriverConn51{}
	_ driver.QueryerContext     = &tdriverConn51{}
	_ driver.Conn               = &tdriverConn52{}
	_ driver.ConnBeginTx        = &tdriverConn52{}
	_ driver.ConnPrepareContext = &tdriverConn52{}
	_ driver.SessionResetter    = &tdriverConn52{}
	_ driver.Conn               = &tdriverConn53{}
	_ driver.ConnBeginTx        = &tdriverConn53{}
	_ driver.Execer             = &tdriverConn53{}
	_ driver.ExecerContext      = &tdriverConn53{}
	_ driver.Conn               = &tdriverConn54{}
	_ driver.ConnBeginTx        = &tdriverConn54{}
	_ driver.Execer             = &tdriverConn54{}
	_ driver.NamedValueChecker  = &tdriverConn54{}
	_ driver.Conn               = &tdriverConn55{}
	_ driver.ConnBeginTx        = &tdriverConn55{}
	_ driver.Execer             = &tdriverConn55{}
	_ driver.Pinger             = &tdriverConn55{}
	_ driver.Conn               = &tdriverConn56{}
	_ driver.ConnBeginTx        = &tdriverConn56{}
	_ driver.Execer             = &tdriverConn56{}
	_ driver.Queryer            = &tdriverConn56{}
	_ driver.Conn               = &tdriverConn57{}
	_ driver.ConnBeginTx        = &tdriverConn57{}
	_ driver.Execer             = &tdriverConn57{}
	_ driver.QueryerContext     = &tdriverConn57{}
	_ driver.Conn               = &tdriverConn58{}
	_ driver.ConnBeginTx        = &tdriverConn58{}
	_ driver.Execer             = &tdriverConn58{}
	_ driver.SessionResetter    = &tdriverConn58{}
	_ driver.Conn               = &tdriverConn59{}
	_ driver.ConnBeginTx        = &tdriverConn59{}
	_ driver.ExecerContext      = &tdriverConn59{}
	_ driver.NamedValueChecker  = &tdriverConn59{}
	_ driver.Conn               = &tdriverConn60{}
	_ driver.ConnBeginTx        = &tdriverConn60{}
	_ driver.ExecerContext      = &tdriverConn60{}
	_ driver.Pinger             = &tdriverConn60{}
	_ driver.Conn               = &tdriverConn61{}
	_ driver.ConnBeginTx        = &tdriverConn61{}
	_ driver.ExecerContext      = &tdriverConn61{}
	_ driver.Queryer            = &tdriverConn61{}
	_ driver.Conn               = &tdriverConn62{}
	_ driver.ConnBeginTx        = &tdriverConn62{}
	_ driver.ExecerContext      = &tdriverConn62{}
	_ driver.QueryerContext     = &tdriverConn62{}
	_ driver.Conn               = &tdriverConn63{}
	_ driver.ConnBeginTx        = &tdriverConn63{}
	_ driver.ExecerContext      = &tdriverConn63{}
	_ driver.SessionResetter    = &tdriverConn63{}
	_ driver.Conn               = &tdriverConn64{}
	_ driver.ConnBeginTx        = &tdriverConn64{}
	_ driver.NamedValueChecker  = &tdriverConn64{}
	_ driver.Pinger             = &tdriverConn64{}
	_ driver.Conn               = &tdriverConn65{}
	_ driver.ConnBeginTx        = &tdriverConn65{}
	_ driver.NamedValueChecker  = &tdriverConn65{}
	_ driver.Queryer            = &tdriverConn65{}
	_ driver.Conn               = &tdriverConn66{}
	_ driver.ConnBeginTx        = &tdriverConn66{}
	_ driver.NamedValueChecker  = &tdriverConn66{}
	_ driver.QueryerContext     = &tdriverConn66{}
	_ driver.Conn               = &tdriverConn67{}
	_ driver.ConnBeginTx        = &tdriverConn67{}
	_ driver.NamedValueChecker  = &tdriverConn67{}
	_ driver.SessionResetter    = &tdriverConn67{}
	_ driver.Conn               = &tdriverConn68{}
	_ driver.ConnBeginTx        = &tdriverConn68{}
	_ driver.Pinger             = &tdriverConn68{}
	_ driver.Queryer            = &tdriverConn68{}
	_ driver.Conn               = &tdriverConn69{}
	_ driver.ConnBeginTx        = &tdriverConn69{}
	_ driver.Pinger             = &tdriverConn69{}
	_ driver.QueryerContext     = &tdriverConn69{}
	_ driver.Conn               = &tdriverConn70{}
	_ driver.ConnBeginTx        = &tdriverConn70{}
	_ driver.Pinger             = &tdriverConn70{}
	_ driver.SessionResetter    = &tdriverConn70{}
	_ driver.Conn               = &tdriverConn71{}
	_ driver.ConnBeginTx        = &tdriverConn71{}
	_ driver.Queryer            = &tdriverConn71{}
	_ driver.QueryerContext     = &tdriverConn71{}
	_ driver.Conn               = &tdriverConn72{}
	_ driver.ConnBeginTx        = &tdriverConn72{}
	_ driver.Queryer            = &tdriverConn72{}
	_ driver.SessionResetter    = &tdriverConn72{}
	_ driver.Conn               = &tdriverConn73{}
	_ driver.ConnBeginTx        = &tdriverConn73{}
	_ driver.QueryerContext     = &tdriverConn73{}
	_ driver.SessionResetter    = &tdriverConn73{}
	_ driver.Conn               = &tdriverConn74{}
	_ driver.ConnPrepareContext = &tdriverConn74{}
	_ driver.Execer             = &tdriverConn74{}
	_ driver.ExecerContext      = &tdriverConn74{}
	_ driver.Conn               = &tdriverConn75{}
	_ driver.ConnPrepareContext = &tdriverConn75{}
	_ driver.Execer             = &tdriverConn75{}
	_ driver.NamedValueChecker  = &tdriverConn75{}
	_ driver.Conn               = &tdriverConn76{}
	_ driver.ConnPrepareContext = &tdriverConn76{}
	_ driver.Execer             = &tdriverConn76{}
	_ driver.Pinger             = &tdriverConn76{}
	_ driver.Conn               = &tdriverConn77{}
	_ driver.ConnPrepareContext = &tdriverConn77{}
	_ driver.Execer             = &tdriverConn77{}
	_ driver.Queryer            = &tdriverConn77{}
	_ driver.Conn               = &tdriverConn78{}
	_ driver.ConnPrepareContext = &tdriverConn78{}
	_ driver.Execer             = &tdriverConn78{}
	_ driver.QueryerContext     = &tdriverConn78{}
	_ driver.Conn               = &tdriverConn79{}
	_ driver.ConnPrepareContext = &tdriverConn79{}
	_ driver.Execer             = &tdriverConn79{}
	_ driver.SessionResetter    = &tdriverConn79{}
	_ driver.Conn               = &tdriverConn80{}
	_ driver.ConnPrepareContext = &tdriverConn80{}
	_ driver.ExecerContext      = &tdriverConn80{}
	_ driver.NamedValueChecker  = &tdriverConn80{}
	_ driver.Conn               = &tdriverConn81{}
	_ driver.ConnPrepareContext = &tdriverConn81{}
	_ driver.ExecerContext      = &tdriverConn81{}
	_ driver.Pinger             = &tdriverConn81{}
	_ driver.Conn               = &tdriverConn82{}
	_ driver.ConnPrepareContext = &tdriverConn82{}
	_ driver.ExecerContext      = &tdriverConn82{}
	_ driver.Queryer            = &tdriverConn82{}
	_ driver.Conn               = &tdriverConn83{}
	_ driver.ConnPrepareContext = &tdriverConn83{}
	_ driver.ExecerContext      = &tdriverConn83{}
	_ driver.QueryerContext     = &tdriverConn83{}
	_ driver.Conn               = &tdriverConn84{}
	_ driver.ConnPrepareContext = &tdriverConn84{}
	_ driver.ExecerContext      = &tdriverConn84{}
	_ driver.SessionResetter    = &tdriverConn84{}
	_ driver.Conn               = &tdriverConn85{}
	_ driver.ConnPrepareContext = &tdriverConn85{}
	_ driver.NamedValueChecker  = &tdriverConn85{}
	_ driver.Pinger             = &tdriverConn85{}
	_ driver.Conn               = &tdriverConn86{}
	_ driver.ConnPrepareContext = &tdriverConn86{}
	_ driver.NamedValueChecker  = &tdriverConn86{}
	_ driver.Queryer            = &tdriverConn86{}
	_ driver.Conn               = &tdriverConn87{}
	_ driver.ConnPrepareContext = &tdriverConn87{}
	_ driver.NamedValueChecker  = &tdriverConn87{}
	_ driver.QueryerContext     = &tdriverConn87{}
	_ driver.Conn               = &tdriverConn88{}
	_ driver.ConnPrepareContext = &tdriverConn88{}
	_ driver.NamedValueChecker  = &tdriverConn88{}
	_ driver.SessionResetter    = &tdriverConn88{}
	_ driver.Conn               = &tdriverConn89{}
	_ driver.ConnPrepareContext = &tdriverConn89{}
	_ driver.Pinger             = &tdriverConn89{}
	_ driver.Queryer            = &tdriverConn89{}
	_ driver.Conn               = &tdriverConn90{}
	_ driver.ConnPrepareContext = &tdriverConn90{}
	_ driver.Pinger             = &tdriverConn90{}
	_ driver.QueryerContext     = &tdriverConn90{}
	_ driver.Conn               = &tdriverConn91{}
	_ driver.ConnPrepareContext = &tdriverConn91{}
	_ driver.Pinger             = &tdriverConn91{}
	_ driver.SessionResetter    = &tdriverConn91{}
	_ driver.Conn               = &tdriverConn92{}
	_ driver.ConnPrepareContext = &tdriverConn92{}
	_ driver.Queryer            = &tdriverConn92{}
	_ driver.QueryerContext     = &tdriverConn92{}
	_ driver.Conn               = &tdriverConn93{}
	_ driver.ConnPrepareContext = &tdriverConn93{}
	_ driver.Queryer            = &tdriverConn93{}
	_ driver.SessionResetter    = &tdriverConn93{}
	_ driver.Conn               = &tdriverConn94{}
	_ driver.ConnPrepareContext = &tdriverConn94{}
	_ driver.QueryerContext     = &tdriverConn94{}
	_ driver.SessionResetter    = &tdriverConn94{}
	_ driver.Conn               = &tdriverConn95{}
	_ driver.Execer             = &tdriverConn95{}
	_ driver.ExecerContext      = &tdriverConn95{}
	_ driver.NamedValueChecker  = &tdriverConn95{}
	_ driver.Conn               = &tdriverConn96{}
	_ driver.Execer             = &tdriverConn96{}
	_ driver.ExecerContext      = &tdriverConn96{}
	_ driver.Pinger             = &tdriverConn96{}
	_ driver.Conn               = &tdriverConn97{}
	_ driver.Execer             = &tdriverConn97{}
	_ driver.ExecerContext      = &tdriverConn97{}
	_ driver.Queryer            = &tdriverConn97{}
	_ driver.Conn               = &tdriverConn98{}
	_ driver.Execer             = &tdriverConn98{}
	_ driver.ExecerContext      = &tdriverConn98{}
	_ driver.QueryerContext     = &tdriverConn98{}
	_ driver.Conn               = &tdriverConn99{}
	_ driver.Execer             = &tdriverConn99{}
	_ driver.ExecerContext      = &tdriverConn99{}
	_ driver.SessionResetter    = &tdriverConn99{}
	_ driver.Conn               = &tdriverConn100{}
	_ driver.Execer             = &tdriverConn100{}
	_ driver.NamedValueChecker  = &tdriverConn100{}
	_ driver.Pinger             = &tdriverConn100{}
	_ driver.Conn               = &tdriverConn101{}
	_ driver.Execer             = &tdriverConn101{}
	_ driver.NamedValueChecker  = &tdriverConn101{}
	_ driver.Queryer            = &tdriverConn101{}
	_ driver.Conn               = &tdriverConn102{}
	_ driver.Execer             = &tdriverConn102{}
	_ driver.NamedValueChecker  = &tdriverConn102{}
	_ driver.QueryerContext     = &tdriverConn102{}
	_ driver.Conn               = &tdriverConn103{}
	_ driver.Execer             = &tdriverConn103{}
	_ driver.NamedValueChecker  = &tdriverConn103{}
	_ driver.SessionResetter    = &tdriverConn103{}
	_ driver.Conn               = &tdriverConn104{}
	_ driver.Execer             = &tdriverConn104{}
	_ driver.Pinger             = &tdriverConn104{}
	_ driver.Queryer            = &tdriverConn104{}
	_ driver.Conn               = &tdriverConn105{}
	_ driver.Execer             = &tdriverConn105{}
	_ driver.Pinger             = &tdriverConn105{}
	_ driver.QueryerContext     = &tdriverConn105{}
	_ driver.Conn               = &tdriverConn106{}
	_ driver.Execer             = &tdriverConn106{}
	_ driver.Pinger             = &tdriverConn106{}
	_ driver.SessionResetter    = &tdriverConn106{}
	_ driver.Conn               = &tdriverConn107{}
	_ driver.Execer             = &tdriverConn107{}
	_ driver.Queryer            = &tdriverConn107{}
	_ driver.QueryerContext     = &tdriverConn107{}
	_ driver.Conn               = &tdriverConn108{}
	_ driver.Execer             = &tdriverConn108{}
	_ driver.Queryer            = &tdriverConn108{}
	_ driver.SessionResetter    = &tdriverConn108{}
	_ driver.Conn               = &tdriverConn109{}
	_ driver.Execer             = &tdriverConn109{}
	_ driver.QueryerContext     = &tdriverConn109{}
	_ driver.SessionResetter    = &tdriverConn109{}
	_ driver.Conn               = &tdriverConn110{}
	_ driver.ExecerContext      = &tdriverConn110{}
	_ driver.NamedValueChecker  = &tdriverConn110{}
	_ driver.Pinger             = &tdriverConn110{}
	_ driver.Conn               = &tdriverConn111{}
	_ driver.ExecerContext      = &tdriverConn111{}
	_ driver.NamedValueChecker  = &tdriverConn111{}
	_ driver.Queryer            = &tdriverConn111{}
	_ driver.Conn               = &tdriverConn112{}
	_ driver.ExecerContext      = &tdriverConn112{}
	_ driver.NamedValueChecker  = &tdriverConn112{}
	_ driver.QueryerContext     = &tdriverConn112{}
	_ driver.Conn               = &tdriverConn113{}
	_ driver.ExecerContext      = &tdriverConn113{}
	_ driver.NamedValueChecker  = &tdriverConn113{}
	_ driver.SessionResetter    = &tdriverConn113{}
	_ driver.Conn               = &tdriverConn114{}
	_ driver.ExecerContext      = &tdriverConn114{}
	_ driver.Pinger             = &tdriverConn114{}
	_ driver.Queryer            = &tdriverConn114{}
	_ driver.Conn               = &tdriverConn115{}
	_ driver.ExecerContext      = &tdriverConn115{}
	_ driver.Pinger             = &tdriverConn115{}
	_ driver.QueryerContext     = &tdriverConn115{}
	_ driver.Conn               = &tdriverConn116{}
	_ driver.ExecerContext      = &tdriverConn116{}
	_ driver.Pinger             = &tdriverConn116{}
	_ driver.SessionResetter    = &tdriverConn116{}
	_ driver.Conn               = &tdriverConn117{}
	_ driver.ExecerContext      = &tdriverConn117{}
	_ driver.Queryer            = &tdriverConn117{}
	_ driver.QueryerContext     = &tdriverConn117{}
	_ driver.Conn               = &tdriverConn118{}
	_ driver.ExecerContext      = &tdriverConn118{}
	_ driver.Queryer            = &tdriverConn118{}
	_ driver.SessionResetter    = &tdriverConn118{}
	_ driver.Conn               = &tdriverConn119{}
	_ driver.ExecerContext      = &tdriverConn119{}
	_ driver.QueryerContext     = &tdriverConn119{}
	_ driver.SessionResetter    = &tdriverConn119{}
	_ driver.Conn               = &tdriverConn120{}
	_ driver.NamedValueChecker  = &tdriverConn120{}
	_ driver.Pinger             = &tdriverConn120{}
	_ driver.Queryer            = &tdriverConn120{}
	_ driver.Conn               = &tdriverConn121{}
	_ driver.NamedValueChecker  = &tdriverConn121{}
	_ driver.Pinger             = &tdriverConn121{}
	_ driver.QueryerContext     = &tdriverConn121{}
	_ driver.Conn               = &tdriverConn122{}
	_ driver.NamedValueChecker  = &tdriverConn122{}
	_ driver.Pinger             = &tdriverConn122{}
	_ driver.SessionResetter    = &tdriverConn122{}
	_ driver.Conn               = &tdriverConn123{}
	_ driver.NamedValueChecker  = &tdriverConn123{}
	_ driver.Queryer            = &tdriverConn123{}
	_ driver.QueryerContext     = &tdriverConn123{}
	_ driver.Conn               = &tdriverConn124{}
	_ driver.NamedValueChecker  = &tdriverConn124{}
	_ driver.Queryer            = &tdriverConn124{}
	_ driver.SessionResetter    = &tdriverConn124{}
	_ driver.Conn               = &tdriverConn125{}
	_ driver.NamedValueChecker  = &tdriverConn125{}
	_ driver.QueryerContext     = &tdriverConn125{}
	_ driver.SessionResetter    = &tdriverConn125{}
	_ driver.Conn               = &tdriverConn126{}
	_ driver.Pinger             = &tdriverConn126{}
	_ driver.Queryer            = &tdriverConn126{}
	_ driver.QueryerContext     = &tdriverConn126{}
	_ driver.Conn               = &tdriverConn127{}
	_ driver.Pinger             = &tdriverConn127{}
	_ driver.Queryer            = &tdriverConn127{}
	_ driver.SessionResetter    = &tdriverConn127{}
	_ driver.Conn               = &tdriverConn128{}
	_ driver.Pinger             = &tdriverConn128{}
	_ driver.QueryerContext     = &tdriverConn128{}
	_ driver.SessionResetter    = &tdriverConn128{}
	_ driver.Conn               = &tdriverConn129{}
	_ driver.Queryer            = &tdriverConn129{}
	_ driver.QueryerContext     = &tdriverConn129{}
	_ driver.SessionResetter    = &tdriverConn129{}
	_ driver.Conn               = &tdriverConn130{}
	_ driver.ConnBeginTx        = &tdriverConn130{}
	_ driver.ConnPrepareContext = &tdriverConn130{}
	_ driver.Execer             = &tdriverConn130{}
	_ driver.ExecerContext      = &tdriverConn130{}
	_ driver.Conn               = &tdriverConn131{}
	_ driver.ConnBeginTx        = &tdriverConn131{}
	_ driver.ConnPrepareContext = &tdriverConn131{}
	_ driver.Execer             = &tdriverConn131{}
	_ driver.NamedValueChecker  = &tdriverConn131{}
	_ driver.Conn               = &tdriverConn132{}
	_ driver.ConnBeginTx        = &tdriverConn132{}
	_ driver.ConnPrepareContext = &tdriverConn132{}
	_ driver.Execer             = &tdriverConn132{}
	_ driver.Pinger             = &tdriverConn132{}
	_ driver.Conn               = &tdriverConn133{}
	_ driver.ConnBeginTx        = &tdriverConn133{}
	_ driver.ConnPrepareContext = &tdriverConn133{}
	_ driver.Execer             = &tdriverConn133{}
	_ driver.Queryer            = &tdriverConn133{}
	_ driver.Conn               = &tdriverConn134{}
	_ driver.ConnBeginTx        = &tdriverConn134{}
	_ driver.ConnPrepareContext = &tdriverConn134{}
	_ driver.Execer             = &tdriverConn134{}
	_ driver.QueryerContext     = &tdriverConn134{}
	_ driver.Conn               = &tdriverConn135{}
	_ driver.ConnBeginTx        = &tdriverConn135{}
	_ driver.ConnPrepareContext = &tdriverConn135{}
	_ driver.Execer             = &tdriverConn135{}
	_ driver.SessionResetter    = &tdriverConn135{}
	_ driver.Conn               = &tdriverConn136{}
	_ driver.ConnBeginTx        = &tdriverConn136{}
	_ driver.ConnPrepareContext = &tdriverConn136{}
	_ driver.ExecerContext      = &tdriverConn136{}
	_ driver.NamedValueChecker  = &tdriverConn136{}
	_ driver.Conn               = &tdriverConn137{}
	_ driver.ConnBeginTx        = &tdriverConn137{}
	_ driver.ConnPrepareContext = &tdriverConn137{}
	_ driver.ExecerContext      = &tdriverConn137{}
	_ driver.Pinger             = &tdriverConn137{}
	_ driver.Conn               = &tdriverConn138{}
	_ driver.ConnBeginTx        = &tdriverConn138{}
	_ driver.ConnPrepareContext = &tdriverConn138{}
	_ driver.ExecerContext      = &tdriverConn138{}
	_ driver.Queryer            = &tdriverConn138{}
	_ driver.Conn               = &tdriverConn139{}
	_ driver.ConnBeginTx        = &tdriverConn139{}
	_ driver.ConnPrepareContext = &tdriverConn139{}
	_ driver.ExecerContext      = &tdriverConn139{}
	_ driver.QueryerContext     = &tdriverConn139{}
	_ driver.Conn               = &tdriverConn140{}
	_ driver.ConnBeginTx        = &tdriverConn140{}
	_ driver.ConnPrepareContext = &tdriverConn140{}
	_ driver.ExecerContext      = &tdriverConn140{}
	_ driver.SessionResetter    = &tdriverConn140{}
	_ driver.Conn               = &tdriverConn141{}
	_ driver.ConnBeginTx        = &tdriverConn141{}
	_ driver.ConnPrepareContext = &tdriverConn141{}
	_ driver.NamedValueChecker  = &tdriverConn141{}
	_ driver.Pinger             = &tdriverConn141{}
	_ driver.Conn               = &tdriverConn142{}
	_ driver.ConnBeginTx        = &tdriverConn142{}
	_ driver.ConnPrepareContext = &tdriverConn142{}
	_ driver.NamedValueChecker  = &tdriverConn142{}
	_ driver.Queryer            = &tdriverConn142{}
	_ driver.Conn               = &tdriverConn143{}
	_ driver.ConnBeginTx        = &tdriverConn143{}
	_ driver.ConnPrepareContext = &tdriverConn143{}
	_ driver.NamedValueChecker  = &tdriverConn143{}
	_ driver.QueryerContext     = &tdriverConn143{}
	_ driver.Conn               = &tdriverConn144{}
	_ driver.ConnBeginTx        = &tdriverConn144{}
	_ driver.ConnPrepareContext = &tdriverConn144{}
	_ driver.NamedValueChecker  = &tdriverConn144{}
	_ driver.SessionResetter    = &tdriverConn144{}
	_ driver.Conn               = &tdriverConn145{}
	_ driver.ConnBeginTx        = &tdriverConn145{}
	_ driver.ConnPrepareContext = &tdriverConn145{}
	_ driver.Pinger             = &tdriverConn145{}
	_ driver.Queryer            = &tdriverConn145{}
	_ driver.Conn               = &tdriverConn146{}
	_ driver.ConnBeginTx        = &tdriverConn146{}
	_ driver.ConnPrepareContext = &tdriverConn146{}
	_ driver.Pinger             = &tdriverConn146{}
	_ driver.QueryerContext     = &tdriverConn146{}
	_ driver.Conn               = &tdriverConn147{}
	_ driver.ConnBeginTx        = &tdriverConn147{}
	_ driver.ConnPrepareContext = &tdriverConn147{}
	_ driver.Pinger             = &tdriverConn147{}
	_ driver.SessionResetter    = &tdriverConn147{}
	_ driver.Conn               = &tdriverConn148{}
	_ driver.ConnBeginTx        = &tdriverConn148{}
	_ driver.ConnPrepareContext = &tdriverConn148{}
	_ driver.Queryer            = &tdriverConn148{}
	_ driver.QueryerContext     = &tdriverConn148{}
	_ driver.Conn               = &tdriverConn149{}
	_ driver.ConnBeginTx        = &tdriverConn149{}
	_ driver.ConnPrepareContext = &tdriverConn149{}
	_ driver.Queryer            = &tdriverConn149{}
	_ driver.SessionResetter    = &tdriverConn149{}
	_ driver.Conn               = &tdriverConn150{}
	_ driver.ConnBeginTx        = &tdriverConn150{}
	_ driver.ConnPrepareContext = &tdriverConn150{}
	_ driver.QueryerContext     = &tdriverConn150{}
	_ driver.SessionResetter    = &tdriverConn150{}
	_ driver.Conn               = &tdriverConn151{}
	_ driver.ConnBeginTx        = &tdriverConn151{}
	_ driver.Execer             = &tdriverConn151{}
	_ driver.ExecerContext      = &tdriverConn151{}
	_ driver.NamedValueChecker  = &tdriverConn151{}
	_ driver.Conn               = &tdriverConn152{}
	_ driver.ConnBeginTx        = &tdriverConn152{}
	_ driver.Execer             = &tdriverConn152{}
	_ driver.ExecerContext      = &tdriverConn152{}
	_ driver.Pinger             = &tdriverConn152{}
	_ driver.Conn               = &tdriverConn153{}
	_ driver.ConnBeginTx        = &tdriverConn153{}
	_ driver.Execer             = &tdriverConn153{}
	_ driver.ExecerContext      = &tdriverConn153{}
	_ driver.Queryer            = &tdriverConn153{}
	_ driver.Conn               = &tdriverConn154{}
	_ driver.ConnBeginTx        = &tdriverConn154{}
	_ driver.Execer             = &tdriverConn154{}
	_ driver.ExecerContext      = &tdriverConn154{}
	_ driver.QueryerContext     = &tdriverConn154{}
	_ driver.Conn               = &tdriverConn155{}
	_ driver.ConnBeginTx        = &tdriverConn155{}
	_ driver.Execer             = &tdriverConn155{}
	_ driver.ExecerContext      = &tdriverConn155{}
	_ driver.SessionResetter    = &tdriverConn155{}
	_ driver.Conn               = &tdriverConn156{}
	_ driver.ConnBeginTx        = &tdriverConn156{}
	_ driver.Execer             = &tdriverConn156{}
	_ driver.NamedValueChecker  = &tdriverConn156{}
	_ driver.Pinger             = &tdriverConn156{}
	_ driver.Conn               = &tdriverConn157{}
	_ driver.ConnBeginTx        = &tdriverConn157{}
	_ driver.Execer             = &tdriverConn157{}
	_ driver.NamedValueChecker  = &tdriverConn157{}
	_ driver.Queryer            = &tdriverConn157{}
	_ driver.Conn               = &tdriverConn158{}
	_ driver.ConnBeginTx        = &tdriverConn158{}
	_ driver.Execer             = &tdriverConn158{}
	_ driver.NamedValueChecker  = &tdriverConn158{}
	_ driver.QueryerContext     = &tdriverConn158{}
	_ driver.Conn               = &tdriverConn159{}
	_ driver.ConnBeginTx        = &tdriverConn159{}
	_ driver.Execer             = &tdriverConn159{}
	_ driver.NamedValueChecker  = &tdriverConn159{}
	_ driver.SessionResetter    = &tdriverConn159{}
	_ driver.Conn               = &tdriverConn160{}
	_ driver.ConnBeginTx        = &tdriverConn160{}
	_ driver.Execer             = &tdriverConn160{}
	_ driver.Pinger             = &tdriverConn160{}
	_ driver.Queryer            = &tdriverConn160{}
	_ driver.Conn               = &tdriverConn161{}
	_ driver.ConnBeginTx        = &tdriverConn161{}
	_ driver.Execer             = &tdriverConn161{}
	_ driver.Pinger             = &tdriverConn161{}
	_ driver.QueryerContext     = &tdriverConn161{}
	_ driver.Conn               = &tdriverConn162{}
	_ driver.ConnBeginTx        = &tdriverConn162{}
	_ driver.Execer             = &tdriverConn162{}
	_ driver.Pinger             = &tdriverConn162{}
	_ driver.SessionResetter    = &tdriverConn162{}
	_ driver.Conn               = &tdriverConn163{}
	_ driver.ConnBeginTx        = &tdriverConn163{}
	_ driver.Execer             = &tdriverConn163{}
	_ driver.Queryer            = &tdriverConn163{}
	_ driver.QueryerContext     = &tdriverConn163{}
	_ driver.Conn               = &tdriverConn164{}
	_ driver.ConnBeginTx        = &tdriverConn164{}
	_ driver.Execer             = &tdriverConn164{}
	_ driver.Queryer            = &tdriverConn164{}
	_ driver.SessionResetter    = &tdriverConn164{}
	_ driver.Conn               = &tdriverConn165{}
	_ driver.ConnBeginTx        = &tdriverConn165{}
	_ driver.Execer             = &tdriverConn165{}
	_ driver.QueryerContext     = &tdriverConn165{}
	_ driver.SessionResetter    = &tdriverConn165{}
	_ driver.Conn               = &tdriverConn166{}
	_ driver.ConnBeginTx        = &tdriverConn166{}
	_ driver.ExecerContext      = &tdriverConn166{}
	_ driver.NamedValueChecker  = &tdriverConn166{}
	_ driver.Pinger             = &tdriverConn166{}
	_ driver.Conn               = &tdriverConn167{}
	_ driver.ConnBeginTx        = &tdriverConn167{}
	_ driver.ExecerContext      = &tdriverConn167{}
	_ driver.NamedValueChecker  = &tdriverConn167{}
	_ driver.Queryer            = &tdriverConn167{}
	_ driver.Conn               = &tdriverConn168{}
	_ driver.ConnBeginTx        = &tdriverConn168{}
	_ driver.ExecerContext      = &tdriverConn168{}
	_ driver.NamedValueChecker  = &tdriverConn168{}
	_ driver.QueryerContext     = &tdriverConn168{}
	_ driver.Conn               = &tdriverConn169{}
	_ driver.ConnBeginTx        = &tdriverConn169{}
	_ driver.ExecerContext      = &tdriverConn169{}
	_ driver.NamedValueChecker  = &tdriverConn169{}
	_ driver.SessionResetter    = &tdriverConn169{}
	_ driver.Conn               = &tdriverConn170{}
	_ driver.ConnBeginTx        = &tdriverConn170{}
	_ driver.ExecerContext      = &tdriverConn170{}
	_ driver.Pinger             = &tdriverConn170{}
	_ driver.Queryer            = &tdriverConn170{}
	_ driver.Conn               = &tdriverConn171{}
	_ driver.ConnBeginTx        = &tdriverConn171{}
	_ driver.ExecerContext      = &tdriverConn171{}
	_ driver.Pinger             = &tdriverConn171{}
	_ driver.QueryerContext     = &tdriverConn171{}
	_ driver.Conn               = &tdriverConn172{}
	_ driver.ConnBeginTx        = &tdriverConn172{}
	_ driver.ExecerContext      = &tdriverConn172{}
	_ driver.Pinger             = &tdriverConn172{}
	_ driver.SessionResetter    = &tdriverConn172{}
	_ driver.Conn               = &tdriverConn173{}
	_ driver.ConnBeginTx        = &tdriverConn173{}
	_ driver.ExecerContext      = &tdriverConn173{}
	_ driver.Queryer            = &tdriverConn173{}
	_ driver.QueryerContext     = &tdriverConn173{}
	_ driver.Conn               = &tdriverConn174{}
	_ driver.ConnBeginTx        = &tdriverConn174{}
	_ driver.ExecerContext      = &tdriverConn174{}
	_ driver.Queryer            = &tdriverConn174{}
	_ driver.SessionResetter    = &tdriverConn174{}
	_ driver.Conn               = &tdriverConn175{}
	_ driver.ConnBeginTx        = &tdriverConn175{}
	_ driver.ExecerContext      = &tdriverConn175{}
	_ driver.QueryerContext     = &tdriverConn175{}
	_ driver.SessionResetter    = &tdriverConn175{}
	_ driver.Conn               = &tdriverConn176{}
	_ driver.ConnBeginTx        = &tdriverConn176{}
	_ driver.NamedValueChecker  = &tdriverConn176{}
	_ driver.Pinger             = &tdriverConn176{}
	_ driver.Queryer            = &tdriverConn176{}
	_ driver.Conn               = &tdriverConn177{}
	_ driver.ConnBeginTx        = &tdriverConn177{}
	_ driver.NamedValueChecker  = &tdriverConn177{}
	_ driver.Pinger             = &tdriverConn177{}
	_ driver.QueryerContext     = &tdriverConn177{}
	_ driver.Conn               = &tdriverConn178{}
	_ driver.ConnBeginTx        = &tdriverConn178{}
	_ driver.NamedValueChecker  = &tdriverConn178{}
	_ driver.Pinger             = &tdriverConn178{}
	_ driver.SessionResetter    = &tdriverConn178{}
	_ driver.Conn               = &tdriverConn179{}
	_ driver.ConnBeginTx        = &tdriverConn179{}
	_ driver.NamedValueChecker  = &tdriverConn179{}
	_ driver.Queryer            = &tdriverConn179{}
	_ driver.QueryerContext     = &tdriverConn179{}
	_ driver.Conn               = &tdriverConn180{}
	_ driver.ConnBeginTx        = &tdriverConn180{}
	_ driver.NamedValueChecker  = &tdriverConn180{}
	_ driver.Queryer            = &tdriverConn180{}
	_ driver.SessionResetter    = &tdriverConn180{}
	_ driver.Conn               = &tdriverConn181{}
	_ driver.ConnBeginTx        = &tdriverConn181{}
	_ driver.NamedValueChecker  = &tdriverConn181{}
	_ driver.QueryerContext     = &tdriverConn181{}
	_ driver.SessionResetter    = &tdriverConn181{}
	_ driver.Conn               = &tdriverConn182{}
	_ driver.ConnBeginTx        = &tdriverConn182{}
	_ driver.Pinger             = &tdriverConn182{}
	_ driver.Queryer            = &tdriverConn182{}
	_ driver.QueryerContext     = &tdriverConn182{}
	_ driver.Conn               = &tdriverConn183{}
	_ driver.ConnBeginTx        = &tdriverConn183{}
	_ driver.Pinger             = &tdriverConn183{}
	_ driver.Queryer            = &tdriverConn183{}
	_ driver.SessionResetter    = &tdriverConn183{}
	_ driver.Conn               = &tdriverConn184{}
	_ driver.ConnBeginTx        = &tdriverConn184{}
	_ driver.Pinger             = &tdriverConn184{}
	_ driver.QueryerContext     = &tdriverConn184{}
	_ driver.SessionResetter    = &tdriverConn184{}
	_ driver.Conn               = &tdriverConn185{}
	_ driver.ConnBeginTx        = &tdriverConn185{}
	_ driver.Queryer            = &tdriverConn185{}
	_ driver.QueryerContext     = &tdriverConn185{}
	_ driver.SessionResetter    = &tdriverConn185{}
	_ driver.Conn               = &tdriverConn186{}
	_ driver.ConnPrepareContext = &tdriverConn186{}
	_ driver.Execer             = &tdriverConn186{}
	_ driver.ExecerContext      = &tdriverConn186{}
	_ driver.NamedValueChecker  = &tdriverConn186{}
	_ driver.Conn               = &tdriverConn187{}
	_ driver.ConnPrepareContext = &tdriverConn187{}
	_ driver.Execer             = &tdriverConn187{}
	_ driver.ExecerContext      = &tdriverConn187{}
	_ driver.Pinger             = &tdriverConn187{}
	_ driver.Conn               = &tdriverConn188{}
	_ driver.ConnPrepareContext = &tdriverConn188{}
	_ driver.Execer             = &tdriverConn188{}
	_ driver.ExecerContext      = &tdriverConn188{}
	_ driver.Queryer            = &tdriverConn188{}
	_ driver.Conn               = &tdriverConn189{}
	_ driver.ConnPrepareContext = &tdriverConn189{}
	_ driver.Execer             = &tdriverConn189{}
	_ driver.ExecerContext      = &tdriverConn189{}
	_ driver.QueryerContext     = &tdriverConn189{}
	_ driver.Conn               = &tdriverConn190{}
	_ driver.ConnPrepareContext = &tdriverConn190{}
	_ driver.Execer             = &tdriverConn190{}
	_ driver.ExecerContext      = &tdriverConn190{}
	_ driver.SessionResetter    = &tdriverConn190{}
	_ driver.Conn               = &tdriverConn191{}
	_ driver.ConnPrepareContext = &tdriverConn191{}
	_ driver.Execer             = &tdriverConn191{}
	_ driver.NamedValueChecker  = &tdriverConn191{}
	_ driver.Pinger             = &tdriverConn191{}
	_ driver.Conn               = &tdriverConn192{}
	_ driver.ConnPrepareContext = &tdriverConn192{}
	_ driver.Execer             = &tdriverConn192{}
	_ driver.NamedValueChecker  = &tdriverConn192{}
	_ driver.Queryer            = &tdriverConn192{}
	_ driver.Conn               = &tdriverConn193{}
	_ driver.ConnPrepareContext = &tdriverConn193{}
	_ driver.Execer             = &tdriverConn193{}
	_ driver.NamedValueChecker  = &tdriverConn193{}
	_ driver.QueryerContext     = &tdriverConn193{}
	_ driver.Conn               = &tdriverConn194{}
	_ driver.ConnPrepareContext = &tdriverConn194{}
	_ driver.Execer             = &tdriverConn194{}
	_ driver.NamedValueChecker  = &tdriverConn194{}
	_ driver.SessionResetter    = &tdriverConn194{}
	_ driver.Conn               = &tdriverConn195{}
	_ driver.ConnPrepareContext = &tdriverConn195{}
	_ driver.Execer             = &tdriverConn195{}
	_ driver.Pinger             = &tdriverConn195{}
	_ driver.Queryer            = &tdriverConn195{}
	_ driver.Conn               = &tdriverConn196{}
	_ driver.ConnPrepareContext = &tdriverConn196{}
	_ driver.Execer             = &tdriverConn196{}
	_ driver.Pinger             = &tdriverConn196{}
	_ driver.QueryerContext     = &tdriverConn196{}
	_ driver.Conn               = &tdriverConn197{}
	_ driver.ConnPrepareContext = &tdriverConn197{}
	_ driver.Execer             = &tdriverConn197{}
	_ driver.Pinger             = &tdriverConn197{}
	_ driver.SessionResetter    = &tdriverConn197{}
	_ driver.Conn               = &tdriverConn198{}
	_ driver.ConnPrepareContext = &tdriverConn198{}
	_ driver.Execer             = &tdriverConn198{}
	_ driver.Queryer            = &tdriverConn198{}
	_ driver.QueryerContext     = &tdriverConn198{}
	_ driver.Conn               = &tdriverConn199{}
	_ driver.ConnPrepareContext = &tdriverConn199{}
	_ driver.Execer             = &tdriverConn199{}
	_ driver.Queryer            = &tdriverConn199{}
	_ driver.SessionResetter    = &tdriverConn199{}
	_ driver.Conn               = &tdriverConn200{}
	_ driver.ConnPrepareContext = &tdriverConn200{}
	_ driver.Execer             = &tdriverConn200{}
	_ driver.QueryerContext     = &tdriverConn200{}
	_ driver.SessionResetter    = &tdriverConn200{}
	_ driver.Conn               = &tdriverConn201{}
	_ driver.ConnPrepareContext = &tdriverConn201{}
	_ driver.ExecerContext      = &tdriverConn201{}
	_ driver.NamedValueChecker  = &tdriverConn201{}
	_ driver.Pinger             = &tdriverConn201{}
	_ driver.Conn               = &tdriverConn202{}
	_ driver.ConnPrepareContext = &tdriverConn202{}
	_ driver.ExecerContext      = &tdriverConn202{}
	_ driver.NamedValueChecker  = &tdriverConn202{}
	_ driver.Queryer            = &tdriverConn202{}
	_ driver.Conn               = &tdriverConn203{}
	_ driver.ConnPrepareContext = &tdriverConn203{}
	_ driver.ExecerContext      = &tdriverConn203{}
	_ driver.NamedValueChecker  = &tdriverConn203{}
	_ driver.QueryerContext     = &tdriverConn203{}
	_ driver.Conn               = &tdriverConn204{}
	_ driver.ConnPrepareContext = &tdriverConn204{}
	_ driver.ExecerContext      = &tdriverConn204{}
	_ driver.NamedValueChecker  = &tdriverConn204{}
	_ driver.SessionResetter    = &tdriverConn204{}
	_ driver.Conn               = &tdriverConn205{}
	_ driver.ConnPrepareContext = &tdriverConn205{}
	_ driver.ExecerContext      = &tdriverConn205{}
	_ driver.Pinger             = &tdriverConn205{}
	_ driver.Queryer            = &tdriverConn205{}
	_ driver.Conn               = &tdriverConn206{}
	_ driver.ConnPrepareContext = &tdriverConn206{}
	_ driver.ExecerContext      = &tdriverConn206{}
	_ driver.Pinger             = &tdriverConn206{}
	_ driver.QueryerContext     = &tdriverConn206{}
	_ driver.Conn               = &tdriverConn207{}
	_ driver.ConnPrepareContext = &tdriverConn207{}
	_ driver.ExecerContext      = &tdriverConn207{}
	_ driver.Pinger             = &tdriverConn207{}
	_ driver.SessionResetter    = &tdriverConn207{}
	_ driver.Conn               = &tdriverConn208{}
	_ driver.ConnPrepareContext = &tdriverConn208{}
	_ driver.ExecerContext      = &tdriverConn208{}
	_ driver.Queryer            = &tdriverConn208{}
	_ driver.QueryerContext     = &tdriverConn208{}
	_ driver.Conn               = &tdriverConn209{}
	_ driver.ConnPrepareContext = &tdriverConn209{}
	_ driver.ExecerContext      = &tdriverConn209{}
	_ driver.Queryer            = &tdriverConn209{}
	_ driver.SessionResetter    = &tdriverConn209{}
	_ driver.Conn               = &tdriverConn210{}
	_ driver.ConnPrepareContext = &tdriverConn210{}
	_ driver.ExecerContext      = &tdriverConn210{}
	_ driver.QueryerContext     = &tdriverConn210{}
	_ driver.SessionResetter    = &tdriverConn210{}
	_ driver.Conn               = &tdriverConn211{}
	_ driver.ConnPrepareContext = &tdriverConn211{}
	_ driver.NamedValueChecker  = &tdriverConn211{}
	_ driver.Pinger             = &tdriverConn211{}
	_ driver.Queryer            = &tdriverConn211{}
	_ driver.Conn               = &tdriverConn212{}
	_ driver.ConnPrepareContext = &tdriverConn212{}
	_ driver.NamedValueChecker  = &tdriverConn212{}
	_ driver.Pinger             = &tdriverConn212{}
	_ driver.QueryerContext     = &tdriverConn212{}
	_ driver.Conn               = &tdriverConn213{}
	_ driver.ConnPrepareContext = &tdriverConn213{}
	_ driver.NamedValueChecker  = &tdriverConn213{}
	_ driver.Pinger             = &tdriverConn213{}
	_ driver.SessionResetter    = &tdriverConn213{}
	_ driver.Conn               = &tdriverConn214{}
	_ driver.ConnPrepareContext = &tdriverConn214{}
	_ driver.NamedValueChecker  = &tdriverConn214{}
	_ driver.Queryer            = &tdriverConn214{}
	_ driver.QueryerContext     = &tdriverConn214{}
	_ driver.Conn               = &tdriverConn215{}
	_ driver.ConnPrepareContext = &tdriverConn215{}
	_ driver.NamedValueChecker  = &tdriverConn215{}
	_ driver.Queryer            = &tdriverConn215{}
	_ driver.SessionResetter    = &tdriverConn215{}
	_ driver.Conn               = &tdriverConn216{}
	_ driver.ConnPrepareContext = &tdriverConn216{}
	_ driver.NamedValueChecker  = &tdriverConn216{}
	_ driver.QueryerContext     = &tdriverConn216{}
	_ driver.SessionResetter    = &tdriverConn216{}
	_ driver.Conn               = &tdriverConn217{}
	_ driver.ConnPrepareContext = &tdriverConn217{}
	_ driver.Pinger             = &tdriverConn217{}
	_ driver.Queryer            = &tdriverConn217{}
	_ driver.QueryerContext     = &tdriverConn217{}
	_ driver.Conn               = &tdriverConn218{}
	_ driver.ConnPrepareContext = &tdriverConn218{}
	_ driver.Pinger             = &tdriverConn218{}
	_ driver.Queryer            = &tdriverConn218{}
	_ driver.SessionResetter    = &tdriverConn218{}
	_ driver.Conn               = &tdriverConn219{}
	_ driver.ConnPrepareContext = &tdriverConn219{}
	_ driver.Pinger             = &tdriverConn219{}
	_ driver.QueryerContext     = &tdriverConn219{}
	_ driver.SessionResetter    = &tdriverConn219{}
	_ driver.Conn               = &tdriverConn220{}
	_ driver.ConnPrepareContext = &tdriverConn220{}
	_ driver.Queryer            = &tdriverConn220{}
	_ driver.QueryerContext     = &tdriverConn220{}
	_ driver.SessionResetter    = &tdriverConn220{}
	_ driver.Conn               = &tdriverConn221{}
	_ driver.Execer             = &tdriverConn221{}
	_ driver.ExecerContext      = &tdriverConn221{}
	_ driver.NamedValueChecker  = &tdriverConn221{}
	_ driver.Pinger             = &tdriverConn221{}
	_ driver.Conn               = &tdriverConn222{}
	_ driver.Execer             = &tdriverConn222{}
	_ driver.ExecerContext      = &tdriverConn222{}
	_ driver.NamedValueChecker  = &tdriverConn222{}
	_ driver.Queryer            = &tdriverConn222{}
	_ driver.Conn               = &tdriverConn223{}
	_ driver.Execer             = &tdriverConn223{}
	_ driver.ExecerContext      = &tdriverConn223{}
	_ driver.NamedValueChecker  = &tdriverConn223{}
	_ driver.QueryerContext     = &tdriverConn223{}
	_ driver.Conn               = &tdriverConn224{}
	_ driver.Execer             = &tdriverConn224{}
	_ driver.ExecerContext      = &tdriverConn224{}
	_ driver.NamedValueChecker  = &tdriverConn224{}
	_ driver.SessionResetter    = &tdriverConn224{}
	_ driver.Conn               = &tdriverConn225{}
	_ driver.Execer             = &tdriverConn225{}
	_ driver.ExecerContext      = &tdriverConn225{}
	_ driver.Pinger             = &tdriverConn225{}
	_ driver.Queryer            = &tdriverConn225{}
	_ driver.Conn               = &tdriverConn226{}
	_ driver.Execer             = &tdriverConn226{}
	_ driver.ExecerContext      = &tdriverConn226{}
	_ driver.Pinger             = &tdriverConn226{}
	_ driver.QueryerContext     = &tdriverConn226{}
	_ driver.Conn               = &tdriverConn227{}
	_ driver.Execer             = &tdriverConn227{}
	_ driver.ExecerContext      = &tdriverConn227{}
	_ driver.Pinger             = &tdriverConn227{}
	_ driver.SessionResetter    = &tdriverConn227{}
	_ driver.Conn               = &tdriverConn228{}
	_ driver.Execer             = &tdriverConn228{}
	_ driver.ExecerContext      = &tdriverConn228{}
	_ driver.Queryer            = &tdriverConn228{}
	_ driver.QueryerContext     = &tdriverConn228{}
	_ driver.Conn               = &tdriverConn229{}
	_ driver.Execer             = &tdriverConn229{}
	_ driver.ExecerContext      = &tdriverConn229{}
	_ driver.Queryer            = &tdriverConn229{}
	_ driver.SessionResetter    = &tdriverConn229{}
	_ driver.Conn               = &tdriverConn230{}
	_ driver.Execer             = &tdriverConn230{}
	_ driver.ExecerContext      = &tdriverConn230{}
	_ driver.QueryerContext     = &tdriverConn230{}
	_ driver.SessionResetter    = &tdriverConn230{}
	_ driver.Conn               = &tdriverConn231{}
	_ driver.Execer             = &tdriverConn231{}
	_ driver.NamedValueChecker  = &tdriverConn231{}
	_ driver.Pinger             = &tdriverConn231{}
	_ driver.Queryer            = &tdriverConn231{}
	_ driver.Conn               = &tdriverConn232{}
	_ driver.Execer             = &tdriverConn232{}
	_ driver.NamedValueChecker  = &tdriverConn232{}
	_ driver.Pinger             = &tdriverConn232{}
	_ driver.QueryerContext     = &tdriverConn232{}
	_ driver.Conn               = &tdriverConn233{}
	_ driver.Execer             = &tdriverConn233{}
	_ driver.NamedValueChecker  = &tdriverConn233{}
	_ driver.Pinger             = &tdriverConn233{}
	_ driver.SessionResetter    = &tdriverConn233{}
	_ driver.Conn               = &tdriverConn234{}
	_ driver.Execer             = &tdriverConn234{}
	_ driver.NamedValueChecker  = &tdriverConn234{}
	_ driver.Queryer            = &tdriverConn234{}
	_ driver.QueryerContext     = &tdriverConn234{}
	_ driver.Conn               = &tdriverConn235{}
	_ driver.Execer             = &tdriverConn235{}
	_ driver.NamedValueChecker  = &tdriverConn235{}
	_ driver.Queryer            = &tdriverConn235{}
	_ driver.SessionResetter    = &tdriverConn235{}
	_ driver.Conn               = &tdriverConn236{}
	_ driver.Execer             = &tdriverConn236{}
	_ driver.NamedValueChecker  = &tdriverConn236{}
	_ driver.QueryerContext     = &tdriverConn236{}
	_ driver.SessionResetter    = &tdriverConn236{}
	_ driver.Conn               = &tdriverConn237{}
	_ driver.Execer             = &tdriverConn237{}
	_ driver.Pinger             = &tdriverConn237{}
	_ driver.Queryer            = &tdriverConn237{}
	_ driver.QueryerContext     = &tdriverConn237{}
	_ driver.Conn               = &tdriverConn238{}
	_ driver.Execer             = &tdriverConn238{}
	_ driver.Pinger             = &tdriverConn238{}
	_ driver.Queryer            = &tdriverConn238{}
	_ driver.SessionResetter    = &tdriverConn238{}
	_ driver.Conn               = &tdriverConn239{}
	_ driver.Execer             = &tdriverConn239{}
	_ driver.Pinger             = &tdriverConn239{}
	_ driver.QueryerContext     = &tdriverConn239{}
	_ driver.SessionResetter    = &tdriverConn239{}
	_ driver.Conn               = &tdriverConn240{}
	_ driver.Execer             = &tdriverConn240{}
	_ driver.Queryer            = &tdriverConn240{}
	_ driver.QueryerContext     = &tdriverConn240{}
	_ driver.SessionResetter    = &tdriverConn240{}
	_ driver.Conn               = &tdriverConn241{}
	_ driver.ExecerContext      = &tdriverConn241{}
	_ driver.NamedValueChecker  = &tdriverConn241{}
	_ driver.Pinger             = &tdriverConn241{}
	_ driver.Queryer            = &tdriverConn241{}
	_ driver.Conn               = &tdriverConn242{}
	_ driver.ExecerContext      = &tdriverConn242{}
	_ driver.NamedValueChecker  = &tdriverConn242{}
	_ driver.Pinger             = &tdriverConn242{}
	_ driver.QueryerContext     = &tdriverConn242{}
	_ driver.Conn               = &tdriverConn243{}
	_ driver.ExecerContext      = &tdriverConn243{}
	_ driver.NamedValueChecker  = &tdriverConn243{}
	_ driver.Pinger             = &tdriverConn243{}
	_ driver.SessionResetter    = &tdriverConn243{}
	_ driver.Conn               = &tdriverConn244{}
	_ driver.ExecerContext      = &tdriverConn244{}
	_ driver.NamedValueChecker  = &tdriverConn244{}
	_ driver.Queryer            = &tdriverConn244{}
	_ driver.QueryerContext     = &tdriverConn244{}
	_ driver.Conn               = &tdriverConn245{}
	_ driver.ExecerContext      = &tdriverConn245{}
	_ driver.NamedValueChecker  = &tdriverConn245{}
	_ driver.Queryer            = &tdriverConn245{}
	_ driver.SessionResetter    = &tdriverConn245{}
	_ driver.Conn               = &tdriverConn246{}
	_ driver.ExecerContext      = &tdriverConn246{}
	_ driver.NamedValueChecker  = &tdriverConn246{}
	_ driver.QueryerContext     = &tdriverConn246{}
	_ driver.SessionResetter    = &tdriverConn246{}
	_ driver.Conn               = &tdriverConn247{}
	_ driver.ExecerContext      = &tdriverConn247{}
	_ driver.Pinger             = &tdriverConn247{}
	_ driver.Queryer            = &tdriverConn247{}
	_ driver.QueryerContext     = &tdriverConn247{}
	_ driver.Conn               = &tdriverConn248{}
	_ driver.ExecerContext      = &tdriverConn248{}
	_ driver.Pinger             = &tdriverConn248{}
	_ driver.Queryer            = &tdriverConn248{}
	_ driver.SessionResetter    = &tdriverConn248{}
	_ driver.Conn               = &tdriverConn249{}
	_ driver.ExecerContext      = &tdriverConn249{}
	_ driver.Pinger             = &tdriverConn249{}
	_ driver.QueryerContext     = &tdriverConn249{}
	_ driver.SessionResetter    = &tdriverConn249{}
	_ driver.Conn               = &tdriverConn250{}
	_ driver.ExecerContext      = &tdriverConn250{}
	_ driver.Queryer            = &tdriverConn250{}
	_ driver.QueryerContext     = &tdriverConn250{}
	_ driver.SessionResetter    = &tdriverConn250{}
	_ driver.Conn               = &tdriverConn251{}
	_ driver.NamedValueChecker  = &tdriverConn251{}
	_ driver.Pinger             = &tdriverConn251{}
	_ driver.Queryer            = &tdriverConn251{}
	_ driver.QueryerContext     = &tdriverConn251{}
	_ driver.Conn               = &tdriverConn252{}
	_ driver.NamedValueChecker  = &tdriverConn252{}
	_ driver.Pinger             = &tdriverConn252{}
	_ driver.Queryer            = &tdriverConn252{}
	_ driver.SessionResetter    = &tdriverConn252{}
	_ driver.Conn               = &tdriverConn253{}
	_ driver.NamedValueChecker  = &tdriverConn253{}
	_ driver.Pinger             = &tdriverConn253{}
	_ driver.QueryerContext     = &tdriverConn253{}
	_ driver.SessionResetter    = &tdriverConn253{}
	_ driver.Conn               = &tdriverConn254{}
	_ driver.NamedValueChecker  = &tdriverConn254{}
	_ driver.Queryer            = &tdriverConn254{}
	_ driver.QueryerContext     = &tdriverConn254{}
	_ driver.SessionResetter    = &tdriverConn254{}
	_ driver.Conn               = &tdriverConn255{}
	_ driver.Pinger             = &tdriverConn255{}
	_ driver.Queryer            = &tdriverConn255{}
	_ driver.QueryerContext     = &tdriverConn255{}
	_ driver.SessionResetter    = &tdriverConn255{}
	_ driver.Conn               = &tdriverConn256{}
	_ driver.ConnBeginTx        = &tdriverConn256{}
	_ driver.ConnPrepareContext = &tdriverConn256{}
	_ driver.Execer             = &tdriverConn256{}
	_ driver.ExecerContext      = &tdriverConn256{}
	_ driver.NamedValueChecker  = &tdriverConn256{}
	_ driver.Conn               = &tdriverConn257{}
	_ driver.ConnBeginTx        = &tdriverConn257{}
	_ driver.ConnPrepareContext = &tdriverConn257{}
	_ driver.Execer             = &tdriverConn257{}
	_ driver.ExecerContext      = &tdriverConn257{}
	_ driver.Pinger             = &tdriverConn257{}
	_ driver.Conn               = &tdriverConn258{}
	_ driver.ConnBeginTx        = &tdriverConn258{}
	_ driver.ConnPrepareContext = &tdriverConn258{}
	_ driver.Execer             = &tdriverConn258{}
	_ driver.ExecerContext      = &tdriverConn258{}
	_ driver.Queryer            = &tdriverConn258{}
	_ driver.Conn               = &tdriverConn259{}
	_ driver.ConnBeginTx        = &tdriverConn259{}
	_ driver.ConnPrepareContext = &tdriverConn259{}
	_ driver.Execer             = &tdriverConn259{}
	_ driver.ExecerContext      = &tdriverConn259{}
	_ driver.QueryerContext     = &tdriverConn259{}
	_ driver.Conn               = &tdriverConn260{}
	_ driver.ConnBeginTx        = &tdriverConn260{}
	_ driver.ConnPrepareContext = &tdriverConn260{}
	_ driver.Execer             = &tdriverConn260{}
	_ driver.ExecerContext      = &tdriverConn260{}
	_ driver.SessionResetter    = &tdriverConn260{}
	_ driver.Conn               = &tdriverConn261{}
	_ driver.ConnBeginTx        = &tdriverConn261{}
	_ driver.ConnPrepareContext = &tdriverConn261{}
	_ driver.Execer             = &tdriverConn261{}
	_ driver.NamedValueChecker  = &tdriverConn261{}
	_ driver.Pinger             = &tdriverConn261{}
	_ driver.Conn               = &tdriverConn262{}
	_ driver.ConnBeginTx        = &tdriverConn262{}
	_ driver.ConnPrepareContext = &tdriverConn262{}
	_ driver.Execer             = &tdriverConn262{}
	_ driver.NamedValueChecker  = &tdriverConn262{}
	_ driver.Queryer            = &tdriverConn262{}
	_ driver.Conn               = &tdriverConn263{}
	_ driver.ConnBeginTx        = &tdriverConn263{}
	_ driver.ConnPrepareContext = &tdriverConn263{}
	_ driver.Execer             = &tdriverConn263{}
	_ driver.NamedValueChecker  = &tdriverConn263{}
	_ driver.QueryerContext     = &tdriverConn263{}
	_ driver.Conn               = &tdriverConn264{}
	_ driver.ConnBeginTx        = &tdriverConn264{}
	_ driver.ConnPrepareContext = &tdriverConn264{}
	_ driver.Execer             = &tdriverConn264{}
	_ driver.NamedValueChecker  = &tdriverConn264{}
	_ driver.SessionResetter    = &tdriverConn264{}
	_ driver.Conn               = &tdriverConn265{}
	_ driver.ConnBeginTx        = &tdriverConn265{}
	_ driver.ConnPrepareContext = &tdriverConn265{}
	_ driver.Execer             = &tdriverConn265{}
	_ driver.Pinger             = &tdriverConn265{}
	_ driver.Queryer            = &tdriverConn265{}
	_ driver.Conn               = &tdriverConn266{}
	_ driver.ConnBeginTx        = &tdriverConn266{}
	_ driver.ConnPrepareContext = &tdriverConn266{}
	_ driver.Execer             = &tdriverConn266{}
	_ driver.Pinger             = &tdriverConn266{}
	_ driver.QueryerContext     = &tdriverConn266{}
	_ driver.Conn               = &tdriverConn267{}
	_ driver.ConnBeginTx        = &tdriverConn267{}
	_ driver.ConnPrepareContext = &tdriverConn267{}
	_ driver.Execer             = &tdriverConn267{}
	_ driver.Pinger             = &tdriverConn267{}
	_ driver.SessionResetter    = &tdriverConn267{}
	_ driver.Conn               = &tdriverConn268{}
	_ driver.ConnBeginTx        = &tdriverConn268{}
	_ driver.ConnPrepareContext = &tdriverConn268{}
	_ driver.Execer             = &tdriverConn268{}
	_ driver.Queryer            = &tdriverConn268{}
	_ driver.QueryerContext     = &tdriverConn268{}
	_ driver.Conn               = &tdriverConn269{}
	_ driver.ConnBeginTx        = &tdriverConn269{}
	_ driver.ConnPrepareContext = &tdriverConn269{}
	_ driver.Execer             = &tdriverConn269{}
	_ driver.Queryer            = &tdriverConn269{}
	_ driver.SessionResetter    = &tdriverConn269{}
	_ driver.Conn               = &tdriverConn270{}
	_ driver.ConnBeginTx        = &tdriverConn270{}
	_ driver.ConnPrepareContext = &tdriverConn270{}
	_ driver.Execer             = &tdriverConn270{}
	_ driver.QueryerContext     = &tdriverConn270{}
	_ driver.SessionResetter    = &tdriverConn270{}
	_ driver.Conn               = &tdriverConn271{}
	_ driver.ConnBeginTx        = &tdriverConn271{}
	_ driver.ConnPrepareContext = &tdriverConn271{}
	_ driver.ExecerContext      = &tdriverConn271{}
	_ driver.NamedValueChecker  = &tdriverConn271{}
	_ driver.Pinger             = &tdriverConn271{}
	_ driver.Conn               = &tdriverConn272{}
	_ driver.ConnBeginTx        = &tdriverConn272{}
	_ driver.ConnPrepareContext = &tdriverConn272{}
	_ driver.ExecerContext      = &tdriverConn272{}
	_ driver.NamedValueChecker  = &tdriverConn272{}
	_ driver.Queryer            = &tdriverConn272{}
	_ driver.Conn               = &tdriverConn273{}
	_ driver.ConnBeginTx        = &tdriverConn273{}
	_ driver.ConnPrepareContext = &tdriverConn273{}
	_ driver.ExecerContext      = &tdriverConn273{}
	_ driver.NamedValueChecker  = &tdriverConn273{}
	_ driver.QueryerContext     = &tdriverConn273{}
	_ driver.Conn               = &tdriverConn274{}
	_ driver.ConnBeginTx        = &tdriverConn274{}
	_ driver.ConnPrepareContext = &tdriverConn274{}
	_ driver.ExecerContext      = &tdriverConn274{}
	_ driver.NamedValueChecker  = &tdriverConn274{}
	_ driver.SessionResetter    = &tdriverConn274{}
	_ driver.Conn               = &tdriverConn275{}
	_ driver.ConnBeginTx        = &tdriverConn275{}
	_ driver.ConnPrepareContext = &tdriverConn275{}
	_ driver.ExecerContext      = &tdriverConn275{}
	_ driver.Pinger             = &tdriverConn275{}
	_ driver.Queryer            = &tdriverConn275{}
	_ driver.Conn               = &tdriverConn276{}
	_ driver.ConnBeginTx        = &tdriverConn276{}
	_ driver.ConnPrepareContext = &tdriverConn276{}
	_ driver.ExecerContext      = &tdriverConn276{}
	_ driver.Pinger             = &tdriverConn276{}
	_ driver.QueryerContext     = &tdriverConn276{}
	_ driver.Conn               = &tdriverConn277{}
	_ driver.ConnBeginTx        = &tdriverConn277{}
	_ driver.ConnPrepareContext = &tdriverConn277{}
	_ driver.ExecerContext      = &tdriverConn277{}
	_ driver.Pinger             = &tdriverConn277{}
	_ driver.SessionResetter    = &tdriverConn277{}
	_ driver.Conn               = &tdriverConn278{}
	_ driver.ConnBeginTx        = &tdriverConn278{}
	_ driver.ConnPrepareContext = &tdriverConn278{}
	_ driver.ExecerContext      = &tdriverConn278{}
	_ driver.Queryer            = &tdriverConn278{}
	_ driver.QueryerContext     = &tdriverConn278{}
	_ driver.Conn               = &tdriverConn279{}
	_ driver.ConnBeginTx        = &tdriverConn279{}
	_ driver.ConnPrepareContext = &tdriverConn279{}
	_ driver.ExecerContext      = &tdriverConn279{}
	_ driver.Queryer            = &tdriverConn279{}
	_ driver.SessionResetter    = &tdriverConn279{}
	_ driver.Conn               = &tdriverConn280{}
	_ driver.ConnBeginTx        = &tdriverConn280{}
	_ driver.ConnPrepareContext = &tdriverConn280{}
	_ driver.ExecerContext      = &tdriverConn280{}
	_ driver.QueryerContext     = &tdriverConn280{}
	_ driver.SessionResetter    = &tdriverConn280{}
	_ driver.Conn               = &tdriverConn281{}
	_ driver.ConnBeginTx        = &tdriverConn281{}
	_ driver.ConnPrepareContext = &tdriverConn281{}
	_ driver.NamedValueChecker  = &tdriverConn281{}
	_ driver.Pinger             = &tdriverConn281{}
	_ driver.Queryer            = &tdriverConn281{}
	_ driver.Conn               = &tdriverConn282{}
	_ driver.ConnBeginTx        = &tdriverConn282{}
	_ driver.ConnPrepareContext = &tdriverConn282{}
	_ driver.NamedValueChecker  = &tdriverConn282{}
	_ driver.Pinger             = &tdriverConn282{}
	_ driver.QueryerContext     = &tdriverConn282{}
	_ driver.Conn               = &tdriverConn283{}
	_ driver.ConnBeginTx        = &tdriverConn283{}
	_ driver.ConnPrepareContext = &tdriverConn283{}
	_ driver.NamedValueChecker  = &tdriverConn283{}
	_ driver.Pinger             = &tdriverConn283{}
	_ driver.SessionResetter    = &tdriverConn283{}
	_ driver.Conn               = &tdriverConn284{}
	_ driver.ConnBeginTx        = &tdriverConn284{}
	_ driver.ConnPrepareContext = &tdriverConn284{}
	_ driver.NamedValueChecker  = &tdriverConn284{}
	_ driver.Queryer            = &tdriverConn284{}
	_ driver.QueryerContext     = &tdriverConn284{}
	_ driver.Conn               = &tdriverConn285{}
	_ driver.ConnBeginTx        = &tdriverConn285{}
	_ driver.ConnPrepareContext = &tdriverConn285{}
	_ driver.NamedValueChecker  = &tdriverConn285{}
	_ driver.Queryer            = &tdriverConn285{}
	_ driver.SessionResetter    = &tdriverConn285{}
	_ driver.Conn               = &tdriverConn286{}
	_ driver.ConnBeginTx        = &tdriverConn286{}
	_ driver.ConnPrepareContext = &tdriverConn286{}
	_ driver.NamedValueChecker  = &tdriverConn286{}
	_ driver.QueryerContext     = &tdriverConn286{}
	_ driver.SessionResetter    = &tdriverConn286{}
	_ driver.Conn               = &tdriverConn287{}
	_ driver.ConnBeginTx        = &tdriverConn287{}
	_ driver.ConnPrepareContext = &tdriverConn287{}
	_ driver.Pinger             = &tdriverConn287{}
	_ driver.Queryer            = &tdriverConn287{}
	_ driver.QueryerContext     = &tdriverConn287{}
	_ driver.Conn               = &tdriverConn288{}
	_ driver.ConnBeginTx        = &tdriverConn288{}
	_ driver.ConnPrepareContext = &tdriverConn288{}
	_ driver.Pinger             = &tdriverConn288{}
	_ driver.Queryer            = &tdriverConn288{}
	_ driver.SessionResetter    = &tdriverConn288{}
	_ driver.Conn               = &tdriverConn289{}
	_ driver.ConnBeginTx        = &tdriverConn289{}
	_ driver.ConnPrepareContext = &tdriverConn289{}
	_ driver.Pinger             = &tdriverConn289{}
	_ driver.QueryerContext     = &tdriverConn289{}
	_ driver.SessionResetter    = &tdriverConn289{}
	_ driver.Conn               = &tdriverConn290{}
	_ driver.ConnBeginTx        = &tdriverConn290{}
	_ driver.ConnPrepareContext = &tdriverConn290{}
	_ driver.Queryer            = &tdriverConn290{}
	_ driver.QueryerContext     = &tdriverConn290{}
	_ driver.SessionResetter    = &tdriverConn290{}
	_ driver.Conn               = &tdriverConn291{}
	_ driver.ConnBeginTx        = &tdriverConn291{}
	_ driver.Execer             = &tdriverConn291{}
	_ driver.ExecerContext      = &tdriverConn291{}
	_ driver.NamedValueChecker  = &tdriverConn291{}
	_ driver.Pinger             = &tdriverConn291{}
	_ driver.Conn               = &tdriverConn292{}
	_ driver.ConnBeginTx        = &tdriverConn292{}
	_ driver.Execer             = &tdriverConn292{}
	_ driver.ExecerContext      = &tdriverConn292{}
	_ driver.NamedValueChecker  = &tdriverConn292{}
	_ driver.Queryer            = &tdriverConn292{}
	_ driver.Conn               = &tdriverConn293{}
	_ driver.ConnBeginTx        = &tdriverConn293{}
	_ driver.Execer             = &tdriverConn293{}
	_ driver.ExecerContext      = &tdriverConn293{}
	_ driver.NamedValueChecker  = &tdriverConn293{}
	_ driver.QueryerContext     = &tdriverConn293{}
	_ driver.Conn               = &tdriverConn294{}
	_ driver.ConnBeginTx        = &tdriverConn294{}
	_ driver.Execer             = &tdriverConn294{}
	_ driver.ExecerContext      = &tdriverConn294{}
	_ driver.NamedValueChecker  = &tdriverConn294{}
	_ driver.SessionResetter    = &tdriverConn294{}
	_ driver.Conn               = &tdriverConn295{}
	_ driver.ConnBeginTx        = &tdriverConn295{}
	_ driver.Execer             = &tdriverConn295{}
	_ driver.ExecerContext      = &tdriverConn295{}
	_ driver.Pinger             = &tdriverConn295{}
	_ driver.Queryer            = &tdriverConn295{}
	_ driver.Conn               = &tdriverConn296{}
	_ driver.ConnBeginTx        = &tdriverConn296{}
	_ driver.Execer             = &tdriverConn296{}
	_ driver.ExecerContext      = &tdriverConn296{}
	_ driver.Pinger             = &tdriverConn296{}
	_ driver.QueryerContext     = &tdriverConn296{}
	_ driver.Conn               = &tdriverConn297{}
	_ driver.ConnBeginTx        = &tdriverConn297{}
	_ driver.Execer             = &tdriverConn297{}
	_ driver.ExecerContext      = &tdriverConn297{}
	_ driver.Pinger             = &tdriverConn297{}
	_ driver.SessionResetter    = &tdriverConn297{}
	_ driver.Conn               = &tdriverConn298{}
	_ driver.ConnBeginTx        = &tdriverConn298{}
	_ driver.Execer             = &tdriverConn298{}
	_ driver.ExecerContext      = &tdriverConn298{}
	_ driver.Queryer            = &tdriverConn298{}
	_ driver.QueryerContext     = &tdriverConn298{}
	_ driver.Conn               = &tdriverConn299{}
	_ driver.ConnBeginTx        = &tdriverConn299{}
	_ driver.Execer             = &tdriverConn299{}
	_ driver.ExecerContext      = &tdriverConn299{}
	_ driver.Queryer            = &tdriverConn299{}
	_ driver.SessionResetter    = &tdriverConn299{}
	_ driver.Conn               = &tdriverConn300{}
	_ driver.ConnBeginTx        = &tdriverConn300{}
	_ driver.Execer             = &tdriverConn300{}
	_ driver.ExecerContext      = &tdriverConn300{}
	_ driver.QueryerContext     = &tdriverConn300{}
	_ driver.SessionResetter    = &tdriverConn300{}
	_ driver.Conn               = &tdriverConn301{}
	_ driver.ConnBeginTx        = &tdriverConn301{}
	_ driver.Execer             = &tdriverConn301{}
	_ driver.NamedValueChecker  = &tdriverConn301{}
	_ driver.Pinger             = &tdriverConn301{}
	_ driver.Queryer            = &tdriverConn301{}
	_ driver.Conn               = &tdriverConn302{}
	_ driver.ConnBeginTx        = &tdriverConn302{}
	_ driver.Execer             = &tdriverConn302{}
	_ driver.NamedValueChecker  = &tdriverConn302{}
	_ driver.Pinger             = &tdriverConn302{}
	_ driver.QueryerContext     = &tdriverConn302{}
	_ driver.Conn               = &tdriverConn303{}
	_ driver.ConnBeginTx        = &tdriverConn303{}
	_ driver.Execer             = &tdriverConn303{}
	_ driver.NamedValueChecker  = &tdriverConn303{}
	_ driver.Pinger             = &tdriverConn303{}
	_ driver.SessionResetter    = &tdriverConn303{}
	_ driver.Conn               = &tdriverConn304{}
	_ driver.ConnBeginTx        = &tdriverConn304{}
	_ driver.Execer             = &tdriverConn304{}
	_ driver.NamedValueChecker  = &tdriverConn304{}
	_ driver.Queryer            = &tdriverConn304{}
	_ driver.QueryerContext     = &tdriverConn304{}
	_ driver.Conn               = &tdriverConn305{}
	_ driver.ConnBeginTx        = &tdriverConn305{}
	_ driver.Execer             = &tdriverConn305{}
	_ driver.NamedValueChecker  = &tdriverConn305{}
	_ driver.Queryer            = &tdriverConn305{}
	_ driver.SessionResetter    = &tdriverConn305{}
	_ driver.Conn               = &tdriverConn306{}
	_ driver.ConnBeginTx        = &tdriverConn306{}
	_ driver.Execer             = &tdriverConn306{}
	_ driver.NamedValueChecker  = &tdriverConn306{}
	_ driver.QueryerContext     = &tdriverConn306{}
	_ driver.SessionResetter    = &tdriverConn306{}
	_ driver.Conn               = &tdriverConn307{}
	_ driver.ConnBeginTx        = &tdriverConn307{}
	_ driver.Execer             = &tdriverConn307{}
	_ driver.Pinger             = &tdriverConn307{}
	_ driver.Queryer            = &tdriverConn307{}
	_ driver.QueryerContext     = &tdriverConn307{}
	_ driver.Conn               = &tdriverConn308{}
	_ driver.ConnBeginTx        = &tdriverConn308{}
	_ driver.Execer             = &tdriverConn308{}
	_ driver.Pinger             = &tdriverConn308{}
	_ driver.Queryer            = &tdriverConn308{}
	_ driver.SessionResetter    = &tdriverConn308{}
	_ driver.Conn               = &tdriverConn309{}
	_ driver.ConnBeginTx        = &tdriverConn309{}
	_ driver.Execer             = &tdriverConn309{}
	_ driver.Pinger             = &tdriverConn309{}
	_ driver.QueryerContext     = &tdriverConn309{}
	_ driver.SessionResetter    = &tdriverConn309{}
	_ driver.Conn               = &tdriverConn310{}
	_ driver.ConnBeginTx        = &tdriverConn310{}
	_ driver.Execer             = &tdriverConn310{}
	_ driver.Queryer            = &tdriverConn310{}
	_ driver.QueryerContext     = &tdriverConn310{}
	_ driver.SessionResetter    = &tdriverConn310{}
	_ driver.Conn               = &tdriverConn311{}
	_ driver.ConnBeginTx        = &tdriverConn311{}
	_ driver.ExecerContext      = &tdriverConn311{}
	_ driver.NamedValueChecker  = &tdriverConn311{}
	_ driver.Pinger             = &tdriverConn311{}
	_ driver.Queryer            = &tdriverConn311{}
	_ driver.Conn               = &tdriverConn312{}
	_ driver.ConnBeginTx        = &tdriverConn312{}
	_ driver.ExecerContext      = &tdriverConn312{}
	_ driver.NamedValueChecker  = &tdriverConn312{}
	_ driver.Pinger             = &tdriverConn312{}
	_ driver.QueryerContext     = &tdriverConn312{}
	_ driver.Conn               = &tdriverConn313{}
	_ driver.ConnBeginTx        = &tdriverConn313{}
	_ driver.ExecerContext      = &tdriverConn313{}
	_ driver.NamedValueChecker  = &tdriverConn313{}
	_ driver.Pinger             = &tdriverConn313{}
	_ driver.SessionResetter    = &tdriverConn313{}
	_ driver.Conn               = &tdriverConn314{}
	_ driver.ConnBeginTx        = &tdriverConn314{}
	_ driver.ExecerContext      = &tdriverConn314{}
	_ driver.NamedValueChecker  = &tdriverConn314{}
	_ driver.Queryer            = &tdriverConn314{}
	_ driver.QueryerContext     = &tdriverConn314{}
	_ driver.Conn               = &tdriverConn315{}
	_ driver.ConnBeginTx        = &tdriverConn315{}
	_ driver.ExecerContext      = &tdriverConn315{}
	_ driver.NamedValueChecker  = &tdriverConn315{}
	_ driver.Queryer            = &tdriverConn315{}
	_ driver.SessionResetter    = &tdriverConn315{}
	_ driver.Conn               = &tdriverConn316{}
	_ driver.ConnBeginTx        = &tdriverConn316{}
	_ driver.ExecerContext      = &tdriverConn316{}
	_ driver.NamedValueChecker  = &tdriverConn316{}
	_ driver.QueryerContext     = &tdriverConn316{}
	_ driver.SessionResetter    = &tdriverConn316{}
	_ driver.Conn               = &tdriverConn317{}
	_ driver.ConnBeginTx        = &tdriverConn317{}
	_ driver.ExecerContext      = &tdriverConn317{}
	_ driver.Pinger             = &tdriverConn317{}
	_ driver.Queryer            = &tdriverConn317{}
	_ driver.QueryerContext     = &tdriverConn317{}
	_ driver.Conn               = &tdriverConn318{}
	_ driver.ConnBeginTx        = &tdriverConn318{}
	_ driver.ExecerContext      = &tdriverConn318{}
	_ driver.Pinger             = &tdriverConn318{}
	_ driver.Queryer            = &tdriverConn318{}
	_ driver.SessionResetter    = &tdriverConn318{}
	_ driver.Conn               = &tdriverConn319{}
	_ driver.ConnBeginTx        = &tdriverConn319{}
	_ driver.ExecerContext      = &tdriverConn319{}
	_ driver.Pinger             = &tdriverConn319{}
	_ driver.QueryerContext     = &tdriverConn319{}
	_ driver.SessionResetter    = &tdriverConn319{}
	_ driver.Conn               = &tdriverConn320{}
	_ driver.ConnBeginTx        = &tdriverConn320{}
	_ driver.ExecerContext      = &tdriverConn320{}
	_ driver.Queryer            = &tdriverConn320{}
	_ driver.QueryerContext     = &tdriverConn320{}
	_ driver.SessionResetter    = &tdriverConn320{}
	_ driver.Conn               = &tdriverConn321{}
	_ driver.ConnBeginTx        = &tdriverConn321{}
	_ driver.NamedValueChecker  = &tdriverConn321{}
	_ driver.Pinger             = &tdriverConn321{}
	_ driver.Queryer            = &tdriverConn321{}
	_ driver.QueryerContext     = &tdriverConn321{}
	_ driver.Conn               = &tdriverConn322{}
	_ driver.ConnBeginTx        = &tdriverConn322{}
	_ driver.NamedValueChecker  = &tdriverConn322{}
	_ driver.Pinger             = &tdriverConn322{}
	_ driver.Queryer            = &tdriverConn322{}
	_ driver.SessionResetter    = &tdriverConn322{}
	_ driver.Conn               = &tdriverConn323{}
	_ driver.ConnBeginTx        = &tdriverConn323{}
	_ driver.NamedValueChecker  = &tdriverConn323{}
	_ driver.Pinger             = &tdriverConn323{}
	_ driver.QueryerContext     = &tdriverConn323{}
	_ driver.SessionResetter    = &tdriverConn323{}
	_ driver.Conn               = &tdriverConn324{}
	_ driver.ConnBeginTx        = &tdriverConn324{}
	_ driver.NamedValueChecker  = &tdriverConn324{}
	_ driver.Queryer            = &tdriverConn324{}
	_ driver.QueryerContext     = &tdriverConn324{}
	_ driver.SessionResetter    = &tdriverConn324{}
	_ driver.Conn               = &tdriverConn325{}
	_ driver.ConnBeginTx        = &tdriverConn325{}
	_ driver.Pinger             = &tdriverConn325{}
	_ driver.Queryer            = &tdriverConn325{}
	_ driver.QueryerContext     = &tdriverConn325{}
	_ driver.SessionResetter    = &tdriverConn325{}
	_ driver.Conn               = &tdriverConn326{}
	_ driver.ConnPrepareContext = &tdriverConn326{}
	_ driver.Execer             = &tdriverConn326{}
	_ driver.ExecerContext      = &tdriverConn326{}
	_ driver.NamedValueChecker  = &tdriverConn326{}
	_ driver.Pinger             = &tdriverConn326{}
	_ driver.Conn               = &tdriverConn327{}
	_ driver.ConnPrepareContext = &tdriverConn327{}
	_ driver.Execer             = &tdriverConn327{}
	_ driver.ExecerContext      = &tdriverConn327{}
	_ driver.NamedValueChecker  = &tdriverConn327{}
	_ driver.Queryer            = &tdriverConn327{}
	_ driver.Conn               = &tdriverConn328{}
	_ driver.ConnPrepareContext = &tdriverConn328{}
	_ driver.Execer             = &tdriverConn328{}
	_ driver.ExecerContext      = &tdriverConn328{}
	_ driver.NamedValueChecker  = &tdriverConn328{}
	_ driver.QueryerContext     = &tdriverConn328{}
	_ driver.Conn               = &tdriverConn329{}
	_ driver.ConnPrepareContext = &tdriverConn329{}
	_ driver.Execer             = &tdriverConn329{}
	_ driver.ExecerContext      = &tdriverConn329{}
	_ driver.NamedValueChecker  = &tdriverConn329{}
	_ driver.SessionResetter    = &tdriverConn329{}
	_ driver.Conn               = &tdriverConn330{}
	_ driver.ConnPrepareContext = &tdriverConn330{}
	_ driver.Execer             = &tdriverConn330{}
	_ driver.ExecerContext      = &tdriverConn330{}
	_ driver.Pinger             = &tdriverConn330{}
	_ driver.Queryer            = &tdriverConn330{}
	_ driver.Conn               = &tdriverConn331{}
	_ driver.ConnPrepareContext = &tdriverConn331{}
	_ driver.Execer             = &tdriverConn331{}
	_ driver.ExecerContext      = &tdriverConn331{}
	_ driver.Pinger             = &tdriverConn331{}
	_ driver.QueryerContext     = &tdriverConn331{}
	_ driver.Conn               = &tdriverConn332{}
	_ driver.ConnPrepareContext = &tdriverConn332{}
	_ driver.Execer             = &tdriverConn332{}
	_ driver.ExecerContext      = &tdriverConn332{}
	_ driver.Pinger             = &tdriverConn332{}
	_ driver.SessionResetter    = &tdriverConn332{}
	_ driver.Conn               = &tdriverConn333{}
	_ driver.ConnPrepareContext = &tdriverConn333{}
	_ driver.Execer             = &tdriverConn333{}
	_ driver.ExecerContext      = &tdriverConn333{}
	_ driver.Queryer            = &tdriverConn333{}
	_ driver.QueryerContext     = &tdriverConn333{}
	_ driver.Conn               = &tdriverConn334{}
	_ driver.ConnPrepareContext = &tdriverConn334{}
	_ driver.Execer             = &tdriverConn334{}
	_ driver.ExecerContext      = &tdriverConn334{}
	_ driver.Queryer            = &tdriverConn334{}
	_ driver.SessionResetter    = &tdriverConn334{}
	_ driver.Conn               = &tdriverConn335{}
	_ driver.ConnPrepareContext = &tdriverConn335{}
	_ driver.Execer             = &tdriverConn335{}
	_ driver.ExecerContext      = &tdriverConn335{}
	_ driver.QueryerContext     = &tdriverConn335{}
	_ driver.SessionResetter    = &tdriverConn335{}
	_ driver.Conn               = &tdriverConn336{}
	_ driver.ConnPrepareContext = &tdriverConn336{}
	_ driver.Execer             = &tdriverConn336{}
	_ driver.NamedValueChecker  = &tdriverConn336{}
	_ driver.Pinger             = &tdriverConn336{}
	_ driver.Queryer            = &tdriverConn336{}
	_ driver.Conn               = &tdriverConn337{}
	_ driver.ConnPrepareContext = &tdriverConn337{}
	_ driver.Execer             = &tdriverConn337{}
	_ driver.NamedValueChecker  = &tdriverConn337{}
	_ driver.Pinger             = &tdriverConn337{}
	_ driver.QueryerContext     = &tdriverConn337{}
	_ driver.Conn               = &tdriverConn338{}
	_ driver.ConnPrepareContext = &tdriverConn338{}
	_ driver.Execer             = &tdriverConn338{}
	_ driver.NamedValueChecker  = &tdriverConn338{}
	_ driver.Pinger             = &tdriverConn338{}
	_ driver.SessionResetter    = &tdriverConn338{}
	_ driver.Conn               = &tdriverConn339{}
	_ driver.ConnPrepareContext = &tdriverConn339{}
	_ driver.Execer             = &tdriverConn339{}
	_ driver.NamedValueChecker  = &tdriverConn339{}
	_ driver.Queryer            = &tdriverConn339{}
	_ driver.QueryerContext     = &tdriverConn339{}
	_ driver.Conn               = &tdriverConn340{}
	_ driver.ConnPrepareContext = &tdriverConn340{}
	_ driver.Execer             = &tdriverConn340{}
	_ driver.NamedValueChecker  = &tdriverConn340{}
	_ driver.Queryer            = &tdriverConn340{}
	_ driver.SessionResetter    = &tdriverConn340{}
	_ driver.Conn               = &tdriverConn341{}
	_ driver.ConnPrepareContext = &tdriverConn341{}
	_ driver.Execer             = &tdriverConn341{}
	_ driver.NamedValueChecker  = &tdriverConn341{}
	_ driver.QueryerContext     = &tdriverConn341{}
	_ driver.SessionResetter    = &tdriverConn341{}
	_ driver.Conn               = &tdriverConn342{}
	_ driver.ConnPrepareContext = &tdriverConn342{}
	_ driver.Execer             = &tdriverConn342{}
	_ driver.Pinger             = &tdriverConn342{}
	_ driver.Queryer            = &tdriverConn342{}
	_ driver.QueryerContext     = &tdriverConn342{}
	_ driver.Conn               = &tdriverConn343{}
	_ driver.ConnPrepareContext = &tdriverConn343{}
	_ driver.Execer             = &tdriverConn343{}
	_ driver.Pinger             = &tdriverConn343{}
	_ driver.Queryer            = &tdriverConn343{}
	_ driver.SessionResetter    = &tdriverConn343{}
	_ driver.Conn               = &tdriverConn344{}
	_ driver.ConnPrepareContext = &tdriverConn344{}
	_ driver.Execer             = &tdriverConn344{}
	_ driver.Pinger             = &tdriverConn344{}
	_ driver.QueryerContext     = &tdriverConn344{}
	_ driver.SessionResetter    = &tdriverConn344{}
	_ driver.Conn               = &tdriverConn345{}
	_ driver.ConnPrepareContext = &tdriverConn345{}
	_ driver.Execer             = &tdriverConn345{}
	_ driver.Queryer            = &tdriverConn345{}
	_ driver.QueryerContext     = &tdriverConn345{}
	_ driver.SessionResetter    = &tdriverConn345{}
	_ driver.Conn               = &tdriverConn346{}
	_ driver.ConnPrepareContext = &tdriverConn346{}
	_ driver.ExecerContext      = &tdriverConn346{}
	_ driver.NamedValueChecker  = &tdriverConn346{}
	_ driver.Pinger             = &tdriverConn346{}
	_ driver.Queryer            = &tdriverConn346{}
	_ driver.Conn               = &tdriverConn347{}
	_ driver.ConnPrepareContext = &tdriverConn347{}
	_ driver.ExecerContext      = &tdriverConn347{}
	_ driver.NamedValueChecker  = &tdriverConn347{}
	_ driver.Pinger             = &tdriverConn347{}
	_ driver.QueryerContext     = &tdriverConn347{}
	_ driver.Conn               = &tdriverConn348{}
	_ driver.ConnPrepareContext = &tdriverConn348{}
	_ driver.ExecerContext      = &tdriverConn348{}
	_ driver.NamedValueChecker  = &tdriverConn348{}
	_ driver.Pinger             = &tdriverConn348{}
	_ driver.SessionResetter    = &tdriverConn348{}
	_ driver.Conn               = &tdriverConn349{}
	_ driver.ConnPrepareContext = &tdriverConn349{}
	_ driver.ExecerContext      = &tdriverConn349{}
	_ driver.NamedValueChecker  = &tdriverConn349{}
	_ driver.Queryer            = &tdriverConn349{}
	_ driver.QueryerContext     = &tdriverConn349{}
	_ driver.Conn               = &tdriverConn350{}
	_ driver.ConnPrepareContext = &tdriverConn350{}
	_ driver.ExecerContext      = &tdriverConn350{}
	_ driver.NamedValueChecker  = &tdriverConn350{}
	_ driver.Queryer            = &tdriverConn350{}
	_ driver.SessionResetter    = &tdriverConn350{}
	_ driver.Conn               = &tdriverConn351{}
	_ driver.ConnPrepareContext = &tdriverConn351{}
	_ driver.ExecerContext      = &tdriverConn351{}
	_ driver.NamedValueChecker  = &tdriverConn351{}
	_ driver.QueryerContext     = &tdriverConn351{}
	_ driver.SessionResetter    = &tdriverConn351{}
	_ driver.Conn               = &tdriverConn352{}
	_ driver.ConnPrepareContext = &tdriverConn352{}
	_ driver.ExecerContext      = &tdriverConn352{}
	_ driver.Pinger             = &tdriverConn352{}
	_ driver.Queryer            = &tdriverConn352{}
	_ driver.QueryerContext     = &tdriverConn352{}
	_ driver.Conn               = &tdriverConn353{}
	_ driver.ConnPrepareContext = &tdriverConn353{}
	_ driver.ExecerContext      = &tdriverConn353{}
	_ driver.Pinger             = &tdriverConn353{}
	_ driver.Queryer            = &tdriverConn353{}
	_ driver.SessionResetter    = &tdriverConn353{}
	_ driver.Conn               = &tdriverConn354{}
	_ driver.ConnPrepareContext = &tdriverConn354{}
	_ driver.ExecerContext      = &tdriverConn354{}
	_ driver.Pinger             = &tdriverConn354{}
	_ driver.QueryerContext     = &tdriverConn354{}
	_ driver.SessionResetter    = &tdriverConn354{}
	_ driver.Conn               = &tdriverConn355{}
	_ driver.ConnPrepareContext = &tdriverConn355{}
	_ driver.ExecerContext      = &tdriverConn355{}
	_ driver.Queryer            = &tdriverConn355{}
	_ driver.QueryerContext     = &tdriverConn355{}
	_ driver.SessionResetter    = &tdriverConn355{}
	_ driver.Conn               = &tdriverConn356{}
	_ driver.ConnPrepareContext = &tdriverConn356{}
	_ driver.NamedValueChecker  = &tdriverConn356{}
	_ driver.Pinger             = &tdriverConn356{}
	_ driver.Queryer            = &tdriverConn356{}
	_ driver.QueryerContext     = &tdriverConn356{}
	_ driver.Conn               = &tdriverConn357{}
	_ driver.ConnPrepareContext = &tdriverConn357{}
	_ driver.NamedValueChecker  = &tdriverConn357{}
	_ driver.Pinger             = &tdriverConn357{}
	_ driver.Queryer            = &tdriverConn357{}
	_ driver.SessionResetter    = &tdriverConn357{}
	_ driver.Conn               = &tdriverConn358{}
	_ driver.ConnPrepareContext = &tdriverConn358{}
	_ driver.NamedValueChecker  = &tdriverConn358{}
	_ driver.Pinger             = &tdriverConn358{}
	_ driver.QueryerContext     = &tdriverConn358{}
	_ driver.SessionResetter    = &tdriverConn358{}
	_ driver.Conn               = &tdriverConn359{}
	_ driver.ConnPrepareContext = &tdriverConn359{}
	_ driver.NamedValueChecker  = &tdriverConn359{}
	_ driver.Queryer            = &tdriverConn359{}
	_ driver.QueryerContext     = &tdriverConn359{}
	_ driver.SessionResetter    = &tdriverConn359{}
	_ driver.Conn               = &tdriverConn360{}
	_ driver.ConnPrepareContext = &tdriverConn360{}
	_ driver.Pinger             = &tdriverConn360{}
	_ driver.Queryer            = &tdriverConn360{}
	_ driver.QueryerContext     = &tdriverConn360{}
	_ driver.SessionResetter    = &tdriverConn360{}
	_ driver.Conn               = &tdriverConn361{}
	_ driver.Execer             = &tdriverConn361{}
	_ driver.ExecerContext      = &tdriverConn361{}
	_ driver.NamedValueChecker  = &tdriverConn361{}
	_ driver.Pinger             = &tdriverConn361{}
	_ driver.Queryer            = &tdriverConn361{}
	_ driver.Conn               = &tdriverConn362{}
	_ driver.Execer             = &tdriverConn362{}
	_ driver.ExecerContext      = &tdriverConn362{}
	_ driver.NamedValueChecker  = &tdriverConn362{}
	_ driver.Pinger             = &tdriverConn362{}
	_ driver.QueryerContext     = &tdriverConn362{}
	_ driver.Conn               = &tdriverConn363{}
	_ driver.Execer             = &tdriverConn363{}
	_ driver.ExecerContext      = &tdriverConn363{}
	_ driver.NamedValueChecker  = &tdriverConn363{}
	_ driver.Pinger             = &tdriverConn363{}
	_ driver.SessionResetter    = &tdriverConn363{}
	_ driver.Conn               = &tdriverConn364{}
	_ driver.Execer             = &tdriverConn364{}
	_ driver.ExecerContext      = &tdriverConn364{}
	_ driver.NamedValueChecker  = &tdriverConn364{}
	_ driver.Queryer            = &tdriverConn364{}
	_ driver.QueryerContext     = &tdriverConn364{}
	_ driver.Conn               = &tdriverConn365{}
	_ driver.Execer             = &tdriverConn365{}
	_ driver.ExecerContext      = &tdriverConn365{}
	_ driver.NamedValueChecker  = &tdriverConn365{}
	_ driver.Queryer            = &tdriverConn365{}
	_ driver.SessionResetter    = &tdriverConn365{}
	_ driver.Conn               = &tdriverConn366{}
	_ driver.Execer             = &tdriverConn366{}
	_ driver.ExecerContext      = &tdriverConn366{}
	_ driver.NamedValueChecker  = &tdriverConn366{}
	_ driver.QueryerContext     = &tdriverConn366{}
	_ driver.SessionResetter    = &tdriverConn366{}
	_ driver.Conn               = &tdriverConn367{}
	_ driver.Execer             = &tdriverConn367{}
	_ driver.ExecerContext      = &tdriverConn367{}
	_ driver.Pinger             = &tdriverConn367{}
	_ driver.Queryer            = &tdriverConn367{}
	_ driver.QueryerContext     = &tdriverConn367{}
	_ driver.Conn               = &tdriverConn368{}
	_ driver.Execer             = &tdriverConn368{}
	_ driver.ExecerContext      = &tdriverConn368{}
	_ driver.Pinger             = &tdriverConn368{}
	_ driver.Queryer            = &tdriverConn368{}
	_ driver.SessionResetter    = &tdriverConn368{}
	_ driver.Conn               = &tdriverConn369{}
	_ driver.Execer             = &tdriverConn369{}
	_ driver.ExecerContext      = &tdriverConn369{}
	_ driver.Pinger             = &tdriverConn369{}
	_ driver.QueryerContext     = &tdriverConn369{}
	_ driver.SessionResetter    = &tdriverConn369{}
	_ driver.Conn               = &tdriverConn370{}
	_ driver.Execer             = &tdriverConn370{}
	_ driver.ExecerContext      = &tdriverConn370{}
	_ driver.Queryer            = &tdriverConn370{}
	_ driver.QueryerContext     = &tdriverConn370{}
	_ driver.SessionResetter    = &tdriverConn370{}
	_ driver.Conn               = &tdriverConn371{}
	_ driver.Execer             = &tdriverConn371{}
	_ driver.NamedValueChecker  = &tdriverConn371{}
	_ driver.Pinger             = &tdriverConn371{}
	_ driver.Queryer            = &tdriverConn371{}
	_ driver.QueryerContext     = &tdriverConn371{}
	_ driver.Conn               = &tdriverConn372{}
	_ driver.Execer             = &tdriverConn372{}
	_ driver.NamedValueChecker  = &tdriverConn372{}
	_ driver.Pinger             = &tdriverConn372{}
	_ driver.Queryer            = &tdriverConn372{}
	_ driver.SessionResetter    = &tdriverConn372{}
	_ driver.Conn               = &tdriverConn373{}
	_ driver.Execer             = &tdriverConn373{}
	_ driver.NamedValueChecker  = &tdriverConn373{}
	_ driver.Pinger             = &tdriverConn373{}
	_ driver.QueryerContext     = &tdriverConn373{}
	_ driver.SessionResetter    = &tdriverConn373{}
	_ driver.Conn               = &tdriverConn374{}
	_ driver.Execer             = &tdriverConn374{}
	_ driver.NamedValueChecker  = &tdriverConn374{}
	_ driver.Queryer            = &tdriverConn374{}
	_ driver.QueryerContext     = &tdriverConn374{}
	_ driver.SessionResetter    = &tdriverConn374{}
	_ driver.Conn               = &tdriverConn375{}
	_ driver.Execer             = &tdriverConn375{}
	_ driver.Pinger             = &tdriverConn375{}
	_ driver.Queryer            = &tdriverConn375{}
	_ driver.QueryerContext     = &tdriverConn375{}
	_ driver.SessionResetter    = &tdriverConn375{}
	_ driver.Conn               = &tdriverConn376{}
	_ driver.ExecerContext      = &tdriverConn376{}
	_ driver.NamedValueChecker  = &tdriverConn376{}
	_ driver.Pinger             = &tdriverConn376{}
	_ driver.Queryer            = &tdriverConn376{}
	_ driver.QueryerContext     = &tdriverConn376{}
	_ driver.Conn               = &tdriverConn377{}
	_ driver.ExecerContext      = &tdriverConn377{}
	_ driver.NamedValueChecker  = &tdriverConn377{}
	_ driver.Pinger             = &tdriverConn377{}
	_ driver.Queryer            = &tdriverConn377{}
	_ driver.SessionResetter    = &tdriverConn377{}
	_ driver.Conn               = &tdriverConn378{}
	_ driver.ExecerContext      = &tdriverConn378{}
	_ driver.NamedValueChecker  = &tdriverConn378{}
	_ driver.Pinger             = &tdriverConn378{}
	_ driver.QueryerContext     = &tdriverConn378{}
	_ driver.SessionResetter    = &tdriverConn378{}
	_ driver.Conn               = &tdriverConn379{}
	_ driver.ExecerContext      = &tdriverConn379{}
	_ driver.NamedValueChecker  = &tdriverConn379{}
	_ driver.Queryer            = &tdriverConn379{}
	_ driver.QueryerContext     = &tdriverConn379{}
	_ driver.SessionResetter    = &tdriverConn379{}
	_ driver.Conn               = &tdriverConn380{}
	_ driver.ExecerContext      = &tdriverConn380{}
	_ driver.Pinger             = &tdriverConn380{}
	_ driver.Queryer            = &tdriverConn380{}
	_ driver.QueryerContext     = &tdriverConn380{}
	_ driver.SessionResetter    = &tdriverConn380{}
	_ driver.Conn               = &tdriverConn381{}
	_ driver.NamedValueChecker  = &tdriverConn381{}
	_ driver.Pinger             = &tdriverConn381{}
	_ driver.Queryer            = &tdriverConn381{}
	_ driver.QueryerContext     = &tdriverConn381{}
	_ driver.SessionResetter    = &tdriverConn381{}
	_ driver.Conn               = &tdriverConn382{}
	_ driver.ConnBeginTx        = &tdriverConn382{}
	_ driver.ConnPrepareContext = &tdriverConn382{}
	_ driver.Execer             = &tdriverConn382{}
	_ driver.ExecerContext      = &tdriverConn382{}
	_ driver.NamedValueChecker  = &tdriverConn382{}
	_ driver.Pinger             = &tdriverConn382{}
	_ driver.Conn               = &tdriverConn383{}
	_ driver.ConnBeginTx        = &tdriverConn383{}
	_ driver.ConnPrepareContext = &tdriverConn383{}
	_ driver.Execer             = &tdriverConn383{}
	_ driver.ExecerContext      = &tdriverConn383{}
	_ driver.NamedValueChecker  = &tdriverConn383{}
	_ driver.Queryer            = &tdriverConn383{}
	_ driver.Conn               = &tdriverConn384{}
	_ driver.ConnBeginTx        = &tdriverConn384{}
	_ driver.ConnPrepareContext = &tdriverConn384{}
	_ driver.Execer             = &tdriverConn384{}
	_ driver.ExecerContext      = &tdriverConn384{}
	_ driver.NamedValueChecker  = &tdriverConn384{}
	_ driver.QueryerContext     = &tdriverConn384{}
	_ driver.Conn               = &tdriverConn385{}
	_ driver.ConnBeginTx        = &tdriverConn385{}
	_ driver.ConnPrepareContext = &tdriverConn385{}
	_ driver.Execer             = &tdriverConn385{}
	_ driver.ExecerContext      = &tdriverConn385{}
	_ driver.NamedValueChecker  = &tdriverConn385{}
	_ driver.SessionResetter    = &tdriverConn385{}
	_ driver.Conn               = &tdriverConn386{}
	_ driver.ConnBeginTx        = &tdriverConn386{}
	_ driver.ConnPrepareContext = &tdriverConn386{}
	_ driver.Execer             = &tdriverConn386{}
	_ driver.ExecerContext      = &tdriverConn386{}
	_ driver.Pinger             = &tdriverConn386{}
	_ driver.Queryer            = &tdriverConn386{}
	_ driver.Conn               = &tdriverConn387{}
	_ driver.ConnBeginTx        = &tdriverConn387{}
	_ driver.ConnPrepareContext = &tdriverConn387{}
	_ driver.Execer             = &tdriverConn387{}
	_ driver.ExecerContext      = &tdriverConn387{}
	_ driver.Pinger             = &tdriverConn387{}
	_ driver.QueryerContext     = &tdriverConn387{}
	_ driver.Conn               = &tdriverConn388{}
	_ driver.ConnBeginTx        = &tdriverConn388{}
	_ driver.ConnPrepareContext = &tdriverConn388{}
	_ driver.Execer             = &tdriverConn388{}
	_ driver.ExecerContext      = &tdriverConn388{}
	_ driver.Pinger             = &tdriverConn388{}
	_ driver.SessionResetter    = &tdriverConn388{}
	_ driver.Conn               = &tdriverConn389{}
	_ driver.ConnBeginTx        = &tdriverConn389{}
	_ driver.ConnPrepareContext = &tdriverConn389{}
	_ driver.Execer             = &tdriverConn389{}
	_ driver.ExecerContext      = &tdriverConn389{}
	_ driver.Queryer            = &tdriverConn389{}
	_ driver.QueryerContext     = &tdriverConn389{}
	_ driver.Conn               = &tdriverConn390{}
	_ driver.ConnBeginTx        = &tdriverConn390{}
	_ driver.ConnPrepareContext = &tdriverConn390{}
	_ driver.Execer             = &tdriverConn390{}
	_ driver.ExecerContext      = &tdriverConn390{}
	_ driver.Queryer            = &tdriverConn390{}
	_ driver.SessionResetter    = &tdriverConn390{}
	_ driver.Conn               = &tdriverConn391{}
	_ driver.ConnBeginTx        = &tdriverConn391{}
	_ driver.ConnPrepareContext = &tdriverConn391{}
	_ driver.Execer             = &tdriverConn391{}
	_ driver.ExecerContext      = &tdriverConn391{}
	_ driver.QueryerContext     = &tdriverConn391{}
	_ driver.SessionResetter    = &tdriverConn391{}
	_ driver.Conn               = &tdriverConn392{}
	_ driver.ConnBeginTx        = &tdriverConn392{}
	_ driver.ConnPrepareContext = &tdriverConn392{}
	_ driver.Execer             = &tdriverConn392{}
	_ driver.NamedValueChecker  = &tdriverConn392{}
	_ driver.Pinger             = &tdriverConn392{}
	_ driver.Queryer            = &tdriverConn392{}
	_ driver.Conn               = &tdriverConn393{}
	_ driver.ConnBeginTx        = &tdriverConn393{}
	_ driver.ConnPrepareContext = &tdriverConn393{}
	_ driver.Execer             = &tdriverConn393{}
	_ driver.NamedValueChecker  = &tdriverConn393{}
	_ driver.Pinger             = &tdriverConn393{}
	_ driver.QueryerContext     = &tdriverConn393{}
	_ driver.Conn               = &tdriverConn394{}
	_ driver.ConnBeginTx        = &tdriverConn394{}
	_ driver.ConnPrepareContext = &tdriverConn394{}
	_ driver.Execer             = &tdriverConn394{}
	_ driver.NamedValueChecker  = &tdriverConn394{}
	_ driver.Pinger             = &tdriverConn394{}
	_ driver.SessionResetter    = &tdriverConn394{}
	_ driver.Conn               = &tdriverConn395{}
	_ driver.ConnBeginTx        = &tdriverConn395{}
	_ driver.ConnPrepareContext = &tdriverConn395{}
	_ driver.Execer             = &tdriverConn395{}
	_ driver.NamedValueChecker  = &tdriverConn395{}
	_ driver.Queryer            = &tdriverConn395{}
	_ driver.QueryerContext     = &tdriverConn395{}
	_ driver.Conn               = &tdriverConn396{}
	_ driver.ConnBeginTx        = &tdriverConn396{}
	_ driver.ConnPrepareContext = &tdriverConn396{}
	_ driver.Execer             = &tdriverConn396{}
	_ driver.NamedValueChecker  = &tdriverConn396{}
	_ driver.Queryer            = &tdriverConn396{}
	_ driver.SessionResetter    = &tdriverConn396{}
	_ driver.Conn               = &tdriverConn397{}
	_ driver.ConnBeginTx        = &tdriverConn397{}
	_ driver.ConnPrepareContext = &tdriverConn397{}
	_ driver.Execer             = &tdriverConn397{}
	_ driver.NamedValueChecker  = &tdriverConn397{}
	_ driver.QueryerContext     = &tdriverConn397{}
	_ driver.SessionResetter    = &tdriverConn397{}
	_ driver.Conn               = &tdriverConn398{}
	_ driver.ConnBeginTx        = &tdriverConn398{}
	_ driver.ConnPrepareContext = &tdriverConn398{}
	_ driver.Execer             = &tdriverConn398{}
	_ driver.Pinger             = &tdriverConn398{}
	_ driver.Queryer            = &tdriverConn398{}
	_ driver.QueryerContext     = &tdriverConn398{}
	_ driver.Conn               = &tdriverConn399{}
	_ driver.ConnBeginTx        = &tdriverConn399{}
	_ driver.ConnPrepareContext = &tdriverConn399{}
	_ driver.Execer             = &tdriverConn399{}
	_ driver.Pinger             = &tdriverConn399{}
	_ driver.Queryer            = &tdriverConn399{}
	_ driver.SessionResetter    = &tdriverConn399{}
	_ driver.Conn               = &tdriverConn400{}
	_ driver.ConnBeginTx        = &tdriverConn400{}
	_ driver.ConnPrepareContext = &tdriverConn400{}
	_ driver.Execer             = &tdriverConn400{}
	_ driver.Pinger             = &tdriverConn400{}
	_ driver.QueryerContext     = &tdriverConn400{}
	_ driver.SessionResetter    = &tdriverConn400{}
	_ driver.Conn               = &tdriverConn401{}
	_ driver.ConnBeginTx        = &tdriverConn401{}
	_ driver.ConnPrepareContext = &tdriverConn401{}
	_ driver.Execer             = &tdriverConn401{}
	_ driver.Queryer            = &tdriverConn401{}
	_ driver.QueryerContext     = &tdriverConn401{}
	_ driver.SessionResetter    = &tdriverConn401{}
	_ driver.Conn               = &tdriverConn402{}
	_ driver.ConnBeginTx        = &tdriverConn402{}
	_ driver.ConnPrepareContext = &tdriverConn402{}
	_ driver.ExecerContext      = &tdriverConn402{}
	_ driver.NamedValueChecker  = &tdriverConn402{}
	_ driver.Pinger             = &tdriverConn402{}
	_ driver.Queryer            = &tdriverConn402{}
	_ driver.Conn               = &tdriverConn403{}
	_ driver.ConnBeginTx        = &tdriverConn403{}
	_ driver.ConnPrepareContext = &tdriverConn403{}
	_ driver.ExecerContext      = &tdriverConn403{}
	_ driver.NamedValueChecker  = &tdriverConn403{}
	_ driver.Pinger             = &tdriverConn403{}
	_ driver.QueryerContext     = &tdriverConn403{}
	_ driver.Conn               = &tdriverConn404{}
	_ driver.ConnBeginTx        = &tdriverConn404{}
	_ driver.ConnPrepareContext = &tdriverConn404{}
	_ driver.ExecerContext      = &tdriverConn404{}
	_ driver.NamedValueChecker  = &tdriverConn404{}
	_ driver.Pinger             = &tdriverConn404{}
	_ driver.SessionResetter    = &tdriverConn404{}
	_ driver.Conn               = &tdriverConn405{}
	_ driver.ConnBeginTx        = &tdriverConn405{}
	_ driver.ConnPrepareContext = &tdriverConn405{}
	_ driver.ExecerContext      = &tdriverConn405{}
	_ driver.NamedValueChecker  = &tdriverConn405{}
	_ driver.Queryer            = &tdriverConn405{}
	_ driver.QueryerContext     = &tdriverConn405{}
	_ driver.Conn               = &tdriverConn406{}
	_ driver.ConnBeginTx        = &tdriverConn406{}
	_ driver.ConnPrepareContext = &tdriverConn406{}
	_ driver.ExecerContext      = &tdriverConn406{}
	_ driver.NamedValueChecker  = &tdriverConn406{}
	_ driver.Queryer            = &tdriverConn406{}
	_ driver.SessionResetter    = &tdriverConn406{}
	_ driver.Conn               = &tdriverConn407{}
	_ driver.ConnBeginTx        = &tdriverConn407{}
	_ driver.ConnPrepareContext = &tdriverConn407{}
	_ driver.ExecerContext      = &tdriverConn407{}
	_ driver.NamedValueChecker  = &tdriverConn407{}
	_ driver.QueryerContext     = &tdriverConn407{}
	_ driver.SessionResetter    = &tdriverConn407{}
	_ driver.Conn               = &tdriverConn408{}
	_ driver.ConnBeginTx        = &tdriverConn408{}
	_ driver.ConnPrepareContext = &tdriverConn408{}
	_ driver.ExecerContext      = &tdriverConn408{}
	_ driver.Pinger             = &tdriverConn408{}
	_ driver.Queryer            = &tdriverConn408{}
	_ driver.QueryerContext     = &tdriverConn408{}
	_ driver.Conn               = &tdriverConn409{}
	_ driver.ConnBeginTx        = &tdriverConn409{}
	_ driver.ConnPrepareContext = &tdriverConn409{}
	_ driver.ExecerContext      = &tdriverConn409{}
	_ driver.Pinger             = &tdriverConn409{}
	_ driver.Queryer            = &tdriverConn409{}
	_ driver.SessionResetter    = &tdriverConn409{}
	_ driver.Conn               = &tdriverConn410{}
	_ driver.ConnBeginTx        = &tdriverConn410{}
	_ driver.ConnPrepareContext = &tdriverConn410{}
	_ driver.ExecerContext      = &tdriverConn410{}
	_ driver.Pinger             = &tdriverConn410{}
	_ driver.QueryerContext     = &tdriverConn410{}
	_ driver.SessionResetter    = &tdriverConn410{}
	_ driver.Conn               = &tdriverConn411{}
	_ driver.ConnBeginTx        = &tdriverConn411{}
	_ driver.ConnPrepareContext = &tdriverConn411{}
	_ driver.ExecerContext      = &tdriverConn411{}
	_ driver.Queryer            = &tdriverConn411{}
	_ driver.QueryerContext     = &tdriverConn411{}
	_ driver.SessionResetter    = &tdriverConn411{}
	_ driver.Conn               = &tdriverConn412{}
	_ driver.ConnBeginTx        = &tdriverConn412{}
	_ driver.ConnPrepareContext = &tdriverConn412{}
	_ driver.NamedValueChecker  = &tdriverConn412{}
	_ driver.Pinger             = &tdriverConn412{}
	_ driver.Queryer            = &tdriverConn412{}
	_ driver.QueryerContext     = &tdriverConn412{}
	_ driver.Conn               = &tdriverConn413{}
	_ driver.ConnBeginTx        = &tdriverConn413{}
	_ driver.ConnPrepareContext = &tdriverConn413{}
	_ driver.NamedValueChecker  = &tdriverConn413{}
	_ driver.Pinger             = &tdriverConn413{}
	_ driver.Queryer            = &tdriverConn413{}
	_ driver.SessionResetter    = &tdriverConn413{}
	_ driver.Conn               = &tdriverConn414{}
	_ driver.ConnBeginTx        = &tdriverConn414{}
	_ driver.ConnPrepareContext = &tdriverConn414{}
	_ driver.NamedValueChecker  = &tdriverConn414{}
	_ driver.Pinger             = &tdriverConn414{}
	_ driver.QueryerContext     = &tdriverConn414{}
	_ driver.SessionResetter    = &tdriverConn414{}
	_ driver.Conn               = &tdriverConn415{}
	_ driver.ConnBeginTx        = &tdriverConn415{}
	_ driver.ConnPrepareContext = &tdriverConn415{}
	_ driver.NamedValueChecker  = &tdriverConn415{}
	_ driver.Queryer            = &tdriverConn415{}
	_ driver.QueryerContext     = &tdriverConn415{}
	_ driver.SessionResetter    = &tdriverConn415{}
	_ driver.Conn               = &tdriverConn416{}
	_ driver.ConnBeginTx        = &tdriverConn416{}
	_ driver.ConnPrepareContext = &tdriverConn416{}
	_ driver.Pinger             = &tdriverConn416{}
	_ driver.Queryer            = &tdriverConn416{}
	_ driver.QueryerContext     = &tdriverConn416{}
	_ driver.SessionResetter    = &tdriverConn416{}
	_ driver.Conn               = &tdriverConn417{}
	_ driver.ConnBeginTx        = &tdriverConn417{}
	_ driver.Execer             = &tdriverConn417{}
	_ driver.ExecerContext      = &tdriverConn417{}
	_ driver.NamedValueChecker  = &tdriverConn417{}
	_ driver.Pinger             = &tdriverConn417{}
	_ driver.Queryer            = &tdriverConn417{}
	_ driver.Conn               = &tdriverConn418{}
	_ driver.ConnBeginTx        = &tdriverConn418{}
	_ driver.Execer             = &tdriverConn418{}
	_ driver.ExecerContext      = &tdriverConn418{}
	_ driver.NamedValueChecker  = &tdriverConn418{}
	_ driver.Pinger             = &tdriverConn418{}
	_ driver.QueryerContext     = &tdriverConn418{}
	_ driver.Conn               = &tdriverConn419{}
	_ driver.ConnBeginTx        = &tdriverConn419{}
	_ driver.Execer             = &tdriverConn419{}
	_ driver.ExecerContext      = &tdriverConn419{}
	_ driver.NamedValueChecker  = &tdriverConn419{}
	_ driver.Pinger             = &tdriverConn419{}
	_ driver.SessionResetter    = &tdriverConn419{}
	_ driver.Conn               = &tdriverConn420{}
	_ driver.ConnBeginTx        = &tdriverConn420{}
	_ driver.Execer             = &tdriverConn420{}
	_ driver.ExecerContext      = &tdriverConn420{}
	_ driver.NamedValueChecker  = &tdriverConn420{}
	_ driver.Queryer            = &tdriverConn420{}
	_ driver.QueryerContext     = &tdriverConn420{}
	_ driver.Conn               = &tdriverConn421{}
	_ driver.ConnBeginTx        = &tdriverConn421{}
	_ driver.Execer             = &tdriverConn421{}
	_ driver.ExecerContext      = &tdriverConn421{}
	_ driver.NamedValueChecker  = &tdriverConn421{}
	_ driver.Queryer            = &tdriverConn421{}
	_ driver.SessionResetter    = &tdriverConn421{}
	_ driver.Conn               = &tdriverConn422{}
	_ driver.ConnBeginTx        = &tdriverConn422{}
	_ driver.Execer             = &tdriverConn422{}
	_ driver.ExecerContext      = &tdriverConn422{}
	_ driver.NamedValueChecker  = &tdriverConn422{}
	_ driver.QueryerContext     = &tdriverConn422{}
	_ driver.SessionResetter    = &tdriverConn422{}
	_ driver.Conn               = &tdriverConn423{}
	_ driver.ConnBeginTx        = &tdriverConn423{}
	_ driver.Execer             = &tdriverConn423{}
	_ driver.ExecerContext      = &tdriverConn423{}
	_ driver.Pinger             = &tdriverConn423{}
	_ driver.Queryer            = &tdriverConn423{}
	_ driver.QueryerContext     = &tdriverConn423{}
	_ driver.Conn               = &tdriverConn424{}
	_ driver.ConnBeginTx        = &tdriverConn424{}
	_ driver.Execer             = &tdriverConn424{}
	_ driver.ExecerContext      = &tdriverConn424{}
	_ driver.Pinger             = &tdriverConn424{}
	_ driver.Queryer            = &tdriverConn424{}
	_ driver.SessionResetter    = &tdriverConn424{}
	_ driver.Conn               = &tdriverConn425{}
	_ driver.ConnBeginTx        = &tdriverConn425{}
	_ driver.Execer             = &tdriverConn425{}
	_ driver.ExecerContext      = &tdriverConn425{}
	_ driver.Pinger             = &tdriverConn425{}
	_ driver.QueryerContext     = &tdriverConn425{}
	_ driver.SessionResetter    = &tdriverConn425{}
	_ driver.Conn               = &tdriverConn426{}
	_ driver.ConnBeginTx        = &tdriverConn426{}
	_ driver.Execer             = &tdriverConn426{}
	_ driver.ExecerContext      = &tdriverConn426{}
	_ driver.Queryer            = &tdriverConn426{}
	_ driver.QueryerContext     = &tdriverConn426{}
	_ driver.SessionResetter    = &tdriverConn426{}
	_ driver.Conn               = &tdriverConn427{}
	_ driver.ConnBeginTx        = &tdriverConn427{}
	_ driver.Execer             = &tdriverConn427{}
	_ driver.NamedValueChecker  = &tdriverConn427{}
	_ driver.Pinger             = &tdriverConn427{}
	_ driver.Queryer            = &tdriverConn427{}
	_ driver.QueryerContext     = &tdriverConn427{}
	_ driver.Conn               = &tdriverConn428{}
	_ driver.ConnBeginTx        = &tdriverConn428{}
	_ driver.Execer             = &tdriverConn428{}
	_ driver.NamedValueChecker  = &tdriverConn428{}
	_ driver.Pinger             = &tdriverConn428{}
	_ driver.Queryer            = &tdriverConn428{}
	_ driver.SessionResetter    = &tdriverConn428{}
	_ driver.Conn               = &tdriverConn429{}
	_ driver.ConnBeginTx        = &tdriverConn429{}
	_ driver.Execer             = &tdriverConn429{}
	_ driver.NamedValueChecker  = &tdriverConn429{}
	_ driver.Pinger             = &tdriverConn429{}
	_ driver.QueryerContext     = &tdriverConn429{}
	_ driver.SessionResetter    = &tdriverConn429{}
	_ driver.Conn               = &tdriverConn430{}
	_ driver.ConnBeginTx        = &tdriverConn430{}
	_ driver.Execer             = &tdriverConn430{}
	_ driver.NamedValueChecker  = &tdriverConn430{}
	_ driver.Queryer            = &tdriverConn430{}
	_ driver.QueryerContext     = &tdriverConn430{}
	_ driver.SessionResetter    = &tdriverConn430{}
	_ driver.Conn               = &tdriverConn431{}
	_ driver.ConnBeginTx        = &tdriverConn431{}
	_ driver.Execer             = &tdriverConn431{}
	_ driver.Pinger             = &tdriverConn431{}
	_ driver.Queryer            = &tdriverConn431{}
	_ driver.QueryerContext     = &tdriverConn431{}
	_ driver.SessionResetter    = &tdriverConn431{}
	_ driver.Conn               = &tdriverConn432{}
	_ driver.ConnBeginTx        = &tdriverConn432{}
	_ driver.ExecerContext      = &tdriverConn432{}
	_ driver.NamedValueChecker  = &tdriverConn432{}
	_ driver.Pinger             = &tdriverConn432{}
	_ driver.Queryer            = &tdriverConn432{}
	_ driver.QueryerContext     = &tdriverConn432{}
	_ driver.Conn               = &tdriverConn433{}
	_ driver.ConnBeginTx        = &tdriverConn433{}
	_ driver.ExecerContext      = &tdriverConn433{}
	_ driver.NamedValueChecker  = &tdriverConn433{}
	_ driver.Pinger             = &tdriverConn433{}
	_ driver.Queryer            = &tdriverConn433{}
	_ driver.SessionResetter    = &tdriverConn433{}
	_ driver.Conn               = &tdriverConn434{}
	_ driver.ConnBeginTx        = &tdriverConn434{}
	_ driver.ExecerContext      = &tdriverConn434{}
	_ driver.NamedValueChecker  = &tdriverConn434{}
	_ driver.Pinger             = &tdriverConn434{}
	_ driver.QueryerContext     = &tdriverConn434{}
	_ driver.SessionResetter    = &tdriverConn434{}
	_ driver.Conn               = &tdriverConn435{}
	_ driver.ConnBeginTx        = &tdriverConn435{}
	_ driver.ExecerContext      = &tdriverConn435{}
	_ driver.NamedValueChecker  = &tdriverConn435{}
	_ driver.Queryer            = &tdriverConn435{}
	_ driver.QueryerContext     = &tdriverConn435{}
	_ driver.SessionResetter    = &tdriverConn435{}
	_ driver.Conn               = &tdriverConn436{}
	_ driver.ConnBeginTx        = &tdriverConn436{}
	_ driver.ExecerContext      = &tdriverConn436{}
	_ driver.Pinger             = &tdriverConn436{}
	_ driver.Queryer            = &tdriverConn436{}
	_ driver.QueryerContext     = &tdriverConn436{}
	_ driver.SessionResetter    = &tdriverConn436{}
	_ driver.Conn               = &tdriverConn437{}
	_ driver.ConnBeginTx        = &tdriverConn437{}
	_ driver.NamedValueChecker  = &tdriverConn437{}
	_ driver.Pinger             = &tdriverConn437{}
	_ driver.Queryer            = &tdriverConn437{}
	_ driver.QueryerContext     = &tdriverConn437{}
	_ driver.SessionResetter    = &tdriverConn437{}
	_ driver.Conn               = &tdriverConn438{}
	_ driver.ConnPrepareContext = &tdriverConn438{}
	_ driver.Execer             = &tdriverConn438{}
	_ driver.ExecerContext      = &tdriverConn438{}
	_ driver.NamedValueChecker  = &tdriverConn438{}
	_ driver.Pinger             = &tdriverConn438{}
	_ driver.Queryer            = &tdriverConn438{}
	_ driver.Conn               = &tdriverConn439{}
	_ driver.ConnPrepareContext = &tdriverConn439{}
	_ driver.Execer             = &tdriverConn439{}
	_ driver.ExecerContext      = &tdriverConn439{}
	_ driver.NamedValueChecker  = &tdriverConn439{}
	_ driver.Pinger             = &tdriverConn439{}
	_ driver.QueryerContext     = &tdriverConn439{}
	_ driver.Conn               = &tdriverConn440{}
	_ driver.ConnPrepareContext = &tdriverConn440{}
	_ driver.Execer             = &tdriverConn440{}
	_ driver.ExecerContext      = &tdriverConn440{}
	_ driver.NamedValueChecker  = &tdriverConn440{}
	_ driver.Pinger             = &tdriverConn440{}
	_ driver.SessionResetter    = &tdriverConn440{}
	_ driver.Conn               = &tdriverConn441{}
	_ driver.ConnPrepareContext = &tdriverConn441{}
	_ driver.Execer             = &tdriverConn441{}
	_ driver.ExecerContext      = &tdriverConn441{}
	_ driver.NamedValueChecker  = &tdriverConn441{}
	_ driver.Queryer            = &tdriverConn441{}
	_ driver.QueryerContext     = &tdriverConn441{}
	_ driver.Conn               = &tdriverConn442{}
	_ driver.ConnPrepareContext = &tdriverConn442{}
	_ driver.Execer             = &tdriverConn442{}
	_ driver.ExecerContext      = &tdriverConn442{}
	_ driver.NamedValueChecker  = &tdriverConn442{}
	_ driver.Queryer            = &tdriverConn442{}
	_ driver.SessionResetter    = &tdriverConn442{}
	_ driver.Conn               = &tdriverConn443{}
	_ driver.ConnPrepareContext = &tdriverConn443{}
	_ driver.Execer             = &tdriverConn443{}
	_ driver.ExecerContext      = &tdriverConn443{}
	_ driver.NamedValueChecker  = &tdriverConn443{}
	_ driver.QueryerContext     = &tdriverConn443{}
	_ driver.SessionResetter    = &tdriverConn443{}
	_ driver.Conn               = &tdriverConn444{}
	_ driver.ConnPrepareContext = &tdriverConn444{}
	_ driver.Execer             = &tdriverConn444{}
	_ driver.ExecerContext      = &tdriverConn444{}
	_ driver.Pinger             = &tdriverConn444{}
	_ driver.Queryer            = &tdriverConn444{}
	_ driver.QueryerContext     = &tdriverConn444{}
	_ driver.Conn               = &tdriverConn445{}
	_ driver.ConnPrepareContext = &tdriverConn445{}
	_ driver.Execer             = &tdriverConn445{}
	_ driver.ExecerContext      = &tdriverConn445{}
	_ driver.Pinger             = &tdriverConn445{}
	_ driver.Queryer            = &tdriverConn445{}
	_ driver.SessionResetter    = &tdriverConn445{}
	_ driver.Conn               = &tdriverConn446{}
	_ driver.ConnPrepareContext = &tdriverConn446{}
	_ driver.Execer             = &tdriverConn446{}
	_ driver.ExecerContext      = &tdriverConn446{}
	_ driver.Pinger             = &tdriverConn446{}
	_ driver.QueryerContext     = &tdriverConn446{}
	_ driver.SessionResetter    = &tdriverConn446{}
	_ driver.Conn               = &tdriverConn447{}
	_ driver.ConnPrepareContext = &tdriverConn447{}
	_ driver.Execer             = &tdriverConn447{}
	_ driver.ExecerContext      = &tdriverConn447{}
	_ driver.Queryer            = &tdriverConn447{}
	_ driver.QueryerContext     = &tdriverConn447{}
	_ driver.SessionResetter    = &tdriverConn447{}
	_ driver.Conn               = &tdriverConn448{}
	_ driver.ConnPrepareContext = &tdriverConn448{}
	_ driver.Execer             = &tdriverConn448{}
	_ driver.NamedValueChecker  = &tdriverConn448{}
	_ driver.Pinger             = &tdriverConn448{}
	_ driver.Queryer            = &tdriverConn448{}
	_ driver.QueryerContext     = &tdriverConn448{}
	_ driver.Conn               = &tdriverConn449{}
	_ driver.ConnPrepareContext = &tdriverConn449{}
	_ driver.Execer             = &tdriverConn449{}
	_ driver.NamedValueChecker  = &tdriverConn449{}
	_ driver.Pinger             = &tdriverConn449{}
	_ driver.Queryer            = &tdriverConn449{}
	_ driver.SessionResetter    = &tdriverConn449{}
	_ driver.Conn               = &tdriverConn450{}
	_ driver.ConnPrepareContext = &tdriverConn450{}
	_ driver.Execer             = &tdriverConn450{}
	_ driver.NamedValueChecker  = &tdriverConn450{}
	_ driver.Pinger             = &tdriverConn450{}
	_ driver.QueryerContext     = &tdriverConn450{}
	_ driver.SessionResetter    = &tdriverConn450{}
	_ driver.Conn               = &tdriverConn451{}
	_ driver.ConnPrepareContext = &tdriverConn451{}
	_ driver.Execer             = &tdriverConn451{}
	_ driver.NamedValueChecker  = &tdriverConn451{}
	_ driver.Queryer            = &tdriverConn451{}
	_ driver.QueryerContext     = &tdriverConn451{}
	_ driver.SessionResetter    = &tdriverConn451{}
	_ driver.Conn               = &tdriverConn452{}
	_ driver.ConnPrepareContext = &tdriverConn452{}
	_ driver.Execer             = &tdriverConn452{}
	_ driver.Pinger             = &tdriverConn452{}
	_ driver.Queryer            = &tdriverConn452{}
	_ driver.QueryerContext     = &tdriverConn452{}
	_ driver.SessionResetter    = &tdriverConn452{}
	_ driver.Conn               = &tdriverConn453{}
	_ driver.ConnPrepareContext = &tdriverConn453{}
	_ driver.ExecerContext      = &tdriverConn453{}
	_ driver.NamedValueChecker  = &tdriverConn453{}
	_ driver.Pinger             = &tdriverConn453{}
	_ driver.Queryer            = &tdriverConn453{}
	_ driver.QueryerContext     = &tdriverConn453{}
	_ driver.Conn               = &tdriverConn454{}
	_ driver.ConnPrepareContext = &tdriverConn454{}
	_ driver.ExecerContext      = &tdriverConn454{}
	_ driver.NamedValueChecker  = &tdriverConn454{}
	_ driver.Pinger             = &tdriverConn454{}
	_ driver.Queryer            = &tdriverConn454{}
	_ driver.SessionResetter    = &tdriverConn454{}
	_ driver.Conn               = &tdriverConn455{}
	_ driver.ConnPrepareContext = &tdriverConn455{}
	_ driver.ExecerContext      = &tdriverConn455{}
	_ driver.NamedValueChecker  = &tdriverConn455{}
	_ driver.Pinger             = &tdriverConn455{}
	_ driver.QueryerContext     = &tdriverConn455{}
	_ driver.SessionResetter    = &tdriverConn455{}
	_ driver.Conn               = &tdriverConn456{}
	_ driver.ConnPrepareContext = &tdriverConn456{}
	_ driver.ExecerContext      = &tdriverConn456{}
	_ driver.NamedValueChecker  = &tdriverConn456{}
	_ driver.Queryer            = &tdriverConn456{}
	_ driver.QueryerContext     = &tdriverConn456{}
	_ driver.SessionResetter    = &tdriverConn456{}
	_ driver.Conn               = &tdriverConn457{}
	_ driver.ConnPrepareContext = &tdriverConn457{}
	_ driver.ExecerContext      = &tdriverConn457{}
	_ driver.Pinger             = &tdriverConn457{}
	_ driver.Queryer            = &tdriverConn457{}
	_ driver.QueryerContext     = &tdriverConn457{}
	_ driver.SessionResetter    = &tdriverConn457{}
	_ driver.Conn               = &tdriverConn458{}
	_ driver.ConnPrepareContext = &tdriverConn458{}
	_ driver.NamedValueChecker  = &tdriverConn458{}
	_ driver.Pinger             = &tdriverConn458{}
	_ driver.Queryer            = &tdriverConn458{}
	_ driver.QueryerContext     = &tdriverConn458{}
	_ driver.SessionResetter    = &tdriverConn458{}
	_ driver.Conn               = &tdriverConn459{}
	_ driver.Execer             = &tdriverConn459{}
	_ driver.ExecerContext      = &tdriverConn459{}
	_ driver.NamedValueChecker  = &tdriverConn459{}
	_ driver.Pinger             = &tdriverConn459{}
	_ driver.Queryer            = &tdriverConn459{}
	_ driver.QueryerContext     = &tdriverConn459{}
	_ driver.Conn               = &tdriverConn460{}
	_ driver.Execer             = &tdriverConn460{}
	_ driver.ExecerContext      = &tdriverConn460{}
	_ driver.NamedValueChecker  = &tdriverConn460{}
	_ driver.Pinger             = &tdriverConn460{}
	_ driver.Queryer            = &tdriverConn460{}
	_ driver.SessionResetter    = &tdriverConn460{}
	_ driver.Conn               = &tdriverConn461{}
	_ driver.Execer             = &tdriverConn461{}
	_ driver.ExecerContext      = &tdriverConn461{}
	_ driver.NamedValueChecker  = &tdriverConn461{}
	_ driver.Pinger             = &tdriverConn461{}
	_ driver.QueryerContext     = &tdriverConn461{}
	_ driver.SessionResetter    = &tdriverConn461{}
	_ driver.Conn               = &tdriverConn462{}
	_ driver.Execer             = &tdriverConn462{}
	_ driver.ExecerContext      = &tdriverConn462{}
	_ driver.NamedValueChecker  = &tdriverConn462{}
	_ driver.Queryer            = &tdriverConn462{}
	_ driver.QueryerContext     = &tdriverConn462{}
	_ driver.SessionResetter    = &tdriverConn462{}
	_ driver.Conn               = &tdriverConn463{}
	_ driver.Execer             = &tdriverConn463{}
	_ driver.ExecerContext      = &tdriverConn463{}
	_ driver.Pinger             = &tdriverConn463{}
	_ driver.Queryer            = &tdriverConn463{}
	_ driver.QueryerContext     = &tdriverConn463{}
	_ driver.SessionResetter    = &tdriverConn463{}
	_ driver.Conn               = &tdriverConn464{}
	_ driver.Execer             = &tdriverConn464{}
	_ driver.NamedValueChecker  = &tdriverConn464{}
	_ driver.Pinger             = &tdriverConn464{}
	_ driver.Queryer            = &tdriverConn464{}
	_ driver.QueryerContext     = &tdriverConn464{}
	_ driver.SessionResetter    = &tdriverConn464{}
	_ driver.Conn               = &tdriverConn465{}
	_ driver.ExecerContext      = &tdriverConn465{}
	_ driver.NamedValueChecker  = &tdriverConn465{}
	_ driver.Pinger             = &tdriverConn465{}
	_ driver.Queryer            = &tdriverConn465{}
	_ driver.QueryerContext     = &tdriverConn465{}
	_ driver.SessionResetter    = &tdriverConn465{}
	_ driver.Conn               = &tdriverConn466{}
	_ driver.ConnBeginTx        = &tdriverConn466{}
	_ driver.ConnPrepareContext = &tdriverConn466{}
	_ driver.Execer             = &tdriverConn466{}
	_ driver.ExecerContext      = &tdriverConn466{}
	_ driver.NamedValueChecker  = &tdriverConn466{}
	_ driver.Pinger             = &tdriverConn466{}
	_ driver.Queryer            = &tdriverConn466{}
	_ driver.Conn               = &tdriverConn467{}
	_ driver.ConnBeginTx        = &tdriverConn467{}
	_ driver.ConnPrepareContext = &tdriverConn467{}
	_ driver.Execer             = &tdriverConn467{}
	_ driver.ExecerContext      = &tdriverConn467{}
	_ driver.NamedValueChecker  = &tdriverConn467{}
	_ driver.Pinger             = &tdriverConn467{}
	_ driver.QueryerContext     = &tdriverConn467{}
	_ driver.Conn               = &tdriverConn468{}
	_ driver.ConnBeginTx        = &tdriverConn468{}
	_ driver.ConnPrepareContext = &tdriverConn468{}
	_ driver.Execer             = &tdriverConn468{}
	_ driver.ExecerContext      = &tdriverConn468{}
	_ driver.NamedValueChecker  = &tdriverConn468{}
	_ driver.Pinger             = &tdriverConn468{}
	_ driver.SessionResetter    = &tdriverConn468{}
	_ driver.Conn               = &tdriverConn469{}
	_ driver.ConnBeginTx        = &tdriverConn469{}
	_ driver.ConnPrepareContext = &tdriverConn469{}
	_ driver.Execer             = &tdriverConn469{}
	_ driver.ExecerContext      = &tdriverConn469{}
	_ driver.NamedValueChecker  = &tdriverConn469{}
	_ driver.Queryer            = &tdriverConn469{}
	_ driver.QueryerContext     = &tdriverConn469{}
	_ driver.Conn               = &tdriverConn470{}
	_ driver.ConnBeginTx        = &tdriverConn470{}
	_ driver.ConnPrepareContext = &tdriverConn470{}
	_ driver.Execer             = &tdriverConn470{}
	_ driver.ExecerContext      = &tdriverConn470{}
	_ driver.NamedValueChecker  = &tdriverConn470{}
	_ driver.Queryer            = &tdriverConn470{}
	_ driver.SessionResetter    = &tdriverConn470{}
	_ driver.Conn               = &tdriverConn471{}
	_ driver.ConnBeginTx        = &tdriverConn471{}
	_ driver.ConnPrepareContext = &tdriverConn471{}
	_ driver.Execer             = &tdriverConn471{}
	_ driver.ExecerContext      = &tdriverConn471{}
	_ driver.NamedValueChecker  = &tdriverConn471{}
	_ driver.QueryerContext     = &tdriverConn471{}
	_ driver.SessionResetter    = &tdriverConn471{}
	_ driver.Conn               = &tdriverConn472{}
	_ driver.ConnBeginTx        = &tdriverConn472{}
	_ driver.ConnPrepareContext = &tdriverConn472{}
	_ driver.Execer             = &tdriverConn472{}
	_ driver.ExecerContext      = &tdriverConn472{}
	_ driver.Pinger             = &tdriverConn472{}
	_ driver.Queryer            = &tdriverConn472{}
	_ driver.QueryerContext     = &tdriverConn472{}
	_ driver.Conn               = &tdriverConn473{}
	_ driver.ConnBeginTx        = &tdriverConn473{}
	_ driver.ConnPrepareContext = &tdriverConn473{}
	_ driver.Execer             = &tdriverConn473{}
	_ driver.ExecerContext      = &tdriverConn473{}
	_ driver.Pinger             = &tdriverConn473{}
	_ driver.Queryer            = &tdriverConn473{}
	_ driver.SessionResetter    = &tdriverConn473{}
	_ driver.Conn               = &tdriverConn474{}
	_ driver.ConnBeginTx        = &tdriverConn474{}
	_ driver.ConnPrepareContext = &tdriverConn474{}
	_ driver.Execer             = &tdriverConn474{}
	_ driver.ExecerContext      = &tdriverConn474{}
	_ driver.Pinger             = &tdriverConn474{}
	_ driver.QueryerContext     = &tdriverConn474{}
	_ driver.SessionResetter    = &tdriverConn474{}
	_ driver.Conn               = &tdriverConn475{}
	_ driver.ConnBeginTx        = &tdriverConn475{}
	_ driver.ConnPrepareContext = &tdriverConn475{}
	_ driver.Execer             = &tdriverConn475{}
	_ driver.ExecerContext      = &tdriverConn475{}
	_ driver.Queryer            = &tdriverConn475{}
	_ driver.QueryerContext     = &tdriverConn475{}
	_ driver.SessionResetter    = &tdriverConn475{}
	_ driver.Conn               = &tdriverConn476{}
	_ driver.ConnBeginTx        = &tdriverConn476{}
	_ driver.ConnPrepareContext = &tdriverConn476{}
	_ driver.Execer             = &tdriverConn476{}
	_ driver.NamedValueChecker  = &tdriverConn476{}
	_ driver.Pinger             = &tdriverConn476{}
	_ driver.Queryer            = &tdriverConn476{}
	_ driver.QueryerContext     = &tdriverConn476{}
	_ driver.Conn               = &tdriverConn477{}
	_ driver.ConnBeginTx        = &tdriverConn477{}
	_ driver.ConnPrepareContext = &tdriverConn477{}
	_ driver.Execer             = &tdriverConn477{}
	_ driver.NamedValueChecker  = &tdriverConn477{}
	_ driver.Pinger             = &tdriverConn477{}
	_ driver.Queryer            = &tdriverConn477{}
	_ driver.SessionResetter    = &tdriverConn477{}
	_ driver.Conn               = &tdriverConn478{}
	_ driver.ConnBeginTx        = &tdriverConn478{}
	_ driver.ConnPrepareContext = &tdriverConn478{}
	_ driver.Execer             = &tdriverConn478{}
	_ driver.NamedValueChecker  = &tdriverConn478{}
	_ driver.Pinger             = &tdriverConn478{}
	_ driver.QueryerContext     = &tdriverConn478{}
	_ driver.SessionResetter    = &tdriverConn478{}
	_ driver.Conn               = &tdriverConn479{}
	_ driver.ConnBeginTx        = &tdriverConn479{}
	_ driver.ConnPrepareContext = &tdriverConn479{}
	_ driver.Execer             = &tdriverConn479{}
	_ driver.NamedValueChecker  = &tdriverConn479{}
	_ driver.Queryer            = &tdriverConn479{}
	_ driver.QueryerContext     = &tdriverConn479{}
	_ driver.SessionResetter    = &tdriverConn479{}
	_ driver.Conn               = &tdriverConn480{}
	_ driver.ConnBeginTx        = &tdriverConn480{}
	_ driver.ConnPrepareContext = &tdriverConn480{}
	_ driver.Execer             = &tdriverConn480{}
	_ driver.Pinger             = &tdriverConn480{}
	_ driver.Queryer            = &tdriverConn480{}
	_ driver.QueryerContext     = &tdriverConn480{}
	_ driver.SessionResetter    = &tdriverConn480{}
	_ driver.Conn               = &tdriverConn481{}
	_ driver.ConnBeginTx        = &tdriverConn481{}
	_ driver.ConnPrepareContext = &tdriverConn481{}
	_ driver.ExecerContext      = &tdriverConn481{}
	_ driver.NamedValueChecker  = &tdriverConn481{}
	_ driver.Pinger             = &tdriverConn481{}
	_ driver.Queryer            = &tdriverConn481{}
	_ driver.QueryerContext     = &tdriverConn481{}
	_ driver.Conn               = &tdriverConn482{}
	_ driver.ConnBeginTx        = &tdriverConn482{}
	_ driver.ConnPrepareContext = &tdriverConn482{}
	_ driver.ExecerContext      = &tdriverConn482{}
	_ driver.NamedValueChecker  = &tdriverConn482{}
	_ driver.Pinger             = &tdriverConn482{}
	_ driver.Queryer            = &tdriverConn482{}
	_ driver.SessionResetter    = &tdriverConn482{}
	_ driver.Conn               = &tdriverConn483{}
	_ driver.ConnBeginTx        = &tdriverConn483{}
	_ driver.ConnPrepareContext = &tdriverConn483{}
	_ driver.ExecerContext      = &tdriverConn483{}
	_ driver.NamedValueChecker  = &tdriverConn483{}
	_ driver.Pinger             = &tdriverConn483{}
	_ driver.QueryerContext     = &tdriverConn483{}
	_ driver.SessionResetter    = &tdriverConn483{}
	_ driver.Conn               = &tdriverConn484{}
	_ driver.ConnBeginTx        = &tdriverConn484{}
	_ driver.ConnPrepareContext = &tdriverConn484{}
	_ driver.ExecerContext      = &tdriverConn484{}
	_ driver.NamedValueChecker  = &tdriverConn484{}
	_ driver.Queryer            = &tdriverConn484{}
	_ driver.QueryerContext     = &tdriverConn484{}
	_ driver.SessionResetter    = &tdriverConn484{}
	_ driver.Conn               = &tdriverConn485{}
	_ driver.ConnBeginTx        = &tdriverConn485{}
	_ driver.ConnPrepareContext = &tdriverConn485{}
	_ driver.ExecerContext      = &tdriverConn485{}
	_ driver.Pinger             = &tdriverConn485{}
	_ driver.Queryer            = &tdriverConn485{}
	_ driver.QueryerContext     = &tdriverConn485{}
	_ driver.SessionResetter    = &tdriverConn485{}
	_ driver.Conn               = &tdriverConn486{}
	_ driver.ConnBeginTx        = &tdriverConn486{}
	_ driver.ConnPrepareContext = &tdriverConn486{}
	_ driver.NamedValueChecker  = &tdriverConn486{}
	_ driver.Pinger             = &tdriverConn486{}
	_ driver.Queryer            = &tdriverConn486{}
	_ driver.QueryerContext     = &tdriverConn486{}
	_ driver.SessionResetter    = &tdriverConn486{}
	_ driver.Conn               = &tdriverConn487{}
	_ driver.ConnBeginTx        = &tdriverConn487{}
	_ driver.Execer             = &tdriverConn487{}
	_ driver.ExecerContext      = &tdriverConn487{}
	_ driver.NamedValueChecker  = &tdriverConn487{}
	_ driver.Pinger             = &tdriverConn487{}
	_ driver.Queryer            = &tdriverConn487{}
	_ driver.QueryerContext     = &tdriverConn487{}
	_ driver.Conn               = &tdriverConn488{}
	_ driver.ConnBeginTx        = &tdriverConn488{}
	_ driver.Execer             = &tdriverConn488{}
	_ driver.ExecerContext      = &tdriverConn488{}
	_ driver.NamedValueChecker  = &tdriverConn488{}
	_ driver.Pinger             = &tdriverConn488{}
	_ driver.Queryer            = &tdriverConn488{}
	_ driver.SessionResetter    = &tdriverConn488{}
	_ driver.Conn               = &tdriverConn489{}
	_ driver.ConnBeginTx        = &tdriverConn489{}
	_ driver.Execer             = &tdriverConn489{}
	_ driver.ExecerContext      = &tdriverConn489{}
	_ driver.NamedValueChecker  = &tdriverConn489{}
	_ driver.Pinger             = &tdriverConn489{}
	_ driver.QueryerContext     = &tdriverConn489{}
	_ driver.SessionResetter    = &tdriverConn489{}
	_ driver.Conn               = &tdriverConn490{}
	_ driver.ConnBeginTx        = &tdriverConn490{}
	_ driver.Execer             = &tdriverConn490{}
	_ driver.ExecerContext      = &tdriverConn490{}
	_ driver.NamedValueChecker  = &tdriverConn490{}
	_ driver.Queryer            = &tdriverConn490{}
	_ driver.QueryerContext     = &tdriverConn490{}
	_ driver.SessionResetter    = &tdriverConn490{}
	_ driver.Conn               = &tdriverConn491{}
	_ driver.ConnBeginTx        = &tdriverConn491{}
	_ driver.Execer             = &tdriverConn491{}
	_ driver.ExecerContext      = &tdriverConn491{}
	_ driver.Pinger             = &tdriverConn491{}
	_ driver.Queryer            = &tdriverConn491{}
	_ driver.QueryerContext     = &tdriverConn491{}
	_ driver.SessionResetter    = &tdriverConn491{}
	_ driver.Conn               = &tdriverConn492{}
	_ driver.ConnBeginTx        = &tdriverConn492{}
	_ driver.Execer             = &tdriverConn492{}
	_ driver.NamedValueChecker  = &tdriverConn492{}
	_ driver.Pinger             = &tdriverConn492{}
	_ driver.Queryer            = &tdriverConn492{}
	_ driver.QueryerContext     = &tdriverConn492{}
	_ driver.SessionResetter    = &tdriverConn492{}
	_ driver.Conn               = &tdriverConn493{}
	_ driver.ConnBeginTx        = &tdriverConn493{}
	_ driver.ExecerContext      = &tdriverConn493{}
	_ driver.NamedValueChecker  = &tdriverConn493{}
	_ driver.Pinger             = &tdriverConn493{}
	_ driver.Queryer            = &tdriverConn493{}
	_ driver.QueryerContext     = &tdriverConn493{}
	_ driver.SessionResetter    = &tdriverConn493{}
	_ driver.Conn               = &tdriverConn494{}
	_ driver.ConnPrepareContext = &tdriverConn494{}
	_ driver.Execer             = &tdriverConn494{}
	_ driver.ExecerContext      = &tdriverConn494{}
	_ driver.NamedValueChecker  = &tdriverConn494{}
	_ driver.Pinger             = &tdriverConn494{}
	_ driver.Queryer            = &tdriverConn494{}
	_ driver.QueryerContext     = &tdriverConn494{}
	_ driver.Conn               = &tdriverConn495{}
	_ driver.ConnPrepareContext = &tdriverConn495{}
	_ driver.Execer             = &tdriverConn495{}
	_ driver.ExecerContext      = &tdriverConn495{}
	_ driver.NamedValueChecker  = &tdriverConn495{}
	_ driver.Pinger             = &tdriverConn495{}
	_ driver.Queryer            = &tdriverConn495{}
	_ driver.SessionResetter    = &tdriverConn495{}
	_ driver.Conn               = &tdriverConn496{}
	_ driver.ConnPrepareContext = &tdriverConn496{}
	_ driver.Execer             = &tdriverConn496{}
	_ driver.ExecerContext      = &tdriverConn496{}
	_ driver.NamedValueChecker  = &tdriverConn496{}
	_ driver.Pinger             = &tdriverConn496{}
	_ driver.QueryerContext     = &tdriverConn496{}
	_ driver.SessionResetter    = &tdriverConn496{}
	_ driver.Conn               = &tdriverConn497{}
	_ driver.ConnPrepareContext = &tdriverConn497{}
	_ driver.Execer             = &tdriverConn497{}
	_ driver.ExecerContext      = &tdriverConn497{}
	_ driver.NamedValueChecker  = &tdriverConn497{}
	_ driver.Queryer            = &tdriverConn497{}
	_ driver.QueryerContext     = &tdriverConn497{}
	_ driver.SessionResetter    = &tdriverConn497{}
	_ driver.Conn               = &tdriverConn498{}
	_ driver.ConnPrepareContext = &tdriverConn498{}
	_ driver.Execer             = &tdriverConn498{}
	_ driver.ExecerContext      = &tdriverConn498{}
	_ driver.Pinger             = &tdriverConn498{}
	_ driver.Queryer            = &tdriverConn498{}
	_ driver.QueryerContext     = &tdriverConn498{}
	_ driver.SessionResetter    = &tdriverConn498{}
	_ driver.Conn               = &tdriverConn499{}
	_ driver.ConnPrepareContext = &tdriverConn499{}
	_ driver.Execer             = &tdriverConn499{}
	_ driver.NamedValueChecker  = &tdriverConn499{}
	_ driver.Pinger             = &tdriverConn499{}
	_ driver.Queryer            = &tdriverConn499{}
	_ driver.QueryerContext     = &tdriverConn499{}
	_ driver.SessionResetter    = &tdriverConn499{}
	_ driver.Conn               = &tdriverConn500{}
	_ driver.ConnPrepareContext = &tdriverConn500{}
	_ driver.ExecerContext      = &tdriverConn500{}
	_ driver.NamedValueChecker  = &tdriverConn500{}
	_ driver.Pinger             = &tdriverConn500{}
	_ driver.Queryer            = &tdriverConn500{}
	_ driver.QueryerContext     = &tdriverConn500{}
	_ driver.SessionResetter    = &tdriverConn500{}
	_ driver.Conn               = &tdriverConn501{}
	_ driver.Execer             = &tdriverConn501{}
	_ driver.ExecerContext      = &tdriverConn501{}
	_ driver.NamedValueChecker  = &tdriverConn501{}
	_ driver.Pinger             = &tdriverConn501{}
	_ driver.Queryer            = &tdriverConn501{}
	_ driver.QueryerContext     = &tdriverConn501{}
	_ driver.SessionResetter    = &tdriverConn501{}
	_ driver.Conn               = &tdriverConn502{}
	_ driver.ConnBeginTx        = &tdriverConn502{}
	_ driver.ConnPrepareContext = &tdriverConn502{}
	_ driver.Execer             = &tdriverConn502{}
	_ driver.ExecerContext      = &tdriverConn502{}
	_ driver.NamedValueChecker  = &tdriverConn502{}
	_ driver.Pinger             = &tdriverConn502{}
	_ driver.Queryer            = &tdriverConn502{}
	_ driver.QueryerContext     = &tdriverConn502{}
	_ driver.Conn               = &tdriverConn503{}
	_ driver.ConnBeginTx        = &tdriverConn503{}
	_ driver.ConnPrepareContext = &tdriverConn503{}
	_ driver.Execer             = &tdriverConn503{}
	_ driver.ExecerContext      = &tdriverConn503{}
	_ driver.NamedValueChecker  = &tdriverConn503{}
	_ driver.Pinger             = &tdriverConn503{}
	_ driver.Queryer            = &tdriverConn503{}
	_ driver.SessionResetter    = &tdriverConn503{}
	_ driver.Conn               = &tdriverConn504{}
	_ driver.ConnBeginTx        = &tdriverConn504{}
	_ driver.ConnPrepareContext = &tdriverConn504{}
	_ driver.Execer             = &tdriverConn504{}
	_ driver.ExecerContext      = &tdriverConn504{}
	_ driver.NamedValueChecker  = &tdriverConn504{}
	_ driver.Pinger             = &tdriverConn504{}
	_ driver.QueryerContext     = &tdriverConn504{}
	_ driver.SessionResetter    = &tdriverConn504{}
	_ driver.Conn               = &tdriverConn505{}
	_ driver.ConnBeginTx        = &tdriverConn505{}
	_ driver.ConnPrepareContext = &tdriverConn505{}
	_ driver.Execer             = &tdriverConn505{}
	_ driver.ExecerContext      = &tdriverConn505{}
	_ driver.NamedValueChecker  = &tdriverConn505{}
	_ driver.Queryer            = &tdriverConn505{}
	_ driver.QueryerContext     = &tdriverConn505{}
	_ driver.SessionResetter    = &tdriverConn505{}
	_ driver.Conn               = &tdriverConn506{}
	_ driver.ConnBeginTx        = &tdriverConn506{}
	_ driver.ConnPrepareContext = &tdriverConn506{}
	_ driver.Execer             = &tdriverConn506{}
	_ driver.ExecerContext      = &tdriverConn506{}
	_ driver.Pinger             = &tdriverConn506{}
	_ driver.Queryer            = &tdriverConn506{}
	_ driver.QueryerContext     = &tdriverConn506{}
	_ driver.SessionResetter    = &tdriverConn506{}
	_ driver.Conn               = &tdriverConn507{}
	_ driver.ConnBeginTx        = &tdriverConn507{}
	_ driver.ConnPrepareContext = &tdriverConn507{}
	_ driver.Execer             = &tdriverConn507{}
	_ driver.NamedValueChecker  = &tdriverConn507{}
	_ driver.Pinger             = &tdriverConn507{}
	_ driver.Queryer            = &tdriverConn507{}
	_ driver.QueryerContext     = &tdriverConn507{}
	_ driver.SessionResetter    = &tdriverConn507{}
	_ driver.Conn               = &tdriverConn508{}
	_ driver.ConnBeginTx        = &tdriverConn508{}
	_ driver.ConnPrepareContext = &tdriverConn508{}
	_ driver.ExecerContext      = &tdriverConn508{}
	_ driver.NamedValueChecker  = &tdriverConn508{}
	_ driver.Pinger             = &tdriverConn508{}
	_ driver.Queryer            = &tdriverConn508{}
	_ driver.QueryerContext     = &tdriverConn508{}
	_ driver.SessionResetter    = &tdriverConn508{}
	_ driver.Conn               = &tdriverConn509{}
	_ driver.ConnBeginTx        = &tdriverConn509{}
	_ driver.Execer             = &tdriverConn509{}
	_ driver.ExecerContext      = &tdriverConn509{}
	_ driver.NamedValueChecker  = &tdriverConn509{}
	_ driver.Pinger             = &tdriverConn509{}
	_ driver.Queryer            = &tdriverConn509{}
	_ driver.QueryerContext     = &tdriverConn509{}
	_ driver.SessionResetter    = &tdriverConn509{}
	_ driver.Conn               = &tdriverConn510{}
	_ driver.ConnPrepareContext = &tdriverConn510{}
	_ driver.Execer             = &tdriverConn510{}
	_ driver.ExecerContext      = &tdriverConn510{}
	_ driver.NamedValueChecker  = &tdriverConn510{}
	_ driver.Pinger             = &tdriverConn510{}
	_ driver.Queryer            = &tdriverConn510{}
	_ driver.QueryerContext     = &tdriverConn510{}
	_ driver.SessionResetter    = &tdriverConn510{}
	_ driver.Conn               = &tdriverConn511{}
	_ driver.ConnBeginTx        = &tdriverConn511{}
	_ driver.ConnPrepareContext = &tdriverConn511{}
	_ driver.Execer             = &tdriverConn511{}
	_ driver.ExecerContext      = &tdriverConn511{}
	_ driver.NamedValueChecker  = &tdriverConn511{}
	_ driver.Pinger             = &tdriverConn511{}
	_ driver.Queryer            = &tdriverConn511{}
	_ driver.QueryerContext     = &tdriverConn511{}
	_ driver.SessionResetter    = &tdriverConn511{}
)

func (odriverConn0 *tdriverConn0) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn0.r, odriverConn0.setup)
}
func (odriverConn0 *tdriverConn0) Close() error {
	return traceDCClose(odriverConn0.r, odriverConn0.setup)
}
func (odriverConn0 *tdriverConn0) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn0.r, odriverConn0.setup, query)
}

func (odriverConn1 *tdriverConn1) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn1.r, odriverConn1.setup)
}
func (odriverConn1 *tdriverConn1) Close() error {
	return traceDCClose(odriverConn1.r, odriverConn1.setup)
}
func (odriverConn1 *tdriverConn1) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn1.r, odriverConn1.setup, query)
}
func (odriverConn1 *tdriverConn1) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn1.r, odriverConn1.setup, ctx, opts)
}

func (odriverConn2 *tdriverConn2) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn2.r, odriverConn2.setup)
}
func (odriverConn2 *tdriverConn2) Close() error {
	return traceDCClose(odriverConn2.r, odriverConn2.setup)
}
func (odriverConn2 *tdriverConn2) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn2.r, odriverConn2.setup, query)
}
func (odriverConn2 *tdriverConn2) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn2.r, odriverConn2.setup, ctx, query)
}

func (odriverConn3 *tdriverConn3) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn3.r, odriverConn3.setup)
}
func (odriverConn3 *tdriverConn3) Close() error {
	return traceDCClose(odriverConn3.r, odriverConn3.setup)
}
func (odriverConn3 *tdriverConn3) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn3.r, odriverConn3.setup, query)
}
func (odriverConn3 *tdriverConn3) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn3.r, odriverConn3.setup, query, args)
}

func (odriverConn4 *tdriverConn4) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn4.r, odriverConn4.setup)
}
func (odriverConn4 *tdriverConn4) Close() error {
	return traceDCClose(odriverConn4.r, odriverConn4.setup)
}
func (odriverConn4 *tdriverConn4) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn4.r, odriverConn4.setup, query)
}
func (odriverConn4 *tdriverConn4) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn4.r, odriverConn4.setup, ctx, query, args)
}

func (odriverConn5 *tdriverConn5) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn5.r, odriverConn5.setup)
}
func (odriverConn5 *tdriverConn5) Close() error {
	return traceDCClose(odriverConn5.r, odriverConn5.setup)
}
func (odriverConn5 *tdriverConn5) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn5.r, odriverConn5.setup, query)
}
func (odriverConn5 *tdriverConn5) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn5.r, odriverConn5.setup, param0)
}

func (odriverConn6 *tdriverConn6) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn6.r, odriverConn6.setup)
}
func (odriverConn6 *tdriverConn6) Close() error {
	return traceDCClose(odriverConn6.r, odriverConn6.setup)
}
func (odriverConn6 *tdriverConn6) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn6.r, odriverConn6.setup, query)
}
func (odriverConn6 *tdriverConn6) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn6.r, odriverConn6.setup, ctx)
}

func (odriverConn7 *tdriverConn7) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn7.r, odriverConn7.setup)
}
func (odriverConn7 *tdriverConn7) Close() error {
	return traceDCClose(odriverConn7.r, odriverConn7.setup)
}
func (odriverConn7 *tdriverConn7) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn7.r, odriverConn7.setup, query)
}
func (odriverConn7 *tdriverConn7) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn7.r, odriverConn7.setup, query, args)
}

func (odriverConn8 *tdriverConn8) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn8.r, odriverConn8.setup)
}
func (odriverConn8 *tdriverConn8) Close() error {
	return traceDCClose(odriverConn8.r, odriverConn8.setup)
}
func (odriverConn8 *tdriverConn8) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn8.r, odriverConn8.setup, query)
}
func (odriverConn8 *tdriverConn8) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn8.r, odriverConn8.setup, ctx, query, args)
}

func (odriverConn9 *tdriverConn9) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn9.r, odriverConn9.setup)
}
func (odriverConn9 *tdriverConn9) Close() error {
	return traceDCClose(odriverConn9.r, odriverConn9.setup)
}
func (odriverConn9 *tdriverConn9) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn9.r, odriverConn9.setup, query)
}
func (odriverConn9 *tdriverConn9) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn9.r, odriverConn9.setup, ctx)
}

func (odriverConn10 *tdriverConn10) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn10.r, odriverConn10.setup)
}
func (odriverConn10 *tdriverConn10) Close() error {
	return traceDCClose(odriverConn10.r, odriverConn10.setup)
}
func (odriverConn10 *tdriverConn10) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn10.r, odriverConn10.setup, query)
}
func (odriverConn10 *tdriverConn10) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn10.r, odriverConn10.setup, ctx, opts)
}
func (odriverConn10 *tdriverConn10) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn10.r, odriverConn10.setup, ctx, query)
}

func (odriverConn11 *tdriverConn11) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn11.r, odriverConn11.setup)
}
func (odriverConn11 *tdriverConn11) Close() error {
	return traceDCClose(odriverConn11.r, odriverConn11.setup)
}
func (odriverConn11 *tdriverConn11) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn11.r, odriverConn11.setup, query)
}
func (odriverConn11 *tdriverConn11) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn11.r, odriverConn11.setup, ctx, opts)
}
func (odriverConn11 *tdriverConn11) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn11.r, odriverConn11.setup, query, args)
}

func (odriverConn12 *tdriverConn12) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn12.r, odriverConn12.setup)
}
func (odriverConn12 *tdriverConn12) Close() error {
	return traceDCClose(odriverConn12.r, odriverConn12.setup)
}
func (odriverConn12 *tdriverConn12) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn12.r, odriverConn12.setup, query)
}
func (odriverConn12 *tdriverConn12) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn12.r, odriverConn12.setup, ctx, opts)
}
func (odriverConn12 *tdriverConn12) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn12.r, odriverConn12.setup, ctx, query, args)
}

func (odriverConn13 *tdriverConn13) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn13.r, odriverConn13.setup)
}
func (odriverConn13 *tdriverConn13) Close() error {
	return traceDCClose(odriverConn13.r, odriverConn13.setup)
}
func (odriverConn13 *tdriverConn13) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn13.r, odriverConn13.setup, query)
}
func (odriverConn13 *tdriverConn13) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn13.r, odriverConn13.setup, ctx, opts)
}
func (odriverConn13 *tdriverConn13) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn13.r, odriverConn13.setup, param0)
}

func (odriverConn14 *tdriverConn14) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn14.r, odriverConn14.setup)
}
func (odriverConn14 *tdriverConn14) Close() error {
	return traceDCClose(odriverConn14.r, odriverConn14.setup)
}
func (odriverConn14 *tdriverConn14) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn14.r, odriverConn14.setup, query)
}
func (odriverConn14 *tdriverConn14) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn14.r, odriverConn14.setup, ctx, opts)
}
func (odriverConn14 *tdriverConn14) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn14.r, odriverConn14.setup, ctx)
}

func (odriverConn15 *tdriverConn15) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn15.r, odriverConn15.setup)
}
func (odriverConn15 *tdriverConn15) Close() error {
	return traceDCClose(odriverConn15.r, odriverConn15.setup)
}
func (odriverConn15 *tdriverConn15) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn15.r, odriverConn15.setup, query)
}
func (odriverConn15 *tdriverConn15) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn15.r, odriverConn15.setup, ctx, opts)
}
func (odriverConn15 *tdriverConn15) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn15.r, odriverConn15.setup, query, args)
}

func (odriverConn16 *tdriverConn16) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn16.r, odriverConn16.setup)
}
func (odriverConn16 *tdriverConn16) Close() error {
	return traceDCClose(odriverConn16.r, odriverConn16.setup)
}
func (odriverConn16 *tdriverConn16) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn16.r, odriverConn16.setup, query)
}
func (odriverConn16 *tdriverConn16) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn16.r, odriverConn16.setup, ctx, opts)
}
func (odriverConn16 *tdriverConn16) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn16.r, odriverConn16.setup, ctx, query, args)
}

func (odriverConn17 *tdriverConn17) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn17.r, odriverConn17.setup)
}
func (odriverConn17 *tdriverConn17) Close() error {
	return traceDCClose(odriverConn17.r, odriverConn17.setup)
}
func (odriverConn17 *tdriverConn17) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn17.r, odriverConn17.setup, query)
}
func (odriverConn17 *tdriverConn17) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn17.r, odriverConn17.setup, ctx, opts)
}
func (odriverConn17 *tdriverConn17) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn17.r, odriverConn17.setup, ctx)
}

func (odriverConn18 *tdriverConn18) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn18.r, odriverConn18.setup)
}
func (odriverConn18 *tdriverConn18) Close() error {
	return traceDCClose(odriverConn18.r, odriverConn18.setup)
}
func (odriverConn18 *tdriverConn18) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn18.r, odriverConn18.setup, query)
}
func (odriverConn18 *tdriverConn18) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn18.r, odriverConn18.setup, ctx, query)
}
func (odriverConn18 *tdriverConn18) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn18.r, odriverConn18.setup, query, args)
}

func (odriverConn19 *tdriverConn19) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn19.r, odriverConn19.setup)
}
func (odriverConn19 *tdriverConn19) Close() error {
	return traceDCClose(odriverConn19.r, odriverConn19.setup)
}
func (odriverConn19 *tdriverConn19) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn19.r, odriverConn19.setup, query)
}
func (odriverConn19 *tdriverConn19) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn19.r, odriverConn19.setup, ctx, query)
}
func (odriverConn19 *tdriverConn19) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn19.r, odriverConn19.setup, ctx, query, args)
}

func (odriverConn20 *tdriverConn20) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn20.r, odriverConn20.setup)
}
func (odriverConn20 *tdriverConn20) Close() error {
	return traceDCClose(odriverConn20.r, odriverConn20.setup)
}
func (odriverConn20 *tdriverConn20) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn20.r, odriverConn20.setup, query)
}
func (odriverConn20 *tdriverConn20) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn20.r, odriverConn20.setup, ctx, query)
}
func (odriverConn20 *tdriverConn20) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn20.r, odriverConn20.setup, param0)
}

func (odriverConn21 *tdriverConn21) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn21.r, odriverConn21.setup)
}
func (odriverConn21 *tdriverConn21) Close() error {
	return traceDCClose(odriverConn21.r, odriverConn21.setup)
}
func (odriverConn21 *tdriverConn21) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn21.r, odriverConn21.setup, query)
}
func (odriverConn21 *tdriverConn21) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn21.r, odriverConn21.setup, ctx, query)
}
func (odriverConn21 *tdriverConn21) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn21.r, odriverConn21.setup, ctx)
}

func (odriverConn22 *tdriverConn22) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn22.r, odriverConn22.setup)
}
func (odriverConn22 *tdriverConn22) Close() error {
	return traceDCClose(odriverConn22.r, odriverConn22.setup)
}
func (odriverConn22 *tdriverConn22) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn22.r, odriverConn22.setup, query)
}
func (odriverConn22 *tdriverConn22) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn22.r, odriverConn22.setup, ctx, query)
}
func (odriverConn22 *tdriverConn22) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn22.r, odriverConn22.setup, query, args)
}

func (odriverConn23 *tdriverConn23) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn23.r, odriverConn23.setup)
}
func (odriverConn23 *tdriverConn23) Close() error {
	return traceDCClose(odriverConn23.r, odriverConn23.setup)
}
func (odriverConn23 *tdriverConn23) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn23.r, odriverConn23.setup, query)
}
func (odriverConn23 *tdriverConn23) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn23.r, odriverConn23.setup, ctx, query)
}
func (odriverConn23 *tdriverConn23) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn23.r, odriverConn23.setup, ctx, query, args)
}

func (odriverConn24 *tdriverConn24) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn24.r, odriverConn24.setup)
}
func (odriverConn24 *tdriverConn24) Close() error {
	return traceDCClose(odriverConn24.r, odriverConn24.setup)
}
func (odriverConn24 *tdriverConn24) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn24.r, odriverConn24.setup, query)
}
func (odriverConn24 *tdriverConn24) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn24.r, odriverConn24.setup, ctx, query)
}
func (odriverConn24 *tdriverConn24) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn24.r, odriverConn24.setup, ctx)
}

func (odriverConn25 *tdriverConn25) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn25.r, odriverConn25.setup)
}
func (odriverConn25 *tdriverConn25) Close() error {
	return traceDCClose(odriverConn25.r, odriverConn25.setup)
}
func (odriverConn25 *tdriverConn25) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn25.r, odriverConn25.setup, query)
}
func (odriverConn25 *tdriverConn25) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn25.r, odriverConn25.setup, query, args)
}
func (odriverConn25 *tdriverConn25) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn25.r, odriverConn25.setup, ctx, query, args)
}

func (odriverConn26 *tdriverConn26) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn26.r, odriverConn26.setup)
}
func (odriverConn26 *tdriverConn26) Close() error {
	return traceDCClose(odriverConn26.r, odriverConn26.setup)
}
func (odriverConn26 *tdriverConn26) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn26.r, odriverConn26.setup, query)
}
func (odriverConn26 *tdriverConn26) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn26.r, odriverConn26.setup, query, args)
}
func (odriverConn26 *tdriverConn26) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn26.r, odriverConn26.setup, param0)
}

func (odriverConn27 *tdriverConn27) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn27.r, odriverConn27.setup)
}
func (odriverConn27 *tdriverConn27) Close() error {
	return traceDCClose(odriverConn27.r, odriverConn27.setup)
}
func (odriverConn27 *tdriverConn27) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn27.r, odriverConn27.setup, query)
}
func (odriverConn27 *tdriverConn27) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn27.r, odriverConn27.setup, query, args)
}
func (odriverConn27 *tdriverConn27) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn27.r, odriverConn27.setup, ctx)
}

func (odriverConn28 *tdriverConn28) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn28.r, odriverConn28.setup)
}
func (odriverConn28 *tdriverConn28) Close() error {
	return traceDCClose(odriverConn28.r, odriverConn28.setup)
}
func (odriverConn28 *tdriverConn28) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn28.r, odriverConn28.setup, query)
}
func (odriverConn28 *tdriverConn28) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn28.r, odriverConn28.setup, query, args)
}
func (odriverConn28 *tdriverConn28) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn28.r, odriverConn28.setup, query, args)
}

func (odriverConn29 *tdriverConn29) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn29.r, odriverConn29.setup)
}
func (odriverConn29 *tdriverConn29) Close() error {
	return traceDCClose(odriverConn29.r, odriverConn29.setup)
}
func (odriverConn29 *tdriverConn29) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn29.r, odriverConn29.setup, query)
}
func (odriverConn29 *tdriverConn29) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn29.r, odriverConn29.setup, query, args)
}
func (odriverConn29 *tdriverConn29) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn29.r, odriverConn29.setup, ctx, query, args)
}

func (odriverConn30 *tdriverConn30) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn30.r, odriverConn30.setup)
}
func (odriverConn30 *tdriverConn30) Close() error {
	return traceDCClose(odriverConn30.r, odriverConn30.setup)
}
func (odriverConn30 *tdriverConn30) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn30.r, odriverConn30.setup, query)
}
func (odriverConn30 *tdriverConn30) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn30.r, odriverConn30.setup, query, args)
}
func (odriverConn30 *tdriverConn30) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn30.r, odriverConn30.setup, ctx)
}

func (odriverConn31 *tdriverConn31) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn31.r, odriverConn31.setup)
}
func (odriverConn31 *tdriverConn31) Close() error {
	return traceDCClose(odriverConn31.r, odriverConn31.setup)
}
func (odriverConn31 *tdriverConn31) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn31.r, odriverConn31.setup, query)
}
func (odriverConn31 *tdriverConn31) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn31.r, odriverConn31.setup, ctx, query, args)
}
func (odriverConn31 *tdriverConn31) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn31.r, odriverConn31.setup, param0)
}

func (odriverConn32 *tdriverConn32) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn32.r, odriverConn32.setup)
}
func (odriverConn32 *tdriverConn32) Close() error {
	return traceDCClose(odriverConn32.r, odriverConn32.setup)
}
func (odriverConn32 *tdriverConn32) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn32.r, odriverConn32.setup, query)
}
func (odriverConn32 *tdriverConn32) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn32.r, odriverConn32.setup, ctx, query, args)
}
func (odriverConn32 *tdriverConn32) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn32.r, odriverConn32.setup, ctx)
}

func (odriverConn33 *tdriverConn33) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn33.r, odriverConn33.setup)
}
func (odriverConn33 *tdriverConn33) Close() error {
	return traceDCClose(odriverConn33.r, odriverConn33.setup)
}
func (odriverConn33 *tdriverConn33) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn33.r, odriverConn33.setup, query)
}
func (odriverConn33 *tdriverConn33) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn33.r, odriverConn33.setup, ctx, query, args)
}
func (odriverConn33 *tdriverConn33) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn33.r, odriverConn33.setup, query, args)
}

func (odriverConn34 *tdriverConn34) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn34.r, odriverConn34.setup)
}
func (odriverConn34 *tdriverConn34) Close() error {
	return traceDCClose(odriverConn34.r, odriverConn34.setup)
}
func (odriverConn34 *tdriverConn34) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn34.r, odriverConn34.setup, query)
}
func (odriverConn34 *tdriverConn34) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn34.r, odriverConn34.setup, ctx, query, args)
}
func (odriverConn34 *tdriverConn34) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn34.r, odriverConn34.setup, ctx, query, args)
}

func (odriverConn35 *tdriverConn35) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn35.r, odriverConn35.setup)
}
func (odriverConn35 *tdriverConn35) Close() error {
	return traceDCClose(odriverConn35.r, odriverConn35.setup)
}
func (odriverConn35 *tdriverConn35) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn35.r, odriverConn35.setup, query)
}
func (odriverConn35 *tdriverConn35) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn35.r, odriverConn35.setup, ctx, query, args)
}
func (odriverConn35 *tdriverConn35) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn35.r, odriverConn35.setup, ctx)
}

func (odriverConn36 *tdriverConn36) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn36.r, odriverConn36.setup)
}
func (odriverConn36 *tdriverConn36) Close() error {
	return traceDCClose(odriverConn36.r, odriverConn36.setup)
}
func (odriverConn36 *tdriverConn36) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn36.r, odriverConn36.setup, query)
}
func (odriverConn36 *tdriverConn36) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn36.r, odriverConn36.setup, param0)
}
func (odriverConn36 *tdriverConn36) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn36.r, odriverConn36.setup, ctx)
}

func (odriverConn37 *tdriverConn37) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn37.r, odriverConn37.setup)
}
func (odriverConn37 *tdriverConn37) Close() error {
	return traceDCClose(odriverConn37.r, odriverConn37.setup)
}
func (odriverConn37 *tdriverConn37) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn37.r, odriverConn37.setup, query)
}
func (odriverConn37 *tdriverConn37) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn37.r, odriverConn37.setup, param0)
}
func (odriverConn37 *tdriverConn37) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn37.r, odriverConn37.setup, query, args)
}

func (odriverConn38 *tdriverConn38) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn38.r, odriverConn38.setup)
}
func (odriverConn38 *tdriverConn38) Close() error {
	return traceDCClose(odriverConn38.r, odriverConn38.setup)
}
func (odriverConn38 *tdriverConn38) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn38.r, odriverConn38.setup, query)
}
func (odriverConn38 *tdriverConn38) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn38.r, odriverConn38.setup, param0)
}
func (odriverConn38 *tdriverConn38) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn38.r, odriverConn38.setup, ctx, query, args)
}

func (odriverConn39 *tdriverConn39) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn39.r, odriverConn39.setup)
}
func (odriverConn39 *tdriverConn39) Close() error {
	return traceDCClose(odriverConn39.r, odriverConn39.setup)
}
func (odriverConn39 *tdriverConn39) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn39.r, odriverConn39.setup, query)
}
func (odriverConn39 *tdriverConn39) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn39.r, odriverConn39.setup, param0)
}
func (odriverConn39 *tdriverConn39) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn39.r, odriverConn39.setup, ctx)
}

func (odriverConn40 *tdriverConn40) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn40.r, odriverConn40.setup)
}
func (odriverConn40 *tdriverConn40) Close() error {
	return traceDCClose(odriverConn40.r, odriverConn40.setup)
}
func (odriverConn40 *tdriverConn40) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn40.r, odriverConn40.setup, query)
}
func (odriverConn40 *tdriverConn40) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn40.r, odriverConn40.setup, ctx)
}
func (odriverConn40 *tdriverConn40) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn40.r, odriverConn40.setup, query, args)
}

func (odriverConn41 *tdriverConn41) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn41.r, odriverConn41.setup)
}
func (odriverConn41 *tdriverConn41) Close() error {
	return traceDCClose(odriverConn41.r, odriverConn41.setup)
}
func (odriverConn41 *tdriverConn41) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn41.r, odriverConn41.setup, query)
}
func (odriverConn41 *tdriverConn41) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn41.r, odriverConn41.setup, ctx)
}
func (odriverConn41 *tdriverConn41) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn41.r, odriverConn41.setup, ctx, query, args)
}

func (odriverConn42 *tdriverConn42) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn42.r, odriverConn42.setup)
}
func (odriverConn42 *tdriverConn42) Close() error {
	return traceDCClose(odriverConn42.r, odriverConn42.setup)
}
func (odriverConn42 *tdriverConn42) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn42.r, odriverConn42.setup, query)
}
func (odriverConn42 *tdriverConn42) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn42.r, odriverConn42.setup, ctx)
}
func (odriverConn42 *tdriverConn42) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn42.r, odriverConn42.setup, ctx)
}

func (odriverConn43 *tdriverConn43) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn43.r, odriverConn43.setup)
}
func (odriverConn43 *tdriverConn43) Close() error {
	return traceDCClose(odriverConn43.r, odriverConn43.setup)
}
func (odriverConn43 *tdriverConn43) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn43.r, odriverConn43.setup, query)
}
func (odriverConn43 *tdriverConn43) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn43.r, odriverConn43.setup, query, args)
}
func (odriverConn43 *tdriverConn43) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn43.r, odriverConn43.setup, ctx, query, args)
}

func (odriverConn44 *tdriverConn44) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn44.r, odriverConn44.setup)
}
func (odriverConn44 *tdriverConn44) Close() error {
	return traceDCClose(odriverConn44.r, odriverConn44.setup)
}
func (odriverConn44 *tdriverConn44) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn44.r, odriverConn44.setup, query)
}
func (odriverConn44 *tdriverConn44) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn44.r, odriverConn44.setup, query, args)
}
func (odriverConn44 *tdriverConn44) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn44.r, odriverConn44.setup, ctx)
}

func (odriverConn45 *tdriverConn45) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn45.r, odriverConn45.setup)
}
func (odriverConn45 *tdriverConn45) Close() error {
	return traceDCClose(odriverConn45.r, odriverConn45.setup)
}
func (odriverConn45 *tdriverConn45) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn45.r, odriverConn45.setup, query)
}
func (odriverConn45 *tdriverConn45) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn45.r, odriverConn45.setup, ctx, query, args)
}
func (odriverConn45 *tdriverConn45) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn45.r, odriverConn45.setup, ctx)
}

func (odriverConn46 *tdriverConn46) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn46.r, odriverConn46.setup)
}
func (odriverConn46 *tdriverConn46) Close() error {
	return traceDCClose(odriverConn46.r, odriverConn46.setup)
}
func (odriverConn46 *tdriverConn46) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn46.r, odriverConn46.setup, query)
}
func (odriverConn46 *tdriverConn46) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn46.r, odriverConn46.setup, ctx, opts)
}
func (odriverConn46 *tdriverConn46) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn46.r, odriverConn46.setup, ctx, query)
}
func (odriverConn46 *tdriverConn46) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn46.r, odriverConn46.setup, query, args)
}

func (odriverConn47 *tdriverConn47) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn47.r, odriverConn47.setup)
}
func (odriverConn47 *tdriverConn47) Close() error {
	return traceDCClose(odriverConn47.r, odriverConn47.setup)
}
func (odriverConn47 *tdriverConn47) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn47.r, odriverConn47.setup, query)
}
func (odriverConn47 *tdriverConn47) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn47.r, odriverConn47.setup, ctx, opts)
}
func (odriverConn47 *tdriverConn47) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn47.r, odriverConn47.setup, ctx, query)
}
func (odriverConn47 *tdriverConn47) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn47.r, odriverConn47.setup, ctx, query, args)
}

func (odriverConn48 *tdriverConn48) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn48.r, odriverConn48.setup)
}
func (odriverConn48 *tdriverConn48) Close() error {
	return traceDCClose(odriverConn48.r, odriverConn48.setup)
}
func (odriverConn48 *tdriverConn48) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn48.r, odriverConn48.setup, query)
}
func (odriverConn48 *tdriverConn48) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn48.r, odriverConn48.setup, ctx, opts)
}
func (odriverConn48 *tdriverConn48) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn48.r, odriverConn48.setup, ctx, query)
}
func (odriverConn48 *tdriverConn48) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn48.r, odriverConn48.setup, param0)
}

func (odriverConn49 *tdriverConn49) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn49.r, odriverConn49.setup)
}
func (odriverConn49 *tdriverConn49) Close() error {
	return traceDCClose(odriverConn49.r, odriverConn49.setup)
}
func (odriverConn49 *tdriverConn49) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn49.r, odriverConn49.setup, query)
}
func (odriverConn49 *tdriverConn49) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn49.r, odriverConn49.setup, ctx, opts)
}
func (odriverConn49 *tdriverConn49) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn49.r, odriverConn49.setup, ctx, query)
}
func (odriverConn49 *tdriverConn49) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn49.r, odriverConn49.setup, ctx)
}

func (odriverConn50 *tdriverConn50) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn50.r, odriverConn50.setup)
}
func (odriverConn50 *tdriverConn50) Close() error {
	return traceDCClose(odriverConn50.r, odriverConn50.setup)
}
func (odriverConn50 *tdriverConn50) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn50.r, odriverConn50.setup, query)
}
func (odriverConn50 *tdriverConn50) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn50.r, odriverConn50.setup, ctx, opts)
}
func (odriverConn50 *tdriverConn50) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn50.r, odriverConn50.setup, ctx, query)
}
func (odriverConn50 *tdriverConn50) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn50.r, odriverConn50.setup, query, args)
}

func (odriverConn51 *tdriverConn51) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn51.r, odriverConn51.setup)
}
func (odriverConn51 *tdriverConn51) Close() error {
	return traceDCClose(odriverConn51.r, odriverConn51.setup)
}
func (odriverConn51 *tdriverConn51) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn51.r, odriverConn51.setup, query)
}
func (odriverConn51 *tdriverConn51) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn51.r, odriverConn51.setup, ctx, opts)
}
func (odriverConn51 *tdriverConn51) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn51.r, odriverConn51.setup, ctx, query)
}
func (odriverConn51 *tdriverConn51) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn51.r, odriverConn51.setup, ctx, query, args)
}

func (odriverConn52 *tdriverConn52) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn52.r, odriverConn52.setup)
}
func (odriverConn52 *tdriverConn52) Close() error {
	return traceDCClose(odriverConn52.r, odriverConn52.setup)
}
func (odriverConn52 *tdriverConn52) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn52.r, odriverConn52.setup, query)
}
func (odriverConn52 *tdriverConn52) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn52.r, odriverConn52.setup, ctx, opts)
}
func (odriverConn52 *tdriverConn52) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn52.r, odriverConn52.setup, ctx, query)
}
func (odriverConn52 *tdriverConn52) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn52.r, odriverConn52.setup, ctx)
}

func (odriverConn53 *tdriverConn53) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn53.r, odriverConn53.setup)
}
func (odriverConn53 *tdriverConn53) Close() error {
	return traceDCClose(odriverConn53.r, odriverConn53.setup)
}
func (odriverConn53 *tdriverConn53) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn53.r, odriverConn53.setup, query)
}
func (odriverConn53 *tdriverConn53) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn53.r, odriverConn53.setup, ctx, opts)
}
func (odriverConn53 *tdriverConn53) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn53.r, odriverConn53.setup, query, args)
}
func (odriverConn53 *tdriverConn53) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn53.r, odriverConn53.setup, ctx, query, args)
}

func (odriverConn54 *tdriverConn54) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn54.r, odriverConn54.setup)
}
func (odriverConn54 *tdriverConn54) Close() error {
	return traceDCClose(odriverConn54.r, odriverConn54.setup)
}
func (odriverConn54 *tdriverConn54) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn54.r, odriverConn54.setup, query)
}
func (odriverConn54 *tdriverConn54) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn54.r, odriverConn54.setup, ctx, opts)
}
func (odriverConn54 *tdriverConn54) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn54.r, odriverConn54.setup, query, args)
}
func (odriverConn54 *tdriverConn54) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn54.r, odriverConn54.setup, param0)
}

func (odriverConn55 *tdriverConn55) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn55.r, odriverConn55.setup)
}
func (odriverConn55 *tdriverConn55) Close() error {
	return traceDCClose(odriverConn55.r, odriverConn55.setup)
}
func (odriverConn55 *tdriverConn55) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn55.r, odriverConn55.setup, query)
}
func (odriverConn55 *tdriverConn55) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn55.r, odriverConn55.setup, ctx, opts)
}
func (odriverConn55 *tdriverConn55) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn55.r, odriverConn55.setup, query, args)
}
func (odriverConn55 *tdriverConn55) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn55.r, odriverConn55.setup, ctx)
}

func (odriverConn56 *tdriverConn56) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn56.r, odriverConn56.setup)
}
func (odriverConn56 *tdriverConn56) Close() error {
	return traceDCClose(odriverConn56.r, odriverConn56.setup)
}
func (odriverConn56 *tdriverConn56) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn56.r, odriverConn56.setup, query)
}
func (odriverConn56 *tdriverConn56) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn56.r, odriverConn56.setup, ctx, opts)
}
func (odriverConn56 *tdriverConn56) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn56.r, odriverConn56.setup, query, args)
}
func (odriverConn56 *tdriverConn56) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn56.r, odriverConn56.setup, query, args)
}

func (odriverConn57 *tdriverConn57) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn57.r, odriverConn57.setup)
}
func (odriverConn57 *tdriverConn57) Close() error {
	return traceDCClose(odriverConn57.r, odriverConn57.setup)
}
func (odriverConn57 *tdriverConn57) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn57.r, odriverConn57.setup, query)
}
func (odriverConn57 *tdriverConn57) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn57.r, odriverConn57.setup, ctx, opts)
}
func (odriverConn57 *tdriverConn57) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn57.r, odriverConn57.setup, query, args)
}
func (odriverConn57 *tdriverConn57) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn57.r, odriverConn57.setup, ctx, query, args)
}

func (odriverConn58 *tdriverConn58) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn58.r, odriverConn58.setup)
}
func (odriverConn58 *tdriverConn58) Close() error {
	return traceDCClose(odriverConn58.r, odriverConn58.setup)
}
func (odriverConn58 *tdriverConn58) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn58.r, odriverConn58.setup, query)
}
func (odriverConn58 *tdriverConn58) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn58.r, odriverConn58.setup, ctx, opts)
}
func (odriverConn58 *tdriverConn58) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn58.r, odriverConn58.setup, query, args)
}
func (odriverConn58 *tdriverConn58) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn58.r, odriverConn58.setup, ctx)
}

func (odriverConn59 *tdriverConn59) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn59.r, odriverConn59.setup)
}
func (odriverConn59 *tdriverConn59) Close() error {
	return traceDCClose(odriverConn59.r, odriverConn59.setup)
}
func (odriverConn59 *tdriverConn59) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn59.r, odriverConn59.setup, query)
}
func (odriverConn59 *tdriverConn59) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn59.r, odriverConn59.setup, ctx, opts)
}
func (odriverConn59 *tdriverConn59) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn59.r, odriverConn59.setup, ctx, query, args)
}
func (odriverConn59 *tdriverConn59) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn59.r, odriverConn59.setup, param0)
}

func (odriverConn60 *tdriverConn60) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn60.r, odriverConn60.setup)
}
func (odriverConn60 *tdriverConn60) Close() error {
	return traceDCClose(odriverConn60.r, odriverConn60.setup)
}
func (odriverConn60 *tdriverConn60) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn60.r, odriverConn60.setup, query)
}
func (odriverConn60 *tdriverConn60) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn60.r, odriverConn60.setup, ctx, opts)
}
func (odriverConn60 *tdriverConn60) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn60.r, odriverConn60.setup, ctx, query, args)
}
func (odriverConn60 *tdriverConn60) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn60.r, odriverConn60.setup, ctx)
}

func (odriverConn61 *tdriverConn61) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn61.r, odriverConn61.setup)
}
func (odriverConn61 *tdriverConn61) Close() error {
	return traceDCClose(odriverConn61.r, odriverConn61.setup)
}
func (odriverConn61 *tdriverConn61) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn61.r, odriverConn61.setup, query)
}
func (odriverConn61 *tdriverConn61) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn61.r, odriverConn61.setup, ctx, opts)
}
func (odriverConn61 *tdriverConn61) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn61.r, odriverConn61.setup, ctx, query, args)
}
func (odriverConn61 *tdriverConn61) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn61.r, odriverConn61.setup, query, args)
}

func (odriverConn62 *tdriverConn62) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn62.r, odriverConn62.setup)
}
func (odriverConn62 *tdriverConn62) Close() error {
	return traceDCClose(odriverConn62.r, odriverConn62.setup)
}
func (odriverConn62 *tdriverConn62) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn62.r, odriverConn62.setup, query)
}
func (odriverConn62 *tdriverConn62) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn62.r, odriverConn62.setup, ctx, opts)
}
func (odriverConn62 *tdriverConn62) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn62.r, odriverConn62.setup, ctx, query, args)
}
func (odriverConn62 *tdriverConn62) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn62.r, odriverConn62.setup, ctx, query, args)
}

func (odriverConn63 *tdriverConn63) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn63.r, odriverConn63.setup)
}
func (odriverConn63 *tdriverConn63) Close() error {
	return traceDCClose(odriverConn63.r, odriverConn63.setup)
}
func (odriverConn63 *tdriverConn63) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn63.r, odriverConn63.setup, query)
}
func (odriverConn63 *tdriverConn63) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn63.r, odriverConn63.setup, ctx, opts)
}
func (odriverConn63 *tdriverConn63) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn63.r, odriverConn63.setup, ctx, query, args)
}
func (odriverConn63 *tdriverConn63) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn63.r, odriverConn63.setup, ctx)
}

func (odriverConn64 *tdriverConn64) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn64.r, odriverConn64.setup)
}
func (odriverConn64 *tdriverConn64) Close() error {
	return traceDCClose(odriverConn64.r, odriverConn64.setup)
}
func (odriverConn64 *tdriverConn64) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn64.r, odriverConn64.setup, query)
}
func (odriverConn64 *tdriverConn64) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn64.r, odriverConn64.setup, ctx, opts)
}
func (odriverConn64 *tdriverConn64) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn64.r, odriverConn64.setup, param0)
}
func (odriverConn64 *tdriverConn64) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn64.r, odriverConn64.setup, ctx)
}

func (odriverConn65 *tdriverConn65) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn65.r, odriverConn65.setup)
}
func (odriverConn65 *tdriverConn65) Close() error {
	return traceDCClose(odriverConn65.r, odriverConn65.setup)
}
func (odriverConn65 *tdriverConn65) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn65.r, odriverConn65.setup, query)
}
func (odriverConn65 *tdriverConn65) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn65.r, odriverConn65.setup, ctx, opts)
}
func (odriverConn65 *tdriverConn65) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn65.r, odriverConn65.setup, param0)
}
func (odriverConn65 *tdriverConn65) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn65.r, odriverConn65.setup, query, args)
}

func (odriverConn66 *tdriverConn66) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn66.r, odriverConn66.setup)
}
func (odriverConn66 *tdriverConn66) Close() error {
	return traceDCClose(odriverConn66.r, odriverConn66.setup)
}
func (odriverConn66 *tdriverConn66) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn66.r, odriverConn66.setup, query)
}
func (odriverConn66 *tdriverConn66) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn66.r, odriverConn66.setup, ctx, opts)
}
func (odriverConn66 *tdriverConn66) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn66.r, odriverConn66.setup, param0)
}
func (odriverConn66 *tdriverConn66) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn66.r, odriverConn66.setup, ctx, query, args)
}

func (odriverConn67 *tdriverConn67) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn67.r, odriverConn67.setup)
}
func (odriverConn67 *tdriverConn67) Close() error {
	return traceDCClose(odriverConn67.r, odriverConn67.setup)
}
func (odriverConn67 *tdriverConn67) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn67.r, odriverConn67.setup, query)
}
func (odriverConn67 *tdriverConn67) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn67.r, odriverConn67.setup, ctx, opts)
}
func (odriverConn67 *tdriverConn67) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn67.r, odriverConn67.setup, param0)
}
func (odriverConn67 *tdriverConn67) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn67.r, odriverConn67.setup, ctx)
}

func (odriverConn68 *tdriverConn68) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn68.r, odriverConn68.setup)
}
func (odriverConn68 *tdriverConn68) Close() error {
	return traceDCClose(odriverConn68.r, odriverConn68.setup)
}
func (odriverConn68 *tdriverConn68) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn68.r, odriverConn68.setup, query)
}
func (odriverConn68 *tdriverConn68) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn68.r, odriverConn68.setup, ctx, opts)
}
func (odriverConn68 *tdriverConn68) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn68.r, odriverConn68.setup, ctx)
}
func (odriverConn68 *tdriverConn68) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn68.r, odriverConn68.setup, query, args)
}

func (odriverConn69 *tdriverConn69) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn69.r, odriverConn69.setup)
}
func (odriverConn69 *tdriverConn69) Close() error {
	return traceDCClose(odriverConn69.r, odriverConn69.setup)
}
func (odriverConn69 *tdriverConn69) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn69.r, odriverConn69.setup, query)
}
func (odriverConn69 *tdriverConn69) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn69.r, odriverConn69.setup, ctx, opts)
}
func (odriverConn69 *tdriverConn69) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn69.r, odriverConn69.setup, ctx)
}
func (odriverConn69 *tdriverConn69) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn69.r, odriverConn69.setup, ctx, query, args)
}

func (odriverConn70 *tdriverConn70) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn70.r, odriverConn70.setup)
}
func (odriverConn70 *tdriverConn70) Close() error {
	return traceDCClose(odriverConn70.r, odriverConn70.setup)
}
func (odriverConn70 *tdriverConn70) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn70.r, odriverConn70.setup, query)
}
func (odriverConn70 *tdriverConn70) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn70.r, odriverConn70.setup, ctx, opts)
}
func (odriverConn70 *tdriverConn70) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn70.r, odriverConn70.setup, ctx)
}
func (odriverConn70 *tdriverConn70) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn70.r, odriverConn70.setup, ctx)
}

func (odriverConn71 *tdriverConn71) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn71.r, odriverConn71.setup)
}
func (odriverConn71 *tdriverConn71) Close() error {
	return traceDCClose(odriverConn71.r, odriverConn71.setup)
}
func (odriverConn71 *tdriverConn71) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn71.r, odriverConn71.setup, query)
}
func (odriverConn71 *tdriverConn71) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn71.r, odriverConn71.setup, ctx, opts)
}
func (odriverConn71 *tdriverConn71) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn71.r, odriverConn71.setup, query, args)
}
func (odriverConn71 *tdriverConn71) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn71.r, odriverConn71.setup, ctx, query, args)
}

func (odriverConn72 *tdriverConn72) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn72.r, odriverConn72.setup)
}
func (odriverConn72 *tdriverConn72) Close() error {
	return traceDCClose(odriverConn72.r, odriverConn72.setup)
}
func (odriverConn72 *tdriverConn72) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn72.r, odriverConn72.setup, query)
}
func (odriverConn72 *tdriverConn72) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn72.r, odriverConn72.setup, ctx, opts)
}
func (odriverConn72 *tdriverConn72) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn72.r, odriverConn72.setup, query, args)
}
func (odriverConn72 *tdriverConn72) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn72.r, odriverConn72.setup, ctx)
}

func (odriverConn73 *tdriverConn73) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn73.r, odriverConn73.setup)
}
func (odriverConn73 *tdriverConn73) Close() error {
	return traceDCClose(odriverConn73.r, odriverConn73.setup)
}
func (odriverConn73 *tdriverConn73) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn73.r, odriverConn73.setup, query)
}
func (odriverConn73 *tdriverConn73) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn73.r, odriverConn73.setup, ctx, opts)
}
func (odriverConn73 *tdriverConn73) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn73.r, odriverConn73.setup, ctx, query, args)
}
func (odriverConn73 *tdriverConn73) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn73.r, odriverConn73.setup, ctx)
}

func (odriverConn74 *tdriverConn74) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn74.r, odriverConn74.setup)
}
func (odriverConn74 *tdriverConn74) Close() error {
	return traceDCClose(odriverConn74.r, odriverConn74.setup)
}
func (odriverConn74 *tdriverConn74) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn74.r, odriverConn74.setup, query)
}
func (odriverConn74 *tdriverConn74) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn74.r, odriverConn74.setup, ctx, query)
}
func (odriverConn74 *tdriverConn74) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn74.r, odriverConn74.setup, query, args)
}
func (odriverConn74 *tdriverConn74) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn74.r, odriverConn74.setup, ctx, query, args)
}

func (odriverConn75 *tdriverConn75) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn75.r, odriverConn75.setup)
}
func (odriverConn75 *tdriverConn75) Close() error {
	return traceDCClose(odriverConn75.r, odriverConn75.setup)
}
func (odriverConn75 *tdriverConn75) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn75.r, odriverConn75.setup, query)
}
func (odriverConn75 *tdriverConn75) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn75.r, odriverConn75.setup, ctx, query)
}
func (odriverConn75 *tdriverConn75) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn75.r, odriverConn75.setup, query, args)
}
func (odriverConn75 *tdriverConn75) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn75.r, odriverConn75.setup, param0)
}

func (odriverConn76 *tdriverConn76) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn76.r, odriverConn76.setup)
}
func (odriverConn76 *tdriverConn76) Close() error {
	return traceDCClose(odriverConn76.r, odriverConn76.setup)
}
func (odriverConn76 *tdriverConn76) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn76.r, odriverConn76.setup, query)
}
func (odriverConn76 *tdriverConn76) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn76.r, odriverConn76.setup, ctx, query)
}
func (odriverConn76 *tdriverConn76) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn76.r, odriverConn76.setup, query, args)
}
func (odriverConn76 *tdriverConn76) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn76.r, odriverConn76.setup, ctx)
}

func (odriverConn77 *tdriverConn77) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn77.r, odriverConn77.setup)
}
func (odriverConn77 *tdriverConn77) Close() error {
	return traceDCClose(odriverConn77.r, odriverConn77.setup)
}
func (odriverConn77 *tdriverConn77) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn77.r, odriverConn77.setup, query)
}
func (odriverConn77 *tdriverConn77) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn77.r, odriverConn77.setup, ctx, query)
}
func (odriverConn77 *tdriverConn77) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn77.r, odriverConn77.setup, query, args)
}
func (odriverConn77 *tdriverConn77) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn77.r, odriverConn77.setup, query, args)
}

func (odriverConn78 *tdriverConn78) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn78.r, odriverConn78.setup)
}
func (odriverConn78 *tdriverConn78) Close() error {
	return traceDCClose(odriverConn78.r, odriverConn78.setup)
}
func (odriverConn78 *tdriverConn78) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn78.r, odriverConn78.setup, query)
}
func (odriverConn78 *tdriverConn78) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn78.r, odriverConn78.setup, ctx, query)
}
func (odriverConn78 *tdriverConn78) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn78.r, odriverConn78.setup, query, args)
}
func (odriverConn78 *tdriverConn78) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn78.r, odriverConn78.setup, ctx, query, args)
}

func (odriverConn79 *tdriverConn79) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn79.r, odriverConn79.setup)
}
func (odriverConn79 *tdriverConn79) Close() error {
	return traceDCClose(odriverConn79.r, odriverConn79.setup)
}
func (odriverConn79 *tdriverConn79) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn79.r, odriverConn79.setup, query)
}
func (odriverConn79 *tdriverConn79) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn79.r, odriverConn79.setup, ctx, query)
}
func (odriverConn79 *tdriverConn79) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn79.r, odriverConn79.setup, query, args)
}
func (odriverConn79 *tdriverConn79) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn79.r, odriverConn79.setup, ctx)
}

func (odriverConn80 *tdriverConn80) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn80.r, odriverConn80.setup)
}
func (odriverConn80 *tdriverConn80) Close() error {
	return traceDCClose(odriverConn80.r, odriverConn80.setup)
}
func (odriverConn80 *tdriverConn80) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn80.r, odriverConn80.setup, query)
}
func (odriverConn80 *tdriverConn80) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn80.r, odriverConn80.setup, ctx, query)
}
func (odriverConn80 *tdriverConn80) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn80.r, odriverConn80.setup, ctx, query, args)
}
func (odriverConn80 *tdriverConn80) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn80.r, odriverConn80.setup, param0)
}

func (odriverConn81 *tdriverConn81) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn81.r, odriverConn81.setup)
}
func (odriverConn81 *tdriverConn81) Close() error {
	return traceDCClose(odriverConn81.r, odriverConn81.setup)
}
func (odriverConn81 *tdriverConn81) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn81.r, odriverConn81.setup, query)
}
func (odriverConn81 *tdriverConn81) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn81.r, odriverConn81.setup, ctx, query)
}
func (odriverConn81 *tdriverConn81) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn81.r, odriverConn81.setup, ctx, query, args)
}
func (odriverConn81 *tdriverConn81) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn81.r, odriverConn81.setup, ctx)
}

func (odriverConn82 *tdriverConn82) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn82.r, odriverConn82.setup)
}
func (odriverConn82 *tdriverConn82) Close() error {
	return traceDCClose(odriverConn82.r, odriverConn82.setup)
}
func (odriverConn82 *tdriverConn82) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn82.r, odriverConn82.setup, query)
}
func (odriverConn82 *tdriverConn82) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn82.r, odriverConn82.setup, ctx, query)
}
func (odriverConn82 *tdriverConn82) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn82.r, odriverConn82.setup, ctx, query, args)
}
func (odriverConn82 *tdriverConn82) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn82.r, odriverConn82.setup, query, args)
}

func (odriverConn83 *tdriverConn83) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn83.r, odriverConn83.setup)
}
func (odriverConn83 *tdriverConn83) Close() error {
	return traceDCClose(odriverConn83.r, odriverConn83.setup)
}
func (odriverConn83 *tdriverConn83) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn83.r, odriverConn83.setup, query)
}
func (odriverConn83 *tdriverConn83) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn83.r, odriverConn83.setup, ctx, query)
}
func (odriverConn83 *tdriverConn83) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn83.r, odriverConn83.setup, ctx, query, args)
}
func (odriverConn83 *tdriverConn83) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn83.r, odriverConn83.setup, ctx, query, args)
}

func (odriverConn84 *tdriverConn84) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn84.r, odriverConn84.setup)
}
func (odriverConn84 *tdriverConn84) Close() error {
	return traceDCClose(odriverConn84.r, odriverConn84.setup)
}
func (odriverConn84 *tdriverConn84) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn84.r, odriverConn84.setup, query)
}
func (odriverConn84 *tdriverConn84) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn84.r, odriverConn84.setup, ctx, query)
}
func (odriverConn84 *tdriverConn84) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn84.r, odriverConn84.setup, ctx, query, args)
}
func (odriverConn84 *tdriverConn84) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn84.r, odriverConn84.setup, ctx)
}

func (odriverConn85 *tdriverConn85) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn85.r, odriverConn85.setup)
}
func (odriverConn85 *tdriverConn85) Close() error {
	return traceDCClose(odriverConn85.r, odriverConn85.setup)
}
func (odriverConn85 *tdriverConn85) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn85.r, odriverConn85.setup, query)
}
func (odriverConn85 *tdriverConn85) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn85.r, odriverConn85.setup, ctx, query)
}
func (odriverConn85 *tdriverConn85) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn85.r, odriverConn85.setup, param0)
}
func (odriverConn85 *tdriverConn85) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn85.r, odriverConn85.setup, ctx)
}

func (odriverConn86 *tdriverConn86) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn86.r, odriverConn86.setup)
}
func (odriverConn86 *tdriverConn86) Close() error {
	return traceDCClose(odriverConn86.r, odriverConn86.setup)
}
func (odriverConn86 *tdriverConn86) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn86.r, odriverConn86.setup, query)
}
func (odriverConn86 *tdriverConn86) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn86.r, odriverConn86.setup, ctx, query)
}
func (odriverConn86 *tdriverConn86) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn86.r, odriverConn86.setup, param0)
}
func (odriverConn86 *tdriverConn86) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn86.r, odriverConn86.setup, query, args)
}

func (odriverConn87 *tdriverConn87) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn87.r, odriverConn87.setup)
}
func (odriverConn87 *tdriverConn87) Close() error {
	return traceDCClose(odriverConn87.r, odriverConn87.setup)
}
func (odriverConn87 *tdriverConn87) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn87.r, odriverConn87.setup, query)
}
func (odriverConn87 *tdriverConn87) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn87.r, odriverConn87.setup, ctx, query)
}
func (odriverConn87 *tdriverConn87) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn87.r, odriverConn87.setup, param0)
}
func (odriverConn87 *tdriverConn87) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn87.r, odriverConn87.setup, ctx, query, args)
}

func (odriverConn88 *tdriverConn88) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn88.r, odriverConn88.setup)
}
func (odriverConn88 *tdriverConn88) Close() error {
	return traceDCClose(odriverConn88.r, odriverConn88.setup)
}
func (odriverConn88 *tdriverConn88) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn88.r, odriverConn88.setup, query)
}
func (odriverConn88 *tdriverConn88) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn88.r, odriverConn88.setup, ctx, query)
}
func (odriverConn88 *tdriverConn88) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn88.r, odriverConn88.setup, param0)
}
func (odriverConn88 *tdriverConn88) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn88.r, odriverConn88.setup, ctx)
}

func (odriverConn89 *tdriverConn89) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn89.r, odriverConn89.setup)
}
func (odriverConn89 *tdriverConn89) Close() error {
	return traceDCClose(odriverConn89.r, odriverConn89.setup)
}
func (odriverConn89 *tdriverConn89) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn89.r, odriverConn89.setup, query)
}
func (odriverConn89 *tdriverConn89) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn89.r, odriverConn89.setup, ctx, query)
}
func (odriverConn89 *tdriverConn89) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn89.r, odriverConn89.setup, ctx)
}
func (odriverConn89 *tdriverConn89) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn89.r, odriverConn89.setup, query, args)
}

func (odriverConn90 *tdriverConn90) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn90.r, odriverConn90.setup)
}
func (odriverConn90 *tdriverConn90) Close() error {
	return traceDCClose(odriverConn90.r, odriverConn90.setup)
}
func (odriverConn90 *tdriverConn90) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn90.r, odriverConn90.setup, query)
}
func (odriverConn90 *tdriverConn90) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn90.r, odriverConn90.setup, ctx, query)
}
func (odriverConn90 *tdriverConn90) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn90.r, odriverConn90.setup, ctx)
}
func (odriverConn90 *tdriverConn90) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn90.r, odriverConn90.setup, ctx, query, args)
}

func (odriverConn91 *tdriverConn91) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn91.r, odriverConn91.setup)
}
func (odriverConn91 *tdriverConn91) Close() error {
	return traceDCClose(odriverConn91.r, odriverConn91.setup)
}
func (odriverConn91 *tdriverConn91) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn91.r, odriverConn91.setup, query)
}
func (odriverConn91 *tdriverConn91) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn91.r, odriverConn91.setup, ctx, query)
}
func (odriverConn91 *tdriverConn91) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn91.r, odriverConn91.setup, ctx)
}
func (odriverConn91 *tdriverConn91) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn91.r, odriverConn91.setup, ctx)
}

func (odriverConn92 *tdriverConn92) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn92.r, odriverConn92.setup)
}
func (odriverConn92 *tdriverConn92) Close() error {
	return traceDCClose(odriverConn92.r, odriverConn92.setup)
}
func (odriverConn92 *tdriverConn92) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn92.r, odriverConn92.setup, query)
}
func (odriverConn92 *tdriverConn92) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn92.r, odriverConn92.setup, ctx, query)
}
func (odriverConn92 *tdriverConn92) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn92.r, odriverConn92.setup, query, args)
}
func (odriverConn92 *tdriverConn92) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn92.r, odriverConn92.setup, ctx, query, args)
}

func (odriverConn93 *tdriverConn93) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn93.r, odriverConn93.setup)
}
func (odriverConn93 *tdriverConn93) Close() error {
	return traceDCClose(odriverConn93.r, odriverConn93.setup)
}
func (odriverConn93 *tdriverConn93) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn93.r, odriverConn93.setup, query)
}
func (odriverConn93 *tdriverConn93) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn93.r, odriverConn93.setup, ctx, query)
}
func (odriverConn93 *tdriverConn93) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn93.r, odriverConn93.setup, query, args)
}
func (odriverConn93 *tdriverConn93) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn93.r, odriverConn93.setup, ctx)
}

func (odriverConn94 *tdriverConn94) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn94.r, odriverConn94.setup)
}
func (odriverConn94 *tdriverConn94) Close() error {
	return traceDCClose(odriverConn94.r, odriverConn94.setup)
}
func (odriverConn94 *tdriverConn94) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn94.r, odriverConn94.setup, query)
}
func (odriverConn94 *tdriverConn94) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn94.r, odriverConn94.setup, ctx, query)
}
func (odriverConn94 *tdriverConn94) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn94.r, odriverConn94.setup, ctx, query, args)
}
func (odriverConn94 *tdriverConn94) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn94.r, odriverConn94.setup, ctx)
}

func (odriverConn95 *tdriverConn95) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn95.r, odriverConn95.setup)
}
func (odriverConn95 *tdriverConn95) Close() error {
	return traceDCClose(odriverConn95.r, odriverConn95.setup)
}
func (odriverConn95 *tdriverConn95) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn95.r, odriverConn95.setup, query)
}
func (odriverConn95 *tdriverConn95) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn95.r, odriverConn95.setup, query, args)
}
func (odriverConn95 *tdriverConn95) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn95.r, odriverConn95.setup, ctx, query, args)
}
func (odriverConn95 *tdriverConn95) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn95.r, odriverConn95.setup, param0)
}

func (odriverConn96 *tdriverConn96) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn96.r, odriverConn96.setup)
}
func (odriverConn96 *tdriverConn96) Close() error {
	return traceDCClose(odriverConn96.r, odriverConn96.setup)
}
func (odriverConn96 *tdriverConn96) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn96.r, odriverConn96.setup, query)
}
func (odriverConn96 *tdriverConn96) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn96.r, odriverConn96.setup, query, args)
}
func (odriverConn96 *tdriverConn96) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn96.r, odriverConn96.setup, ctx, query, args)
}
func (odriverConn96 *tdriverConn96) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn96.r, odriverConn96.setup, ctx)
}

func (odriverConn97 *tdriverConn97) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn97.r, odriverConn97.setup)
}
func (odriverConn97 *tdriverConn97) Close() error {
	return traceDCClose(odriverConn97.r, odriverConn97.setup)
}
func (odriverConn97 *tdriverConn97) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn97.r, odriverConn97.setup, query)
}
func (odriverConn97 *tdriverConn97) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn97.r, odriverConn97.setup, query, args)
}
func (odriverConn97 *tdriverConn97) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn97.r, odriverConn97.setup, ctx, query, args)
}
func (odriverConn97 *tdriverConn97) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn97.r, odriverConn97.setup, query, args)
}

func (odriverConn98 *tdriverConn98) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn98.r, odriverConn98.setup)
}
func (odriverConn98 *tdriverConn98) Close() error {
	return traceDCClose(odriverConn98.r, odriverConn98.setup)
}
func (odriverConn98 *tdriverConn98) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn98.r, odriverConn98.setup, query)
}
func (odriverConn98 *tdriverConn98) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn98.r, odriverConn98.setup, query, args)
}
func (odriverConn98 *tdriverConn98) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn98.r, odriverConn98.setup, ctx, query, args)
}
func (odriverConn98 *tdriverConn98) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn98.r, odriverConn98.setup, ctx, query, args)
}

func (odriverConn99 *tdriverConn99) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn99.r, odriverConn99.setup)
}
func (odriverConn99 *tdriverConn99) Close() error {
	return traceDCClose(odriverConn99.r, odriverConn99.setup)
}
func (odriverConn99 *tdriverConn99) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn99.r, odriverConn99.setup, query)
}
func (odriverConn99 *tdriverConn99) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn99.r, odriverConn99.setup, query, args)
}
func (odriverConn99 *tdriverConn99) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn99.r, odriverConn99.setup, ctx, query, args)
}
func (odriverConn99 *tdriverConn99) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn99.r, odriverConn99.setup, ctx)
}

func (odriverConn100 *tdriverConn100) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn100.r, odriverConn100.setup)
}
func (odriverConn100 *tdriverConn100) Close() error {
	return traceDCClose(odriverConn100.r, odriverConn100.setup)
}
func (odriverConn100 *tdriverConn100) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn100.r, odriverConn100.setup, query)
}
func (odriverConn100 *tdriverConn100) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn100.r, odriverConn100.setup, query, args)
}
func (odriverConn100 *tdriverConn100) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn100.r, odriverConn100.setup, param0)
}
func (odriverConn100 *tdriverConn100) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn100.r, odriverConn100.setup, ctx)
}

func (odriverConn101 *tdriverConn101) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn101.r, odriverConn101.setup)
}
func (odriverConn101 *tdriverConn101) Close() error {
	return traceDCClose(odriverConn101.r, odriverConn101.setup)
}
func (odriverConn101 *tdriverConn101) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn101.r, odriverConn101.setup, query)
}
func (odriverConn101 *tdriverConn101) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn101.r, odriverConn101.setup, query, args)
}
func (odriverConn101 *tdriverConn101) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn101.r, odriverConn101.setup, param0)
}
func (odriverConn101 *tdriverConn101) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn101.r, odriverConn101.setup, query, args)
}

func (odriverConn102 *tdriverConn102) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn102.r, odriverConn102.setup)
}
func (odriverConn102 *tdriverConn102) Close() error {
	return traceDCClose(odriverConn102.r, odriverConn102.setup)
}
func (odriverConn102 *tdriverConn102) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn102.r, odriverConn102.setup, query)
}
func (odriverConn102 *tdriverConn102) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn102.r, odriverConn102.setup, query, args)
}
func (odriverConn102 *tdriverConn102) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn102.r, odriverConn102.setup, param0)
}
func (odriverConn102 *tdriverConn102) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn102.r, odriverConn102.setup, ctx, query, args)
}

func (odriverConn103 *tdriverConn103) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn103.r, odriverConn103.setup)
}
func (odriverConn103 *tdriverConn103) Close() error {
	return traceDCClose(odriverConn103.r, odriverConn103.setup)
}
func (odriverConn103 *tdriverConn103) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn103.r, odriverConn103.setup, query)
}
func (odriverConn103 *tdriverConn103) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn103.r, odriverConn103.setup, query, args)
}
func (odriverConn103 *tdriverConn103) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn103.r, odriverConn103.setup, param0)
}
func (odriverConn103 *tdriverConn103) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn103.r, odriverConn103.setup, ctx)
}

func (odriverConn104 *tdriverConn104) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn104.r, odriverConn104.setup)
}
func (odriverConn104 *tdriverConn104) Close() error {
	return traceDCClose(odriverConn104.r, odriverConn104.setup)
}
func (odriverConn104 *tdriverConn104) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn104.r, odriverConn104.setup, query)
}
func (odriverConn104 *tdriverConn104) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn104.r, odriverConn104.setup, query, args)
}
func (odriverConn104 *tdriverConn104) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn104.r, odriverConn104.setup, ctx)
}
func (odriverConn104 *tdriverConn104) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn104.r, odriverConn104.setup, query, args)
}

func (odriverConn105 *tdriverConn105) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn105.r, odriverConn105.setup)
}
func (odriverConn105 *tdriverConn105) Close() error {
	return traceDCClose(odriverConn105.r, odriverConn105.setup)
}
func (odriverConn105 *tdriverConn105) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn105.r, odriverConn105.setup, query)
}
func (odriverConn105 *tdriverConn105) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn105.r, odriverConn105.setup, query, args)
}
func (odriverConn105 *tdriverConn105) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn105.r, odriverConn105.setup, ctx)
}
func (odriverConn105 *tdriverConn105) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn105.r, odriverConn105.setup, ctx, query, args)
}

func (odriverConn106 *tdriverConn106) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn106.r, odriverConn106.setup)
}
func (odriverConn106 *tdriverConn106) Close() error {
	return traceDCClose(odriverConn106.r, odriverConn106.setup)
}
func (odriverConn106 *tdriverConn106) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn106.r, odriverConn106.setup, query)
}
func (odriverConn106 *tdriverConn106) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn106.r, odriverConn106.setup, query, args)
}
func (odriverConn106 *tdriverConn106) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn106.r, odriverConn106.setup, ctx)
}
func (odriverConn106 *tdriverConn106) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn106.r, odriverConn106.setup, ctx)
}

func (odriverConn107 *tdriverConn107) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn107.r, odriverConn107.setup)
}
func (odriverConn107 *tdriverConn107) Close() error {
	return traceDCClose(odriverConn107.r, odriverConn107.setup)
}
func (odriverConn107 *tdriverConn107) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn107.r, odriverConn107.setup, query)
}
func (odriverConn107 *tdriverConn107) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn107.r, odriverConn107.setup, query, args)
}
func (odriverConn107 *tdriverConn107) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn107.r, odriverConn107.setup, query, args)
}
func (odriverConn107 *tdriverConn107) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn107.r, odriverConn107.setup, ctx, query, args)
}

func (odriverConn108 *tdriverConn108) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn108.r, odriverConn108.setup)
}
func (odriverConn108 *tdriverConn108) Close() error {
	return traceDCClose(odriverConn108.r, odriverConn108.setup)
}
func (odriverConn108 *tdriverConn108) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn108.r, odriverConn108.setup, query)
}
func (odriverConn108 *tdriverConn108) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn108.r, odriverConn108.setup, query, args)
}
func (odriverConn108 *tdriverConn108) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn108.r, odriverConn108.setup, query, args)
}
func (odriverConn108 *tdriverConn108) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn108.r, odriverConn108.setup, ctx)
}

func (odriverConn109 *tdriverConn109) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn109.r, odriverConn109.setup)
}
func (odriverConn109 *tdriverConn109) Close() error {
	return traceDCClose(odriverConn109.r, odriverConn109.setup)
}
func (odriverConn109 *tdriverConn109) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn109.r, odriverConn109.setup, query)
}
func (odriverConn109 *tdriverConn109) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn109.r, odriverConn109.setup, query, args)
}
func (odriverConn109 *tdriverConn109) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn109.r, odriverConn109.setup, ctx, query, args)
}
func (odriverConn109 *tdriverConn109) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn109.r, odriverConn109.setup, ctx)
}

func (odriverConn110 *tdriverConn110) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn110.r, odriverConn110.setup)
}
func (odriverConn110 *tdriverConn110) Close() error {
	return traceDCClose(odriverConn110.r, odriverConn110.setup)
}
func (odriverConn110 *tdriverConn110) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn110.r, odriverConn110.setup, query)
}
func (odriverConn110 *tdriverConn110) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn110.r, odriverConn110.setup, ctx, query, args)
}
func (odriverConn110 *tdriverConn110) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn110.r, odriverConn110.setup, param0)
}
func (odriverConn110 *tdriverConn110) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn110.r, odriverConn110.setup, ctx)
}

func (odriverConn111 *tdriverConn111) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn111.r, odriverConn111.setup)
}
func (odriverConn111 *tdriverConn111) Close() error {
	return traceDCClose(odriverConn111.r, odriverConn111.setup)
}
func (odriverConn111 *tdriverConn111) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn111.r, odriverConn111.setup, query)
}
func (odriverConn111 *tdriverConn111) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn111.r, odriverConn111.setup, ctx, query, args)
}
func (odriverConn111 *tdriverConn111) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn111.r, odriverConn111.setup, param0)
}
func (odriverConn111 *tdriverConn111) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn111.r, odriverConn111.setup, query, args)
}

func (odriverConn112 *tdriverConn112) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn112.r, odriverConn112.setup)
}
func (odriverConn112 *tdriverConn112) Close() error {
	return traceDCClose(odriverConn112.r, odriverConn112.setup)
}
func (odriverConn112 *tdriverConn112) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn112.r, odriverConn112.setup, query)
}
func (odriverConn112 *tdriverConn112) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn112.r, odriverConn112.setup, ctx, query, args)
}
func (odriverConn112 *tdriverConn112) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn112.r, odriverConn112.setup, param0)
}
func (odriverConn112 *tdriverConn112) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn112.r, odriverConn112.setup, ctx, query, args)
}

func (odriverConn113 *tdriverConn113) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn113.r, odriverConn113.setup)
}
func (odriverConn113 *tdriverConn113) Close() error {
	return traceDCClose(odriverConn113.r, odriverConn113.setup)
}
func (odriverConn113 *tdriverConn113) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn113.r, odriverConn113.setup, query)
}
func (odriverConn113 *tdriverConn113) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn113.r, odriverConn113.setup, ctx, query, args)
}
func (odriverConn113 *tdriverConn113) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn113.r, odriverConn113.setup, param0)
}
func (odriverConn113 *tdriverConn113) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn113.r, odriverConn113.setup, ctx)
}

func (odriverConn114 *tdriverConn114) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn114.r, odriverConn114.setup)
}
func (odriverConn114 *tdriverConn114) Close() error {
	return traceDCClose(odriverConn114.r, odriverConn114.setup)
}
func (odriverConn114 *tdriverConn114) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn114.r, odriverConn114.setup, query)
}
func (odriverConn114 *tdriverConn114) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn114.r, odriverConn114.setup, ctx, query, args)
}
func (odriverConn114 *tdriverConn114) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn114.r, odriverConn114.setup, ctx)
}
func (odriverConn114 *tdriverConn114) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn114.r, odriverConn114.setup, query, args)
}

func (odriverConn115 *tdriverConn115) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn115.r, odriverConn115.setup)
}
func (odriverConn115 *tdriverConn115) Close() error {
	return traceDCClose(odriverConn115.r, odriverConn115.setup)
}
func (odriverConn115 *tdriverConn115) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn115.r, odriverConn115.setup, query)
}
func (odriverConn115 *tdriverConn115) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn115.r, odriverConn115.setup, ctx, query, args)
}
func (odriverConn115 *tdriverConn115) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn115.r, odriverConn115.setup, ctx)
}
func (odriverConn115 *tdriverConn115) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn115.r, odriverConn115.setup, ctx, query, args)
}

func (odriverConn116 *tdriverConn116) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn116.r, odriverConn116.setup)
}
func (odriverConn116 *tdriverConn116) Close() error {
	return traceDCClose(odriverConn116.r, odriverConn116.setup)
}
func (odriverConn116 *tdriverConn116) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn116.r, odriverConn116.setup, query)
}
func (odriverConn116 *tdriverConn116) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn116.r, odriverConn116.setup, ctx, query, args)
}
func (odriverConn116 *tdriverConn116) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn116.r, odriverConn116.setup, ctx)
}
func (odriverConn116 *tdriverConn116) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn116.r, odriverConn116.setup, ctx)
}

func (odriverConn117 *tdriverConn117) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn117.r, odriverConn117.setup)
}
func (odriverConn117 *tdriverConn117) Close() error {
	return traceDCClose(odriverConn117.r, odriverConn117.setup)
}
func (odriverConn117 *tdriverConn117) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn117.r, odriverConn117.setup, query)
}
func (odriverConn117 *tdriverConn117) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn117.r, odriverConn117.setup, ctx, query, args)
}
func (odriverConn117 *tdriverConn117) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn117.r, odriverConn117.setup, query, args)
}
func (odriverConn117 *tdriverConn117) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn117.r, odriverConn117.setup, ctx, query, args)
}

func (odriverConn118 *tdriverConn118) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn118.r, odriverConn118.setup)
}
func (odriverConn118 *tdriverConn118) Close() error {
	return traceDCClose(odriverConn118.r, odriverConn118.setup)
}
func (odriverConn118 *tdriverConn118) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn118.r, odriverConn118.setup, query)
}
func (odriverConn118 *tdriverConn118) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn118.r, odriverConn118.setup, ctx, query, args)
}
func (odriverConn118 *tdriverConn118) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn118.r, odriverConn118.setup, query, args)
}
func (odriverConn118 *tdriverConn118) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn118.r, odriverConn118.setup, ctx)
}

func (odriverConn119 *tdriverConn119) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn119.r, odriverConn119.setup)
}
func (odriverConn119 *tdriverConn119) Close() error {
	return traceDCClose(odriverConn119.r, odriverConn119.setup)
}
func (odriverConn119 *tdriverConn119) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn119.r, odriverConn119.setup, query)
}
func (odriverConn119 *tdriverConn119) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn119.r, odriverConn119.setup, ctx, query, args)
}
func (odriverConn119 *tdriverConn119) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn119.r, odriverConn119.setup, ctx, query, args)
}
func (odriverConn119 *tdriverConn119) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn119.r, odriverConn119.setup, ctx)
}

func (odriverConn120 *tdriverConn120) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn120.r, odriverConn120.setup)
}
func (odriverConn120 *tdriverConn120) Close() error {
	return traceDCClose(odriverConn120.r, odriverConn120.setup)
}
func (odriverConn120 *tdriverConn120) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn120.r, odriverConn120.setup, query)
}
func (odriverConn120 *tdriverConn120) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn120.r, odriverConn120.setup, param0)
}
func (odriverConn120 *tdriverConn120) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn120.r, odriverConn120.setup, ctx)
}
func (odriverConn120 *tdriverConn120) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn120.r, odriverConn120.setup, query, args)
}

func (odriverConn121 *tdriverConn121) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn121.r, odriverConn121.setup)
}
func (odriverConn121 *tdriverConn121) Close() error {
	return traceDCClose(odriverConn121.r, odriverConn121.setup)
}
func (odriverConn121 *tdriverConn121) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn121.r, odriverConn121.setup, query)
}
func (odriverConn121 *tdriverConn121) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn121.r, odriverConn121.setup, param0)
}
func (odriverConn121 *tdriverConn121) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn121.r, odriverConn121.setup, ctx)
}
func (odriverConn121 *tdriverConn121) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn121.r, odriverConn121.setup, ctx, query, args)
}

func (odriverConn122 *tdriverConn122) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn122.r, odriverConn122.setup)
}
func (odriverConn122 *tdriverConn122) Close() error {
	return traceDCClose(odriverConn122.r, odriverConn122.setup)
}
func (odriverConn122 *tdriverConn122) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn122.r, odriverConn122.setup, query)
}
func (odriverConn122 *tdriverConn122) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn122.r, odriverConn122.setup, param0)
}
func (odriverConn122 *tdriverConn122) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn122.r, odriverConn122.setup, ctx)
}
func (odriverConn122 *tdriverConn122) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn122.r, odriverConn122.setup, ctx)
}

func (odriverConn123 *tdriverConn123) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn123.r, odriverConn123.setup)
}
func (odriverConn123 *tdriverConn123) Close() error {
	return traceDCClose(odriverConn123.r, odriverConn123.setup)
}
func (odriverConn123 *tdriverConn123) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn123.r, odriverConn123.setup, query)
}
func (odriverConn123 *tdriverConn123) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn123.r, odriverConn123.setup, param0)
}
func (odriverConn123 *tdriverConn123) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn123.r, odriverConn123.setup, query, args)
}
func (odriverConn123 *tdriverConn123) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn123.r, odriverConn123.setup, ctx, query, args)
}

func (odriverConn124 *tdriverConn124) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn124.r, odriverConn124.setup)
}
func (odriverConn124 *tdriverConn124) Close() error {
	return traceDCClose(odriverConn124.r, odriverConn124.setup)
}
func (odriverConn124 *tdriverConn124) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn124.r, odriverConn124.setup, query)
}
func (odriverConn124 *tdriverConn124) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn124.r, odriverConn124.setup, param0)
}
func (odriverConn124 *tdriverConn124) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn124.r, odriverConn124.setup, query, args)
}
func (odriverConn124 *tdriverConn124) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn124.r, odriverConn124.setup, ctx)
}

func (odriverConn125 *tdriverConn125) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn125.r, odriverConn125.setup)
}
func (odriverConn125 *tdriverConn125) Close() error {
	return traceDCClose(odriverConn125.r, odriverConn125.setup)
}
func (odriverConn125 *tdriverConn125) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn125.r, odriverConn125.setup, query)
}
func (odriverConn125 *tdriverConn125) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn125.r, odriverConn125.setup, param0)
}
func (odriverConn125 *tdriverConn125) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn125.r, odriverConn125.setup, ctx, query, args)
}
func (odriverConn125 *tdriverConn125) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn125.r, odriverConn125.setup, ctx)
}

func (odriverConn126 *tdriverConn126) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn126.r, odriverConn126.setup)
}
func (odriverConn126 *tdriverConn126) Close() error {
	return traceDCClose(odriverConn126.r, odriverConn126.setup)
}
func (odriverConn126 *tdriverConn126) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn126.r, odriverConn126.setup, query)
}
func (odriverConn126 *tdriverConn126) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn126.r, odriverConn126.setup, ctx)
}
func (odriverConn126 *tdriverConn126) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn126.r, odriverConn126.setup, query, args)
}
func (odriverConn126 *tdriverConn126) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn126.r, odriverConn126.setup, ctx, query, args)
}

func (odriverConn127 *tdriverConn127) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn127.r, odriverConn127.setup)
}
func (odriverConn127 *tdriverConn127) Close() error {
	return traceDCClose(odriverConn127.r, odriverConn127.setup)
}
func (odriverConn127 *tdriverConn127) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn127.r, odriverConn127.setup, query)
}
func (odriverConn127 *tdriverConn127) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn127.r, odriverConn127.setup, ctx)
}
func (odriverConn127 *tdriverConn127) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn127.r, odriverConn127.setup, query, args)
}
func (odriverConn127 *tdriverConn127) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn127.r, odriverConn127.setup, ctx)
}

func (odriverConn128 *tdriverConn128) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn128.r, odriverConn128.setup)
}
func (odriverConn128 *tdriverConn128) Close() error {
	return traceDCClose(odriverConn128.r, odriverConn128.setup)
}
func (odriverConn128 *tdriverConn128) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn128.r, odriverConn128.setup, query)
}
func (odriverConn128 *tdriverConn128) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn128.r, odriverConn128.setup, ctx)
}
func (odriverConn128 *tdriverConn128) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn128.r, odriverConn128.setup, ctx, query, args)
}
func (odriverConn128 *tdriverConn128) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn128.r, odriverConn128.setup, ctx)
}

func (odriverConn129 *tdriverConn129) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn129.r, odriverConn129.setup)
}
func (odriverConn129 *tdriverConn129) Close() error {
	return traceDCClose(odriverConn129.r, odriverConn129.setup)
}
func (odriverConn129 *tdriverConn129) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn129.r, odriverConn129.setup, query)
}
func (odriverConn129 *tdriverConn129) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn129.r, odriverConn129.setup, query, args)
}
func (odriverConn129 *tdriverConn129) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn129.r, odriverConn129.setup, ctx, query, args)
}
func (odriverConn129 *tdriverConn129) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn129.r, odriverConn129.setup, ctx)
}

func (odriverConn130 *tdriverConn130) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn130.r, odriverConn130.setup)
}
func (odriverConn130 *tdriverConn130) Close() error {
	return traceDCClose(odriverConn130.r, odriverConn130.setup)
}
func (odriverConn130 *tdriverConn130) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn130.r, odriverConn130.setup, query)
}
func (odriverConn130 *tdriverConn130) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn130.r, odriverConn130.setup, ctx, opts)
}
func (odriverConn130 *tdriverConn130) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn130.r, odriverConn130.setup, ctx, query)
}
func (odriverConn130 *tdriverConn130) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn130.r, odriverConn130.setup, query, args)
}
func (odriverConn130 *tdriverConn130) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn130.r, odriverConn130.setup, ctx, query, args)
}

func (odriverConn131 *tdriverConn131) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn131.r, odriverConn131.setup)
}
func (odriverConn131 *tdriverConn131) Close() error {
	return traceDCClose(odriverConn131.r, odriverConn131.setup)
}
func (odriverConn131 *tdriverConn131) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn131.r, odriverConn131.setup, query)
}
func (odriverConn131 *tdriverConn131) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn131.r, odriverConn131.setup, ctx, opts)
}
func (odriverConn131 *tdriverConn131) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn131.r, odriverConn131.setup, ctx, query)
}
func (odriverConn131 *tdriverConn131) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn131.r, odriverConn131.setup, query, args)
}
func (odriverConn131 *tdriverConn131) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn131.r, odriverConn131.setup, param0)
}

func (odriverConn132 *tdriverConn132) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn132.r, odriverConn132.setup)
}
func (odriverConn132 *tdriverConn132) Close() error {
	return traceDCClose(odriverConn132.r, odriverConn132.setup)
}
func (odriverConn132 *tdriverConn132) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn132.r, odriverConn132.setup, query)
}
func (odriverConn132 *tdriverConn132) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn132.r, odriverConn132.setup, ctx, opts)
}
func (odriverConn132 *tdriverConn132) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn132.r, odriverConn132.setup, ctx, query)
}
func (odriverConn132 *tdriverConn132) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn132.r, odriverConn132.setup, query, args)
}
func (odriverConn132 *tdriverConn132) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn132.r, odriverConn132.setup, ctx)
}

func (odriverConn133 *tdriverConn133) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn133.r, odriverConn133.setup)
}
func (odriverConn133 *tdriverConn133) Close() error {
	return traceDCClose(odriverConn133.r, odriverConn133.setup)
}
func (odriverConn133 *tdriverConn133) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn133.r, odriverConn133.setup, query)
}
func (odriverConn133 *tdriverConn133) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn133.r, odriverConn133.setup, ctx, opts)
}
func (odriverConn133 *tdriverConn133) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn133.r, odriverConn133.setup, ctx, query)
}
func (odriverConn133 *tdriverConn133) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn133.r, odriverConn133.setup, query, args)
}
func (odriverConn133 *tdriverConn133) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn133.r, odriverConn133.setup, query, args)
}

func (odriverConn134 *tdriverConn134) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn134.r, odriverConn134.setup)
}
func (odriverConn134 *tdriverConn134) Close() error {
	return traceDCClose(odriverConn134.r, odriverConn134.setup)
}
func (odriverConn134 *tdriverConn134) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn134.r, odriverConn134.setup, query)
}
func (odriverConn134 *tdriverConn134) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn134.r, odriverConn134.setup, ctx, opts)
}
func (odriverConn134 *tdriverConn134) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn134.r, odriverConn134.setup, ctx, query)
}
func (odriverConn134 *tdriverConn134) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn134.r, odriverConn134.setup, query, args)
}
func (odriverConn134 *tdriverConn134) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn134.r, odriverConn134.setup, ctx, query, args)
}

func (odriverConn135 *tdriverConn135) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn135.r, odriverConn135.setup)
}
func (odriverConn135 *tdriverConn135) Close() error {
	return traceDCClose(odriverConn135.r, odriverConn135.setup)
}
func (odriverConn135 *tdriverConn135) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn135.r, odriverConn135.setup, query)
}
func (odriverConn135 *tdriverConn135) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn135.r, odriverConn135.setup, ctx, opts)
}
func (odriverConn135 *tdriverConn135) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn135.r, odriverConn135.setup, ctx, query)
}
func (odriverConn135 *tdriverConn135) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn135.r, odriverConn135.setup, query, args)
}
func (odriverConn135 *tdriverConn135) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn135.r, odriverConn135.setup, ctx)
}

func (odriverConn136 *tdriverConn136) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn136.r, odriverConn136.setup)
}
func (odriverConn136 *tdriverConn136) Close() error {
	return traceDCClose(odriverConn136.r, odriverConn136.setup)
}
func (odriverConn136 *tdriverConn136) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn136.r, odriverConn136.setup, query)
}
func (odriverConn136 *tdriverConn136) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn136.r, odriverConn136.setup, ctx, opts)
}
func (odriverConn136 *tdriverConn136) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn136.r, odriverConn136.setup, ctx, query)
}
func (odriverConn136 *tdriverConn136) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn136.r, odriverConn136.setup, ctx, query, args)
}
func (odriverConn136 *tdriverConn136) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn136.r, odriverConn136.setup, param0)
}

func (odriverConn137 *tdriverConn137) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn137.r, odriverConn137.setup)
}
func (odriverConn137 *tdriverConn137) Close() error {
	return traceDCClose(odriverConn137.r, odriverConn137.setup)
}
func (odriverConn137 *tdriverConn137) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn137.r, odriverConn137.setup, query)
}
func (odriverConn137 *tdriverConn137) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn137.r, odriverConn137.setup, ctx, opts)
}
func (odriverConn137 *tdriverConn137) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn137.r, odriverConn137.setup, ctx, query)
}
func (odriverConn137 *tdriverConn137) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn137.r, odriverConn137.setup, ctx, query, args)
}
func (odriverConn137 *tdriverConn137) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn137.r, odriverConn137.setup, ctx)
}

func (odriverConn138 *tdriverConn138) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn138.r, odriverConn138.setup)
}
func (odriverConn138 *tdriverConn138) Close() error {
	return traceDCClose(odriverConn138.r, odriverConn138.setup)
}
func (odriverConn138 *tdriverConn138) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn138.r, odriverConn138.setup, query)
}
func (odriverConn138 *tdriverConn138) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn138.r, odriverConn138.setup, ctx, opts)
}
func (odriverConn138 *tdriverConn138) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn138.r, odriverConn138.setup, ctx, query)
}
func (odriverConn138 *tdriverConn138) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn138.r, odriverConn138.setup, ctx, query, args)
}
func (odriverConn138 *tdriverConn138) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn138.r, odriverConn138.setup, query, args)
}

func (odriverConn139 *tdriverConn139) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn139.r, odriverConn139.setup)
}
func (odriverConn139 *tdriverConn139) Close() error {
	return traceDCClose(odriverConn139.r, odriverConn139.setup)
}
func (odriverConn139 *tdriverConn139) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn139.r, odriverConn139.setup, query)
}
func (odriverConn139 *tdriverConn139) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn139.r, odriverConn139.setup, ctx, opts)
}
func (odriverConn139 *tdriverConn139) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn139.r, odriverConn139.setup, ctx, query)
}
func (odriverConn139 *tdriverConn139) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn139.r, odriverConn139.setup, ctx, query, args)
}
func (odriverConn139 *tdriverConn139) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn139.r, odriverConn139.setup, ctx, query, args)
}

func (odriverConn140 *tdriverConn140) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn140.r, odriverConn140.setup)
}
func (odriverConn140 *tdriverConn140) Close() error {
	return traceDCClose(odriverConn140.r, odriverConn140.setup)
}
func (odriverConn140 *tdriverConn140) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn140.r, odriverConn140.setup, query)
}
func (odriverConn140 *tdriverConn140) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn140.r, odriverConn140.setup, ctx, opts)
}
func (odriverConn140 *tdriverConn140) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn140.r, odriverConn140.setup, ctx, query)
}
func (odriverConn140 *tdriverConn140) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn140.r, odriverConn140.setup, ctx, query, args)
}
func (odriverConn140 *tdriverConn140) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn140.r, odriverConn140.setup, ctx)
}

func (odriverConn141 *tdriverConn141) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn141.r, odriverConn141.setup)
}
func (odriverConn141 *tdriverConn141) Close() error {
	return traceDCClose(odriverConn141.r, odriverConn141.setup)
}
func (odriverConn141 *tdriverConn141) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn141.r, odriverConn141.setup, query)
}
func (odriverConn141 *tdriverConn141) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn141.r, odriverConn141.setup, ctx, opts)
}
func (odriverConn141 *tdriverConn141) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn141.r, odriverConn141.setup, ctx, query)
}
func (odriverConn141 *tdriverConn141) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn141.r, odriverConn141.setup, param0)
}
func (odriverConn141 *tdriverConn141) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn141.r, odriverConn141.setup, ctx)
}

func (odriverConn142 *tdriverConn142) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn142.r, odriverConn142.setup)
}
func (odriverConn142 *tdriverConn142) Close() error {
	return traceDCClose(odriverConn142.r, odriverConn142.setup)
}
func (odriverConn142 *tdriverConn142) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn142.r, odriverConn142.setup, query)
}
func (odriverConn142 *tdriverConn142) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn142.r, odriverConn142.setup, ctx, opts)
}
func (odriverConn142 *tdriverConn142) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn142.r, odriverConn142.setup, ctx, query)
}
func (odriverConn142 *tdriverConn142) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn142.r, odriverConn142.setup, param0)
}
func (odriverConn142 *tdriverConn142) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn142.r, odriverConn142.setup, query, args)
}

func (odriverConn143 *tdriverConn143) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn143.r, odriverConn143.setup)
}
func (odriverConn143 *tdriverConn143) Close() error {
	return traceDCClose(odriverConn143.r, odriverConn143.setup)
}
func (odriverConn143 *tdriverConn143) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn143.r, odriverConn143.setup, query)
}
func (odriverConn143 *tdriverConn143) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn143.r, odriverConn143.setup, ctx, opts)
}
func (odriverConn143 *tdriverConn143) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn143.r, odriverConn143.setup, ctx, query)
}
func (odriverConn143 *tdriverConn143) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn143.r, odriverConn143.setup, param0)
}
func (odriverConn143 *tdriverConn143) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn143.r, odriverConn143.setup, ctx, query, args)
}

func (odriverConn144 *tdriverConn144) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn144.r, odriverConn144.setup)
}
func (odriverConn144 *tdriverConn144) Close() error {
	return traceDCClose(odriverConn144.r, odriverConn144.setup)
}
func (odriverConn144 *tdriverConn144) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn144.r, odriverConn144.setup, query)
}
func (odriverConn144 *tdriverConn144) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn144.r, odriverConn144.setup, ctx, opts)
}
func (odriverConn144 *tdriverConn144) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn144.r, odriverConn144.setup, ctx, query)
}
func (odriverConn144 *tdriverConn144) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn144.r, odriverConn144.setup, param0)
}
func (odriverConn144 *tdriverConn144) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn144.r, odriverConn144.setup, ctx)
}

func (odriverConn145 *tdriverConn145) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn145.r, odriverConn145.setup)
}
func (odriverConn145 *tdriverConn145) Close() error {
	return traceDCClose(odriverConn145.r, odriverConn145.setup)
}
func (odriverConn145 *tdriverConn145) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn145.r, odriverConn145.setup, query)
}
func (odriverConn145 *tdriverConn145) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn145.r, odriverConn145.setup, ctx, opts)
}
func (odriverConn145 *tdriverConn145) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn145.r, odriverConn145.setup, ctx, query)
}
func (odriverConn145 *tdriverConn145) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn145.r, odriverConn145.setup, ctx)
}
func (odriverConn145 *tdriverConn145) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn145.r, odriverConn145.setup, query, args)
}

func (odriverConn146 *tdriverConn146) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn146.r, odriverConn146.setup)
}
func (odriverConn146 *tdriverConn146) Close() error {
	return traceDCClose(odriverConn146.r, odriverConn146.setup)
}
func (odriverConn146 *tdriverConn146) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn146.r, odriverConn146.setup, query)
}
func (odriverConn146 *tdriverConn146) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn146.r, odriverConn146.setup, ctx, opts)
}
func (odriverConn146 *tdriverConn146) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn146.r, odriverConn146.setup, ctx, query)
}
func (odriverConn146 *tdriverConn146) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn146.r, odriverConn146.setup, ctx)
}
func (odriverConn146 *tdriverConn146) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn146.r, odriverConn146.setup, ctx, query, args)
}

func (odriverConn147 *tdriverConn147) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn147.r, odriverConn147.setup)
}
func (odriverConn147 *tdriverConn147) Close() error {
	return traceDCClose(odriverConn147.r, odriverConn147.setup)
}
func (odriverConn147 *tdriverConn147) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn147.r, odriverConn147.setup, query)
}
func (odriverConn147 *tdriverConn147) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn147.r, odriverConn147.setup, ctx, opts)
}
func (odriverConn147 *tdriverConn147) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn147.r, odriverConn147.setup, ctx, query)
}
func (odriverConn147 *tdriverConn147) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn147.r, odriverConn147.setup, ctx)
}
func (odriverConn147 *tdriverConn147) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn147.r, odriverConn147.setup, ctx)
}

func (odriverConn148 *tdriverConn148) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn148.r, odriverConn148.setup)
}
func (odriverConn148 *tdriverConn148) Close() error {
	return traceDCClose(odriverConn148.r, odriverConn148.setup)
}
func (odriverConn148 *tdriverConn148) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn148.r, odriverConn148.setup, query)
}
func (odriverConn148 *tdriverConn148) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn148.r, odriverConn148.setup, ctx, opts)
}
func (odriverConn148 *tdriverConn148) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn148.r, odriverConn148.setup, ctx, query)
}
func (odriverConn148 *tdriverConn148) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn148.r, odriverConn148.setup, query, args)
}
func (odriverConn148 *tdriverConn148) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn148.r, odriverConn148.setup, ctx, query, args)
}

func (odriverConn149 *tdriverConn149) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn149.r, odriverConn149.setup)
}
func (odriverConn149 *tdriverConn149) Close() error {
	return traceDCClose(odriverConn149.r, odriverConn149.setup)
}
func (odriverConn149 *tdriverConn149) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn149.r, odriverConn149.setup, query)
}
func (odriverConn149 *tdriverConn149) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn149.r, odriverConn149.setup, ctx, opts)
}
func (odriverConn149 *tdriverConn149) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn149.r, odriverConn149.setup, ctx, query)
}
func (odriverConn149 *tdriverConn149) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn149.r, odriverConn149.setup, query, args)
}
func (odriverConn149 *tdriverConn149) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn149.r, odriverConn149.setup, ctx)
}

func (odriverConn150 *tdriverConn150) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn150.r, odriverConn150.setup)
}
func (odriverConn150 *tdriverConn150) Close() error {
	return traceDCClose(odriverConn150.r, odriverConn150.setup)
}
func (odriverConn150 *tdriverConn150) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn150.r, odriverConn150.setup, query)
}
func (odriverConn150 *tdriverConn150) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn150.r, odriverConn150.setup, ctx, opts)
}
func (odriverConn150 *tdriverConn150) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn150.r, odriverConn150.setup, ctx, query)
}
func (odriverConn150 *tdriverConn150) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn150.r, odriverConn150.setup, ctx, query, args)
}
func (odriverConn150 *tdriverConn150) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn150.r, odriverConn150.setup, ctx)
}

func (odriverConn151 *tdriverConn151) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn151.r, odriverConn151.setup)
}
func (odriverConn151 *tdriverConn151) Close() error {
	return traceDCClose(odriverConn151.r, odriverConn151.setup)
}
func (odriverConn151 *tdriverConn151) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn151.r, odriverConn151.setup, query)
}
func (odriverConn151 *tdriverConn151) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn151.r, odriverConn151.setup, ctx, opts)
}
func (odriverConn151 *tdriverConn151) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn151.r, odriverConn151.setup, query, args)
}
func (odriverConn151 *tdriverConn151) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn151.r, odriverConn151.setup, ctx, query, args)
}
func (odriverConn151 *tdriverConn151) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn151.r, odriverConn151.setup, param0)
}

func (odriverConn152 *tdriverConn152) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn152.r, odriverConn152.setup)
}
func (odriverConn152 *tdriverConn152) Close() error {
	return traceDCClose(odriverConn152.r, odriverConn152.setup)
}
func (odriverConn152 *tdriverConn152) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn152.r, odriverConn152.setup, query)
}
func (odriverConn152 *tdriverConn152) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn152.r, odriverConn152.setup, ctx, opts)
}
func (odriverConn152 *tdriverConn152) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn152.r, odriverConn152.setup, query, args)
}
func (odriverConn152 *tdriverConn152) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn152.r, odriverConn152.setup, ctx, query, args)
}
func (odriverConn152 *tdriverConn152) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn152.r, odriverConn152.setup, ctx)
}

func (odriverConn153 *tdriverConn153) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn153.r, odriverConn153.setup)
}
func (odriverConn153 *tdriverConn153) Close() error {
	return traceDCClose(odriverConn153.r, odriverConn153.setup)
}
func (odriverConn153 *tdriverConn153) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn153.r, odriverConn153.setup, query)
}
func (odriverConn153 *tdriverConn153) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn153.r, odriverConn153.setup, ctx, opts)
}
func (odriverConn153 *tdriverConn153) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn153.r, odriverConn153.setup, query, args)
}
func (odriverConn153 *tdriverConn153) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn153.r, odriverConn153.setup, ctx, query, args)
}
func (odriverConn153 *tdriverConn153) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn153.r, odriverConn153.setup, query, args)
}

func (odriverConn154 *tdriverConn154) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn154.r, odriverConn154.setup)
}
func (odriverConn154 *tdriverConn154) Close() error {
	return traceDCClose(odriverConn154.r, odriverConn154.setup)
}
func (odriverConn154 *tdriverConn154) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn154.r, odriverConn154.setup, query)
}
func (odriverConn154 *tdriverConn154) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn154.r, odriverConn154.setup, ctx, opts)
}
func (odriverConn154 *tdriverConn154) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn154.r, odriverConn154.setup, query, args)
}
func (odriverConn154 *tdriverConn154) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn154.r, odriverConn154.setup, ctx, query, args)
}
func (odriverConn154 *tdriverConn154) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn154.r, odriverConn154.setup, ctx, query, args)
}

func (odriverConn155 *tdriverConn155) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn155.r, odriverConn155.setup)
}
func (odriverConn155 *tdriverConn155) Close() error {
	return traceDCClose(odriverConn155.r, odriverConn155.setup)
}
func (odriverConn155 *tdriverConn155) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn155.r, odriverConn155.setup, query)
}
func (odriverConn155 *tdriverConn155) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn155.r, odriverConn155.setup, ctx, opts)
}
func (odriverConn155 *tdriverConn155) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn155.r, odriverConn155.setup, query, args)
}
func (odriverConn155 *tdriverConn155) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn155.r, odriverConn155.setup, ctx, query, args)
}
func (odriverConn155 *tdriverConn155) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn155.r, odriverConn155.setup, ctx)
}

func (odriverConn156 *tdriverConn156) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn156.r, odriverConn156.setup)
}
func (odriverConn156 *tdriverConn156) Close() error {
	return traceDCClose(odriverConn156.r, odriverConn156.setup)
}
func (odriverConn156 *tdriverConn156) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn156.r, odriverConn156.setup, query)
}
func (odriverConn156 *tdriverConn156) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn156.r, odriverConn156.setup, ctx, opts)
}
func (odriverConn156 *tdriverConn156) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn156.r, odriverConn156.setup, query, args)
}
func (odriverConn156 *tdriverConn156) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn156.r, odriverConn156.setup, param0)
}
func (odriverConn156 *tdriverConn156) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn156.r, odriverConn156.setup, ctx)
}

func (odriverConn157 *tdriverConn157) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn157.r, odriverConn157.setup)
}
func (odriverConn157 *tdriverConn157) Close() error {
	return traceDCClose(odriverConn157.r, odriverConn157.setup)
}
func (odriverConn157 *tdriverConn157) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn157.r, odriverConn157.setup, query)
}
func (odriverConn157 *tdriverConn157) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn157.r, odriverConn157.setup, ctx, opts)
}
func (odriverConn157 *tdriverConn157) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn157.r, odriverConn157.setup, query, args)
}
func (odriverConn157 *tdriverConn157) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn157.r, odriverConn157.setup, param0)
}
func (odriverConn157 *tdriverConn157) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn157.r, odriverConn157.setup, query, args)
}

func (odriverConn158 *tdriverConn158) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn158.r, odriverConn158.setup)
}
func (odriverConn158 *tdriverConn158) Close() error {
	return traceDCClose(odriverConn158.r, odriverConn158.setup)
}
func (odriverConn158 *tdriverConn158) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn158.r, odriverConn158.setup, query)
}
func (odriverConn158 *tdriverConn158) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn158.r, odriverConn158.setup, ctx, opts)
}
func (odriverConn158 *tdriverConn158) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn158.r, odriverConn158.setup, query, args)
}
func (odriverConn158 *tdriverConn158) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn158.r, odriverConn158.setup, param0)
}
func (odriverConn158 *tdriverConn158) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn158.r, odriverConn158.setup, ctx, query, args)
}

func (odriverConn159 *tdriverConn159) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn159.r, odriverConn159.setup)
}
func (odriverConn159 *tdriverConn159) Close() error {
	return traceDCClose(odriverConn159.r, odriverConn159.setup)
}
func (odriverConn159 *tdriverConn159) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn159.r, odriverConn159.setup, query)
}
func (odriverConn159 *tdriverConn159) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn159.r, odriverConn159.setup, ctx, opts)
}
func (odriverConn159 *tdriverConn159) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn159.r, odriverConn159.setup, query, args)
}
func (odriverConn159 *tdriverConn159) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn159.r, odriverConn159.setup, param0)
}
func (odriverConn159 *tdriverConn159) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn159.r, odriverConn159.setup, ctx)
}

func (odriverConn160 *tdriverConn160) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn160.r, odriverConn160.setup)
}
func (odriverConn160 *tdriverConn160) Close() error {
	return traceDCClose(odriverConn160.r, odriverConn160.setup)
}
func (odriverConn160 *tdriverConn160) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn160.r, odriverConn160.setup, query)
}
func (odriverConn160 *tdriverConn160) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn160.r, odriverConn160.setup, ctx, opts)
}
func (odriverConn160 *tdriverConn160) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn160.r, odriverConn160.setup, query, args)
}
func (odriverConn160 *tdriverConn160) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn160.r, odriverConn160.setup, ctx)
}
func (odriverConn160 *tdriverConn160) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn160.r, odriverConn160.setup, query, args)
}

func (odriverConn161 *tdriverConn161) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn161.r, odriverConn161.setup)
}
func (odriverConn161 *tdriverConn161) Close() error {
	return traceDCClose(odriverConn161.r, odriverConn161.setup)
}
func (odriverConn161 *tdriverConn161) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn161.r, odriverConn161.setup, query)
}
func (odriverConn161 *tdriverConn161) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn161.r, odriverConn161.setup, ctx, opts)
}
func (odriverConn161 *tdriverConn161) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn161.r, odriverConn161.setup, query, args)
}
func (odriverConn161 *tdriverConn161) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn161.r, odriverConn161.setup, ctx)
}
func (odriverConn161 *tdriverConn161) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn161.r, odriverConn161.setup, ctx, query, args)
}

func (odriverConn162 *tdriverConn162) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn162.r, odriverConn162.setup)
}
func (odriverConn162 *tdriverConn162) Close() error {
	return traceDCClose(odriverConn162.r, odriverConn162.setup)
}
func (odriverConn162 *tdriverConn162) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn162.r, odriverConn162.setup, query)
}
func (odriverConn162 *tdriverConn162) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn162.r, odriverConn162.setup, ctx, opts)
}
func (odriverConn162 *tdriverConn162) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn162.r, odriverConn162.setup, query, args)
}
func (odriverConn162 *tdriverConn162) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn162.r, odriverConn162.setup, ctx)
}
func (odriverConn162 *tdriverConn162) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn162.r, odriverConn162.setup, ctx)
}

func (odriverConn163 *tdriverConn163) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn163.r, odriverConn163.setup)
}
func (odriverConn163 *tdriverConn163) Close() error {
	return traceDCClose(odriverConn163.r, odriverConn163.setup)
}
func (odriverConn163 *tdriverConn163) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn163.r, odriverConn163.setup, query)
}
func (odriverConn163 *tdriverConn163) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn163.r, odriverConn163.setup, ctx, opts)
}
func (odriverConn163 *tdriverConn163) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn163.r, odriverConn163.setup, query, args)
}
func (odriverConn163 *tdriverConn163) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn163.r, odriverConn163.setup, query, args)
}
func (odriverConn163 *tdriverConn163) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn163.r, odriverConn163.setup, ctx, query, args)
}

func (odriverConn164 *tdriverConn164) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn164.r, odriverConn164.setup)
}
func (odriverConn164 *tdriverConn164) Close() error {
	return traceDCClose(odriverConn164.r, odriverConn164.setup)
}
func (odriverConn164 *tdriverConn164) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn164.r, odriverConn164.setup, query)
}
func (odriverConn164 *tdriverConn164) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn164.r, odriverConn164.setup, ctx, opts)
}
func (odriverConn164 *tdriverConn164) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn164.r, odriverConn164.setup, query, args)
}
func (odriverConn164 *tdriverConn164) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn164.r, odriverConn164.setup, query, args)
}
func (odriverConn164 *tdriverConn164) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn164.r, odriverConn164.setup, ctx)
}

func (odriverConn165 *tdriverConn165) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn165.r, odriverConn165.setup)
}
func (odriverConn165 *tdriverConn165) Close() error {
	return traceDCClose(odriverConn165.r, odriverConn165.setup)
}
func (odriverConn165 *tdriverConn165) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn165.r, odriverConn165.setup, query)
}
func (odriverConn165 *tdriverConn165) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn165.r, odriverConn165.setup, ctx, opts)
}
func (odriverConn165 *tdriverConn165) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn165.r, odriverConn165.setup, query, args)
}
func (odriverConn165 *tdriverConn165) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn165.r, odriverConn165.setup, ctx, query, args)
}
func (odriverConn165 *tdriverConn165) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn165.r, odriverConn165.setup, ctx)
}

func (odriverConn166 *tdriverConn166) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn166.r, odriverConn166.setup)
}
func (odriverConn166 *tdriverConn166) Close() error {
	return traceDCClose(odriverConn166.r, odriverConn166.setup)
}
func (odriverConn166 *tdriverConn166) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn166.r, odriverConn166.setup, query)
}
func (odriverConn166 *tdriverConn166) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn166.r, odriverConn166.setup, ctx, opts)
}
func (odriverConn166 *tdriverConn166) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn166.r, odriverConn166.setup, ctx, query, args)
}
func (odriverConn166 *tdriverConn166) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn166.r, odriverConn166.setup, param0)
}
func (odriverConn166 *tdriverConn166) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn166.r, odriverConn166.setup, ctx)
}

func (odriverConn167 *tdriverConn167) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn167.r, odriverConn167.setup)
}
func (odriverConn167 *tdriverConn167) Close() error {
	return traceDCClose(odriverConn167.r, odriverConn167.setup)
}
func (odriverConn167 *tdriverConn167) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn167.r, odriverConn167.setup, query)
}
func (odriverConn167 *tdriverConn167) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn167.r, odriverConn167.setup, ctx, opts)
}
func (odriverConn167 *tdriverConn167) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn167.r, odriverConn167.setup, ctx, query, args)
}
func (odriverConn167 *tdriverConn167) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn167.r, odriverConn167.setup, param0)
}
func (odriverConn167 *tdriverConn167) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn167.r, odriverConn167.setup, query, args)
}

func (odriverConn168 *tdriverConn168) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn168.r, odriverConn168.setup)
}
func (odriverConn168 *tdriverConn168) Close() error {
	return traceDCClose(odriverConn168.r, odriverConn168.setup)
}
func (odriverConn168 *tdriverConn168) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn168.r, odriverConn168.setup, query)
}
func (odriverConn168 *tdriverConn168) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn168.r, odriverConn168.setup, ctx, opts)
}
func (odriverConn168 *tdriverConn168) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn168.r, odriverConn168.setup, ctx, query, args)
}
func (odriverConn168 *tdriverConn168) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn168.r, odriverConn168.setup, param0)
}
func (odriverConn168 *tdriverConn168) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn168.r, odriverConn168.setup, ctx, query, args)
}

func (odriverConn169 *tdriverConn169) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn169.r, odriverConn169.setup)
}
func (odriverConn169 *tdriverConn169) Close() error {
	return traceDCClose(odriverConn169.r, odriverConn169.setup)
}
func (odriverConn169 *tdriverConn169) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn169.r, odriverConn169.setup, query)
}
func (odriverConn169 *tdriverConn169) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn169.r, odriverConn169.setup, ctx, opts)
}
func (odriverConn169 *tdriverConn169) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn169.r, odriverConn169.setup, ctx, query, args)
}
func (odriverConn169 *tdriverConn169) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn169.r, odriverConn169.setup, param0)
}
func (odriverConn169 *tdriverConn169) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn169.r, odriverConn169.setup, ctx)
}

func (odriverConn170 *tdriverConn170) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn170.r, odriverConn170.setup)
}
func (odriverConn170 *tdriverConn170) Close() error {
	return traceDCClose(odriverConn170.r, odriverConn170.setup)
}
func (odriverConn170 *tdriverConn170) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn170.r, odriverConn170.setup, query)
}
func (odriverConn170 *tdriverConn170) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn170.r, odriverConn170.setup, ctx, opts)
}
func (odriverConn170 *tdriverConn170) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn170.r, odriverConn170.setup, ctx, query, args)
}
func (odriverConn170 *tdriverConn170) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn170.r, odriverConn170.setup, ctx)
}
func (odriverConn170 *tdriverConn170) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn170.r, odriverConn170.setup, query, args)
}

func (odriverConn171 *tdriverConn171) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn171.r, odriverConn171.setup)
}
func (odriverConn171 *tdriverConn171) Close() error {
	return traceDCClose(odriverConn171.r, odriverConn171.setup)
}
func (odriverConn171 *tdriverConn171) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn171.r, odriverConn171.setup, query)
}
func (odriverConn171 *tdriverConn171) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn171.r, odriverConn171.setup, ctx, opts)
}
func (odriverConn171 *tdriverConn171) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn171.r, odriverConn171.setup, ctx, query, args)
}
func (odriverConn171 *tdriverConn171) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn171.r, odriverConn171.setup, ctx)
}
func (odriverConn171 *tdriverConn171) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn171.r, odriverConn171.setup, ctx, query, args)
}

func (odriverConn172 *tdriverConn172) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn172.r, odriverConn172.setup)
}
func (odriverConn172 *tdriverConn172) Close() error {
	return traceDCClose(odriverConn172.r, odriverConn172.setup)
}
func (odriverConn172 *tdriverConn172) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn172.r, odriverConn172.setup, query)
}
func (odriverConn172 *tdriverConn172) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn172.r, odriverConn172.setup, ctx, opts)
}
func (odriverConn172 *tdriverConn172) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn172.r, odriverConn172.setup, ctx, query, args)
}
func (odriverConn172 *tdriverConn172) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn172.r, odriverConn172.setup, ctx)
}
func (odriverConn172 *tdriverConn172) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn172.r, odriverConn172.setup, ctx)
}

func (odriverConn173 *tdriverConn173) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn173.r, odriverConn173.setup)
}
func (odriverConn173 *tdriverConn173) Close() error {
	return traceDCClose(odriverConn173.r, odriverConn173.setup)
}
func (odriverConn173 *tdriverConn173) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn173.r, odriverConn173.setup, query)
}
func (odriverConn173 *tdriverConn173) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn173.r, odriverConn173.setup, ctx, opts)
}
func (odriverConn173 *tdriverConn173) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn173.r, odriverConn173.setup, ctx, query, args)
}
func (odriverConn173 *tdriverConn173) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn173.r, odriverConn173.setup, query, args)
}
func (odriverConn173 *tdriverConn173) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn173.r, odriverConn173.setup, ctx, query, args)
}

func (odriverConn174 *tdriverConn174) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn174.r, odriverConn174.setup)
}
func (odriverConn174 *tdriverConn174) Close() error {
	return traceDCClose(odriverConn174.r, odriverConn174.setup)
}
func (odriverConn174 *tdriverConn174) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn174.r, odriverConn174.setup, query)
}
func (odriverConn174 *tdriverConn174) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn174.r, odriverConn174.setup, ctx, opts)
}
func (odriverConn174 *tdriverConn174) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn174.r, odriverConn174.setup, ctx, query, args)
}
func (odriverConn174 *tdriverConn174) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn174.r, odriverConn174.setup, query, args)
}
func (odriverConn174 *tdriverConn174) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn174.r, odriverConn174.setup, ctx)
}

func (odriverConn175 *tdriverConn175) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn175.r, odriverConn175.setup)
}
func (odriverConn175 *tdriverConn175) Close() error {
	return traceDCClose(odriverConn175.r, odriverConn175.setup)
}
func (odriverConn175 *tdriverConn175) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn175.r, odriverConn175.setup, query)
}
func (odriverConn175 *tdriverConn175) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn175.r, odriverConn175.setup, ctx, opts)
}
func (odriverConn175 *tdriverConn175) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn175.r, odriverConn175.setup, ctx, query, args)
}
func (odriverConn175 *tdriverConn175) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn175.r, odriverConn175.setup, ctx, query, args)
}
func (odriverConn175 *tdriverConn175) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn175.r, odriverConn175.setup, ctx)
}

func (odriverConn176 *tdriverConn176) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn176.r, odriverConn176.setup)
}
func (odriverConn176 *tdriverConn176) Close() error {
	return traceDCClose(odriverConn176.r, odriverConn176.setup)
}
func (odriverConn176 *tdriverConn176) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn176.r, odriverConn176.setup, query)
}
func (odriverConn176 *tdriverConn176) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn176.r, odriverConn176.setup, ctx, opts)
}
func (odriverConn176 *tdriverConn176) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn176.r, odriverConn176.setup, param0)
}
func (odriverConn176 *tdriverConn176) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn176.r, odriverConn176.setup, ctx)
}
func (odriverConn176 *tdriverConn176) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn176.r, odriverConn176.setup, query, args)
}

func (odriverConn177 *tdriverConn177) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn177.r, odriverConn177.setup)
}
func (odriverConn177 *tdriverConn177) Close() error {
	return traceDCClose(odriverConn177.r, odriverConn177.setup)
}
func (odriverConn177 *tdriverConn177) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn177.r, odriverConn177.setup, query)
}
func (odriverConn177 *tdriverConn177) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn177.r, odriverConn177.setup, ctx, opts)
}
func (odriverConn177 *tdriverConn177) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn177.r, odriverConn177.setup, param0)
}
func (odriverConn177 *tdriverConn177) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn177.r, odriverConn177.setup, ctx)
}
func (odriverConn177 *tdriverConn177) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn177.r, odriverConn177.setup, ctx, query, args)
}

func (odriverConn178 *tdriverConn178) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn178.r, odriverConn178.setup)
}
func (odriverConn178 *tdriverConn178) Close() error {
	return traceDCClose(odriverConn178.r, odriverConn178.setup)
}
func (odriverConn178 *tdriverConn178) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn178.r, odriverConn178.setup, query)
}
func (odriverConn178 *tdriverConn178) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn178.r, odriverConn178.setup, ctx, opts)
}
func (odriverConn178 *tdriverConn178) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn178.r, odriverConn178.setup, param0)
}
func (odriverConn178 *tdriverConn178) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn178.r, odriverConn178.setup, ctx)
}
func (odriverConn178 *tdriverConn178) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn178.r, odriverConn178.setup, ctx)
}

func (odriverConn179 *tdriverConn179) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn179.r, odriverConn179.setup)
}
func (odriverConn179 *tdriverConn179) Close() error {
	return traceDCClose(odriverConn179.r, odriverConn179.setup)
}
func (odriverConn179 *tdriverConn179) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn179.r, odriverConn179.setup, query)
}
func (odriverConn179 *tdriverConn179) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn179.r, odriverConn179.setup, ctx, opts)
}
func (odriverConn179 *tdriverConn179) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn179.r, odriverConn179.setup, param0)
}
func (odriverConn179 *tdriverConn179) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn179.r, odriverConn179.setup, query, args)
}
func (odriverConn179 *tdriverConn179) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn179.r, odriverConn179.setup, ctx, query, args)
}

func (odriverConn180 *tdriverConn180) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn180.r, odriverConn180.setup)
}
func (odriverConn180 *tdriverConn180) Close() error {
	return traceDCClose(odriverConn180.r, odriverConn180.setup)
}
func (odriverConn180 *tdriverConn180) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn180.r, odriverConn180.setup, query)
}
func (odriverConn180 *tdriverConn180) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn180.r, odriverConn180.setup, ctx, opts)
}
func (odriverConn180 *tdriverConn180) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn180.r, odriverConn180.setup, param0)
}
func (odriverConn180 *tdriverConn180) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn180.r, odriverConn180.setup, query, args)
}
func (odriverConn180 *tdriverConn180) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn180.r, odriverConn180.setup, ctx)
}

func (odriverConn181 *tdriverConn181) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn181.r, odriverConn181.setup)
}
func (odriverConn181 *tdriverConn181) Close() error {
	return traceDCClose(odriverConn181.r, odriverConn181.setup)
}
func (odriverConn181 *tdriverConn181) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn181.r, odriverConn181.setup, query)
}
func (odriverConn181 *tdriverConn181) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn181.r, odriverConn181.setup, ctx, opts)
}
func (odriverConn181 *tdriverConn181) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn181.r, odriverConn181.setup, param0)
}
func (odriverConn181 *tdriverConn181) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn181.r, odriverConn181.setup, ctx, query, args)
}
func (odriverConn181 *tdriverConn181) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn181.r, odriverConn181.setup, ctx)
}

func (odriverConn182 *tdriverConn182) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn182.r, odriverConn182.setup)
}
func (odriverConn182 *tdriverConn182) Close() error {
	return traceDCClose(odriverConn182.r, odriverConn182.setup)
}
func (odriverConn182 *tdriverConn182) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn182.r, odriverConn182.setup, query)
}
func (odriverConn182 *tdriverConn182) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn182.r, odriverConn182.setup, ctx, opts)
}
func (odriverConn182 *tdriverConn182) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn182.r, odriverConn182.setup, ctx)
}
func (odriverConn182 *tdriverConn182) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn182.r, odriverConn182.setup, query, args)
}
func (odriverConn182 *tdriverConn182) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn182.r, odriverConn182.setup, ctx, query, args)
}

func (odriverConn183 *tdriverConn183) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn183.r, odriverConn183.setup)
}
func (odriverConn183 *tdriverConn183) Close() error {
	return traceDCClose(odriverConn183.r, odriverConn183.setup)
}
func (odriverConn183 *tdriverConn183) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn183.r, odriverConn183.setup, query)
}
func (odriverConn183 *tdriverConn183) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn183.r, odriverConn183.setup, ctx, opts)
}
func (odriverConn183 *tdriverConn183) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn183.r, odriverConn183.setup, ctx)
}
func (odriverConn183 *tdriverConn183) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn183.r, odriverConn183.setup, query, args)
}
func (odriverConn183 *tdriverConn183) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn183.r, odriverConn183.setup, ctx)
}

func (odriverConn184 *tdriverConn184) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn184.r, odriverConn184.setup)
}
func (odriverConn184 *tdriverConn184) Close() error {
	return traceDCClose(odriverConn184.r, odriverConn184.setup)
}
func (odriverConn184 *tdriverConn184) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn184.r, odriverConn184.setup, query)
}
func (odriverConn184 *tdriverConn184) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn184.r, odriverConn184.setup, ctx, opts)
}
func (odriverConn184 *tdriverConn184) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn184.r, odriverConn184.setup, ctx)
}
func (odriverConn184 *tdriverConn184) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn184.r, odriverConn184.setup, ctx, query, args)
}
func (odriverConn184 *tdriverConn184) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn184.r, odriverConn184.setup, ctx)
}

func (odriverConn185 *tdriverConn185) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn185.r, odriverConn185.setup)
}
func (odriverConn185 *tdriverConn185) Close() error {
	return traceDCClose(odriverConn185.r, odriverConn185.setup)
}
func (odriverConn185 *tdriverConn185) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn185.r, odriverConn185.setup, query)
}
func (odriverConn185 *tdriverConn185) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn185.r, odriverConn185.setup, ctx, opts)
}
func (odriverConn185 *tdriverConn185) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn185.r, odriverConn185.setup, query, args)
}
func (odriverConn185 *tdriverConn185) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn185.r, odriverConn185.setup, ctx, query, args)
}
func (odriverConn185 *tdriverConn185) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn185.r, odriverConn185.setup, ctx)
}

func (odriverConn186 *tdriverConn186) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn186.r, odriverConn186.setup)
}
func (odriverConn186 *tdriverConn186) Close() error {
	return traceDCClose(odriverConn186.r, odriverConn186.setup)
}
func (odriverConn186 *tdriverConn186) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn186.r, odriverConn186.setup, query)
}
func (odriverConn186 *tdriverConn186) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn186.r, odriverConn186.setup, ctx, query)
}
func (odriverConn186 *tdriverConn186) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn186.r, odriverConn186.setup, query, args)
}
func (odriverConn186 *tdriverConn186) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn186.r, odriverConn186.setup, ctx, query, args)
}
func (odriverConn186 *tdriverConn186) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn186.r, odriverConn186.setup, param0)
}

func (odriverConn187 *tdriverConn187) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn187.r, odriverConn187.setup)
}
func (odriverConn187 *tdriverConn187) Close() error {
	return traceDCClose(odriverConn187.r, odriverConn187.setup)
}
func (odriverConn187 *tdriverConn187) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn187.r, odriverConn187.setup, query)
}
func (odriverConn187 *tdriverConn187) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn187.r, odriverConn187.setup, ctx, query)
}
func (odriverConn187 *tdriverConn187) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn187.r, odriverConn187.setup, query, args)
}
func (odriverConn187 *tdriverConn187) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn187.r, odriverConn187.setup, ctx, query, args)
}
func (odriverConn187 *tdriverConn187) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn187.r, odriverConn187.setup, ctx)
}

func (odriverConn188 *tdriverConn188) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn188.r, odriverConn188.setup)
}
func (odriverConn188 *tdriverConn188) Close() error {
	return traceDCClose(odriverConn188.r, odriverConn188.setup)
}
func (odriverConn188 *tdriverConn188) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn188.r, odriverConn188.setup, query)
}
func (odriverConn188 *tdriverConn188) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn188.r, odriverConn188.setup, ctx, query)
}
func (odriverConn188 *tdriverConn188) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn188.r, odriverConn188.setup, query, args)
}
func (odriverConn188 *tdriverConn188) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn188.r, odriverConn188.setup, ctx, query, args)
}
func (odriverConn188 *tdriverConn188) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn188.r, odriverConn188.setup, query, args)
}

func (odriverConn189 *tdriverConn189) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn189.r, odriverConn189.setup)
}
func (odriverConn189 *tdriverConn189) Close() error {
	return traceDCClose(odriverConn189.r, odriverConn189.setup)
}
func (odriverConn189 *tdriverConn189) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn189.r, odriverConn189.setup, query)
}
func (odriverConn189 *tdriverConn189) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn189.r, odriverConn189.setup, ctx, query)
}
func (odriverConn189 *tdriverConn189) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn189.r, odriverConn189.setup, query, args)
}
func (odriverConn189 *tdriverConn189) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn189.r, odriverConn189.setup, ctx, query, args)
}
func (odriverConn189 *tdriverConn189) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn189.r, odriverConn189.setup, ctx, query, args)
}

func (odriverConn190 *tdriverConn190) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn190.r, odriverConn190.setup)
}
func (odriverConn190 *tdriverConn190) Close() error {
	return traceDCClose(odriverConn190.r, odriverConn190.setup)
}
func (odriverConn190 *tdriverConn190) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn190.r, odriverConn190.setup, query)
}
func (odriverConn190 *tdriverConn190) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn190.r, odriverConn190.setup, ctx, query)
}
func (odriverConn190 *tdriverConn190) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn190.r, odriverConn190.setup, query, args)
}
func (odriverConn190 *tdriverConn190) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn190.r, odriverConn190.setup, ctx, query, args)
}
func (odriverConn190 *tdriverConn190) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn190.r, odriverConn190.setup, ctx)
}

func (odriverConn191 *tdriverConn191) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn191.r, odriverConn191.setup)
}
func (odriverConn191 *tdriverConn191) Close() error {
	return traceDCClose(odriverConn191.r, odriverConn191.setup)
}
func (odriverConn191 *tdriverConn191) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn191.r, odriverConn191.setup, query)
}
func (odriverConn191 *tdriverConn191) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn191.r, odriverConn191.setup, ctx, query)
}
func (odriverConn191 *tdriverConn191) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn191.r, odriverConn191.setup, query, args)
}
func (odriverConn191 *tdriverConn191) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn191.r, odriverConn191.setup, param0)
}
func (odriverConn191 *tdriverConn191) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn191.r, odriverConn191.setup, ctx)
}

func (odriverConn192 *tdriverConn192) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn192.r, odriverConn192.setup)
}
func (odriverConn192 *tdriverConn192) Close() error {
	return traceDCClose(odriverConn192.r, odriverConn192.setup)
}
func (odriverConn192 *tdriverConn192) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn192.r, odriverConn192.setup, query)
}
func (odriverConn192 *tdriverConn192) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn192.r, odriverConn192.setup, ctx, query)
}
func (odriverConn192 *tdriverConn192) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn192.r, odriverConn192.setup, query, args)
}
func (odriverConn192 *tdriverConn192) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn192.r, odriverConn192.setup, param0)
}
func (odriverConn192 *tdriverConn192) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn192.r, odriverConn192.setup, query, args)
}

func (odriverConn193 *tdriverConn193) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn193.r, odriverConn193.setup)
}
func (odriverConn193 *tdriverConn193) Close() error {
	return traceDCClose(odriverConn193.r, odriverConn193.setup)
}
func (odriverConn193 *tdriverConn193) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn193.r, odriverConn193.setup, query)
}
func (odriverConn193 *tdriverConn193) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn193.r, odriverConn193.setup, ctx, query)
}
func (odriverConn193 *tdriverConn193) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn193.r, odriverConn193.setup, query, args)
}
func (odriverConn193 *tdriverConn193) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn193.r, odriverConn193.setup, param0)
}
func (odriverConn193 *tdriverConn193) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn193.r, odriverConn193.setup, ctx, query, args)
}

func (odriverConn194 *tdriverConn194) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn194.r, odriverConn194.setup)
}
func (odriverConn194 *tdriverConn194) Close() error {
	return traceDCClose(odriverConn194.r, odriverConn194.setup)
}
func (odriverConn194 *tdriverConn194) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn194.r, odriverConn194.setup, query)
}
func (odriverConn194 *tdriverConn194) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn194.r, odriverConn194.setup, ctx, query)
}
func (odriverConn194 *tdriverConn194) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn194.r, odriverConn194.setup, query, args)
}
func (odriverConn194 *tdriverConn194) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn194.r, odriverConn194.setup, param0)
}
func (odriverConn194 *tdriverConn194) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn194.r, odriverConn194.setup, ctx)
}

func (odriverConn195 *tdriverConn195) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn195.r, odriverConn195.setup)
}
func (odriverConn195 *tdriverConn195) Close() error {
	return traceDCClose(odriverConn195.r, odriverConn195.setup)
}
func (odriverConn195 *tdriverConn195) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn195.r, odriverConn195.setup, query)
}
func (odriverConn195 *tdriverConn195) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn195.r, odriverConn195.setup, ctx, query)
}
func (odriverConn195 *tdriverConn195) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn195.r, odriverConn195.setup, query, args)
}
func (odriverConn195 *tdriverConn195) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn195.r, odriverConn195.setup, ctx)
}
func (odriverConn195 *tdriverConn195) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn195.r, odriverConn195.setup, query, args)
}

func (odriverConn196 *tdriverConn196) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn196.r, odriverConn196.setup)
}
func (odriverConn196 *tdriverConn196) Close() error {
	return traceDCClose(odriverConn196.r, odriverConn196.setup)
}
func (odriverConn196 *tdriverConn196) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn196.r, odriverConn196.setup, query)
}
func (odriverConn196 *tdriverConn196) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn196.r, odriverConn196.setup, ctx, query)
}
func (odriverConn196 *tdriverConn196) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn196.r, odriverConn196.setup, query, args)
}
func (odriverConn196 *tdriverConn196) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn196.r, odriverConn196.setup, ctx)
}
func (odriverConn196 *tdriverConn196) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn196.r, odriverConn196.setup, ctx, query, args)
}

func (odriverConn197 *tdriverConn197) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn197.r, odriverConn197.setup)
}
func (odriverConn197 *tdriverConn197) Close() error {
	return traceDCClose(odriverConn197.r, odriverConn197.setup)
}
func (odriverConn197 *tdriverConn197) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn197.r, odriverConn197.setup, query)
}
func (odriverConn197 *tdriverConn197) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn197.r, odriverConn197.setup, ctx, query)
}
func (odriverConn197 *tdriverConn197) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn197.r, odriverConn197.setup, query, args)
}
func (odriverConn197 *tdriverConn197) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn197.r, odriverConn197.setup, ctx)
}
func (odriverConn197 *tdriverConn197) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn197.r, odriverConn197.setup, ctx)
}

func (odriverConn198 *tdriverConn198) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn198.r, odriverConn198.setup)
}
func (odriverConn198 *tdriverConn198) Close() error {
	return traceDCClose(odriverConn198.r, odriverConn198.setup)
}
func (odriverConn198 *tdriverConn198) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn198.r, odriverConn198.setup, query)
}
func (odriverConn198 *tdriverConn198) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn198.r, odriverConn198.setup, ctx, query)
}
func (odriverConn198 *tdriverConn198) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn198.r, odriverConn198.setup, query, args)
}
func (odriverConn198 *tdriverConn198) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn198.r, odriverConn198.setup, query, args)
}
func (odriverConn198 *tdriverConn198) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn198.r, odriverConn198.setup, ctx, query, args)
}

func (odriverConn199 *tdriverConn199) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn199.r, odriverConn199.setup)
}
func (odriverConn199 *tdriverConn199) Close() error {
	return traceDCClose(odriverConn199.r, odriverConn199.setup)
}
func (odriverConn199 *tdriverConn199) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn199.r, odriverConn199.setup, query)
}
func (odriverConn199 *tdriverConn199) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn199.r, odriverConn199.setup, ctx, query)
}
func (odriverConn199 *tdriverConn199) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn199.r, odriverConn199.setup, query, args)
}
func (odriverConn199 *tdriverConn199) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn199.r, odriverConn199.setup, query, args)
}
func (odriverConn199 *tdriverConn199) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn199.r, odriverConn199.setup, ctx)
}

func (odriverConn200 *tdriverConn200) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn200.r, odriverConn200.setup)
}
func (odriverConn200 *tdriverConn200) Close() error {
	return traceDCClose(odriverConn200.r, odriverConn200.setup)
}
func (odriverConn200 *tdriverConn200) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn200.r, odriverConn200.setup, query)
}
func (odriverConn200 *tdriverConn200) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn200.r, odriverConn200.setup, ctx, query)
}
func (odriverConn200 *tdriverConn200) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn200.r, odriverConn200.setup, query, args)
}
func (odriverConn200 *tdriverConn200) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn200.r, odriverConn200.setup, ctx, query, args)
}
func (odriverConn200 *tdriverConn200) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn200.r, odriverConn200.setup, ctx)
}

func (odriverConn201 *tdriverConn201) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn201.r, odriverConn201.setup)
}
func (odriverConn201 *tdriverConn201) Close() error {
	return traceDCClose(odriverConn201.r, odriverConn201.setup)
}
func (odriverConn201 *tdriverConn201) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn201.r, odriverConn201.setup, query)
}
func (odriverConn201 *tdriverConn201) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn201.r, odriverConn201.setup, ctx, query)
}
func (odriverConn201 *tdriverConn201) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn201.r, odriverConn201.setup, ctx, query, args)
}
func (odriverConn201 *tdriverConn201) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn201.r, odriverConn201.setup, param0)
}
func (odriverConn201 *tdriverConn201) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn201.r, odriverConn201.setup, ctx)
}

func (odriverConn202 *tdriverConn202) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn202.r, odriverConn202.setup)
}
func (odriverConn202 *tdriverConn202) Close() error {
	return traceDCClose(odriverConn202.r, odriverConn202.setup)
}
func (odriverConn202 *tdriverConn202) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn202.r, odriverConn202.setup, query)
}
func (odriverConn202 *tdriverConn202) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn202.r, odriverConn202.setup, ctx, query)
}
func (odriverConn202 *tdriverConn202) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn202.r, odriverConn202.setup, ctx, query, args)
}
func (odriverConn202 *tdriverConn202) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn202.r, odriverConn202.setup, param0)
}
func (odriverConn202 *tdriverConn202) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn202.r, odriverConn202.setup, query, args)
}

func (odriverConn203 *tdriverConn203) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn203.r, odriverConn203.setup)
}
func (odriverConn203 *tdriverConn203) Close() error {
	return traceDCClose(odriverConn203.r, odriverConn203.setup)
}
func (odriverConn203 *tdriverConn203) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn203.r, odriverConn203.setup, query)
}
func (odriverConn203 *tdriverConn203) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn203.r, odriverConn203.setup, ctx, query)
}
func (odriverConn203 *tdriverConn203) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn203.r, odriverConn203.setup, ctx, query, args)
}
func (odriverConn203 *tdriverConn203) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn203.r, odriverConn203.setup, param0)
}
func (odriverConn203 *tdriverConn203) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn203.r, odriverConn203.setup, ctx, query, args)
}

func (odriverConn204 *tdriverConn204) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn204.r, odriverConn204.setup)
}
func (odriverConn204 *tdriverConn204) Close() error {
	return traceDCClose(odriverConn204.r, odriverConn204.setup)
}
func (odriverConn204 *tdriverConn204) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn204.r, odriverConn204.setup, query)
}
func (odriverConn204 *tdriverConn204) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn204.r, odriverConn204.setup, ctx, query)
}
func (odriverConn204 *tdriverConn204) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn204.r, odriverConn204.setup, ctx, query, args)
}
func (odriverConn204 *tdriverConn204) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn204.r, odriverConn204.setup, param0)
}
func (odriverConn204 *tdriverConn204) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn204.r, odriverConn204.setup, ctx)
}

func (odriverConn205 *tdriverConn205) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn205.r, odriverConn205.setup)
}
func (odriverConn205 *tdriverConn205) Close() error {
	return traceDCClose(odriverConn205.r, odriverConn205.setup)
}
func (odriverConn205 *tdriverConn205) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn205.r, odriverConn205.setup, query)
}
func (odriverConn205 *tdriverConn205) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn205.r, odriverConn205.setup, ctx, query)
}
func (odriverConn205 *tdriverConn205) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn205.r, odriverConn205.setup, ctx, query, args)
}
func (odriverConn205 *tdriverConn205) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn205.r, odriverConn205.setup, ctx)
}
func (odriverConn205 *tdriverConn205) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn205.r, odriverConn205.setup, query, args)
}

func (odriverConn206 *tdriverConn206) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn206.r, odriverConn206.setup)
}
func (odriverConn206 *tdriverConn206) Close() error {
	return traceDCClose(odriverConn206.r, odriverConn206.setup)
}
func (odriverConn206 *tdriverConn206) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn206.r, odriverConn206.setup, query)
}
func (odriverConn206 *tdriverConn206) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn206.r, odriverConn206.setup, ctx, query)
}
func (odriverConn206 *tdriverConn206) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn206.r, odriverConn206.setup, ctx, query, args)
}
func (odriverConn206 *tdriverConn206) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn206.r, odriverConn206.setup, ctx)
}
func (odriverConn206 *tdriverConn206) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn206.r, odriverConn206.setup, ctx, query, args)
}

func (odriverConn207 *tdriverConn207) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn207.r, odriverConn207.setup)
}
func (odriverConn207 *tdriverConn207) Close() error {
	return traceDCClose(odriverConn207.r, odriverConn207.setup)
}
func (odriverConn207 *tdriverConn207) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn207.r, odriverConn207.setup, query)
}
func (odriverConn207 *tdriverConn207) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn207.r, odriverConn207.setup, ctx, query)
}
func (odriverConn207 *tdriverConn207) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn207.r, odriverConn207.setup, ctx, query, args)
}
func (odriverConn207 *tdriverConn207) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn207.r, odriverConn207.setup, ctx)
}
func (odriverConn207 *tdriverConn207) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn207.r, odriverConn207.setup, ctx)
}

func (odriverConn208 *tdriverConn208) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn208.r, odriverConn208.setup)
}
func (odriverConn208 *tdriverConn208) Close() error {
	return traceDCClose(odriverConn208.r, odriverConn208.setup)
}
func (odriverConn208 *tdriverConn208) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn208.r, odriverConn208.setup, query)
}
func (odriverConn208 *tdriverConn208) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn208.r, odriverConn208.setup, ctx, query)
}
func (odriverConn208 *tdriverConn208) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn208.r, odriverConn208.setup, ctx, query, args)
}
func (odriverConn208 *tdriverConn208) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn208.r, odriverConn208.setup, query, args)
}
func (odriverConn208 *tdriverConn208) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn208.r, odriverConn208.setup, ctx, query, args)
}

func (odriverConn209 *tdriverConn209) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn209.r, odriverConn209.setup)
}
func (odriverConn209 *tdriverConn209) Close() error {
	return traceDCClose(odriverConn209.r, odriverConn209.setup)
}
func (odriverConn209 *tdriverConn209) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn209.r, odriverConn209.setup, query)
}
func (odriverConn209 *tdriverConn209) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn209.r, odriverConn209.setup, ctx, query)
}
func (odriverConn209 *tdriverConn209) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn209.r, odriverConn209.setup, ctx, query, args)
}
func (odriverConn209 *tdriverConn209) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn209.r, odriverConn209.setup, query, args)
}
func (odriverConn209 *tdriverConn209) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn209.r, odriverConn209.setup, ctx)
}

func (odriverConn210 *tdriverConn210) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn210.r, odriverConn210.setup)
}
func (odriverConn210 *tdriverConn210) Close() error {
	return traceDCClose(odriverConn210.r, odriverConn210.setup)
}
func (odriverConn210 *tdriverConn210) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn210.r, odriverConn210.setup, query)
}
func (odriverConn210 *tdriverConn210) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn210.r, odriverConn210.setup, ctx, query)
}
func (odriverConn210 *tdriverConn210) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn210.r, odriverConn210.setup, ctx, query, args)
}
func (odriverConn210 *tdriverConn210) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn210.r, odriverConn210.setup, ctx, query, args)
}
func (odriverConn210 *tdriverConn210) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn210.r, odriverConn210.setup, ctx)
}

func (odriverConn211 *tdriverConn211) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn211.r, odriverConn211.setup)
}
func (odriverConn211 *tdriverConn211) Close() error {
	return traceDCClose(odriverConn211.r, odriverConn211.setup)
}
func (odriverConn211 *tdriverConn211) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn211.r, odriverConn211.setup, query)
}
func (odriverConn211 *tdriverConn211) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn211.r, odriverConn211.setup, ctx, query)
}
func (odriverConn211 *tdriverConn211) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn211.r, odriverConn211.setup, param0)
}
func (odriverConn211 *tdriverConn211) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn211.r, odriverConn211.setup, ctx)
}
func (odriverConn211 *tdriverConn211) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn211.r, odriverConn211.setup, query, args)
}

func (odriverConn212 *tdriverConn212) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn212.r, odriverConn212.setup)
}
func (odriverConn212 *tdriverConn212) Close() error {
	return traceDCClose(odriverConn212.r, odriverConn212.setup)
}
func (odriverConn212 *tdriverConn212) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn212.r, odriverConn212.setup, query)
}
func (odriverConn212 *tdriverConn212) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn212.r, odriverConn212.setup, ctx, query)
}
func (odriverConn212 *tdriverConn212) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn212.r, odriverConn212.setup, param0)
}
func (odriverConn212 *tdriverConn212) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn212.r, odriverConn212.setup, ctx)
}
func (odriverConn212 *tdriverConn212) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn212.r, odriverConn212.setup, ctx, query, args)
}

func (odriverConn213 *tdriverConn213) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn213.r, odriverConn213.setup)
}
func (odriverConn213 *tdriverConn213) Close() error {
	return traceDCClose(odriverConn213.r, odriverConn213.setup)
}
func (odriverConn213 *tdriverConn213) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn213.r, odriverConn213.setup, query)
}
func (odriverConn213 *tdriverConn213) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn213.r, odriverConn213.setup, ctx, query)
}
func (odriverConn213 *tdriverConn213) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn213.r, odriverConn213.setup, param0)
}
func (odriverConn213 *tdriverConn213) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn213.r, odriverConn213.setup, ctx)
}
func (odriverConn213 *tdriverConn213) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn213.r, odriverConn213.setup, ctx)
}

func (odriverConn214 *tdriverConn214) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn214.r, odriverConn214.setup)
}
func (odriverConn214 *tdriverConn214) Close() error {
	return traceDCClose(odriverConn214.r, odriverConn214.setup)
}
func (odriverConn214 *tdriverConn214) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn214.r, odriverConn214.setup, query)
}
func (odriverConn214 *tdriverConn214) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn214.r, odriverConn214.setup, ctx, query)
}
func (odriverConn214 *tdriverConn214) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn214.r, odriverConn214.setup, param0)
}
func (odriverConn214 *tdriverConn214) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn214.r, odriverConn214.setup, query, args)
}
func (odriverConn214 *tdriverConn214) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn214.r, odriverConn214.setup, ctx, query, args)
}

func (odriverConn215 *tdriverConn215) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn215.r, odriverConn215.setup)
}
func (odriverConn215 *tdriverConn215) Close() error {
	return traceDCClose(odriverConn215.r, odriverConn215.setup)
}
func (odriverConn215 *tdriverConn215) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn215.r, odriverConn215.setup, query)
}
func (odriverConn215 *tdriverConn215) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn215.r, odriverConn215.setup, ctx, query)
}
func (odriverConn215 *tdriverConn215) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn215.r, odriverConn215.setup, param0)
}
func (odriverConn215 *tdriverConn215) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn215.r, odriverConn215.setup, query, args)
}
func (odriverConn215 *tdriverConn215) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn215.r, odriverConn215.setup, ctx)
}

func (odriverConn216 *tdriverConn216) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn216.r, odriverConn216.setup)
}
func (odriverConn216 *tdriverConn216) Close() error {
	return traceDCClose(odriverConn216.r, odriverConn216.setup)
}
func (odriverConn216 *tdriverConn216) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn216.r, odriverConn216.setup, query)
}
func (odriverConn216 *tdriverConn216) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn216.r, odriverConn216.setup, ctx, query)
}
func (odriverConn216 *tdriverConn216) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn216.r, odriverConn216.setup, param0)
}
func (odriverConn216 *tdriverConn216) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn216.r, odriverConn216.setup, ctx, query, args)
}
func (odriverConn216 *tdriverConn216) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn216.r, odriverConn216.setup, ctx)
}

func (odriverConn217 *tdriverConn217) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn217.r, odriverConn217.setup)
}
func (odriverConn217 *tdriverConn217) Close() error {
	return traceDCClose(odriverConn217.r, odriverConn217.setup)
}
func (odriverConn217 *tdriverConn217) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn217.r, odriverConn217.setup, query)
}
func (odriverConn217 *tdriverConn217) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn217.r, odriverConn217.setup, ctx, query)
}
func (odriverConn217 *tdriverConn217) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn217.r, odriverConn217.setup, ctx)
}
func (odriverConn217 *tdriverConn217) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn217.r, odriverConn217.setup, query, args)
}
func (odriverConn217 *tdriverConn217) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn217.r, odriverConn217.setup, ctx, query, args)
}

func (odriverConn218 *tdriverConn218) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn218.r, odriverConn218.setup)
}
func (odriverConn218 *tdriverConn218) Close() error {
	return traceDCClose(odriverConn218.r, odriverConn218.setup)
}
func (odriverConn218 *tdriverConn218) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn218.r, odriverConn218.setup, query)
}
func (odriverConn218 *tdriverConn218) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn218.r, odriverConn218.setup, ctx, query)
}
func (odriverConn218 *tdriverConn218) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn218.r, odriverConn218.setup, ctx)
}
func (odriverConn218 *tdriverConn218) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn218.r, odriverConn218.setup, query, args)
}
func (odriverConn218 *tdriverConn218) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn218.r, odriverConn218.setup, ctx)
}

func (odriverConn219 *tdriverConn219) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn219.r, odriverConn219.setup)
}
func (odriverConn219 *tdriverConn219) Close() error {
	return traceDCClose(odriverConn219.r, odriverConn219.setup)
}
func (odriverConn219 *tdriverConn219) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn219.r, odriverConn219.setup, query)
}
func (odriverConn219 *tdriverConn219) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn219.r, odriverConn219.setup, ctx, query)
}
func (odriverConn219 *tdriverConn219) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn219.r, odriverConn219.setup, ctx)
}
func (odriverConn219 *tdriverConn219) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn219.r, odriverConn219.setup, ctx, query, args)
}
func (odriverConn219 *tdriverConn219) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn219.r, odriverConn219.setup, ctx)
}

func (odriverConn220 *tdriverConn220) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn220.r, odriverConn220.setup)
}
func (odriverConn220 *tdriverConn220) Close() error {
	return traceDCClose(odriverConn220.r, odriverConn220.setup)
}
func (odriverConn220 *tdriverConn220) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn220.r, odriverConn220.setup, query)
}
func (odriverConn220 *tdriverConn220) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn220.r, odriverConn220.setup, ctx, query)
}
func (odriverConn220 *tdriverConn220) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn220.r, odriverConn220.setup, query, args)
}
func (odriverConn220 *tdriverConn220) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn220.r, odriverConn220.setup, ctx, query, args)
}
func (odriverConn220 *tdriverConn220) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn220.r, odriverConn220.setup, ctx)
}

func (odriverConn221 *tdriverConn221) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn221.r, odriverConn221.setup)
}
func (odriverConn221 *tdriverConn221) Close() error {
	return traceDCClose(odriverConn221.r, odriverConn221.setup)
}
func (odriverConn221 *tdriverConn221) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn221.r, odriverConn221.setup, query)
}
func (odriverConn221 *tdriverConn221) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn221.r, odriverConn221.setup, query, args)
}
func (odriverConn221 *tdriverConn221) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn221.r, odriverConn221.setup, ctx, query, args)
}
func (odriverConn221 *tdriverConn221) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn221.r, odriverConn221.setup, param0)
}
func (odriverConn221 *tdriverConn221) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn221.r, odriverConn221.setup, ctx)
}

func (odriverConn222 *tdriverConn222) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn222.r, odriverConn222.setup)
}
func (odriverConn222 *tdriverConn222) Close() error {
	return traceDCClose(odriverConn222.r, odriverConn222.setup)
}
func (odriverConn222 *tdriverConn222) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn222.r, odriverConn222.setup, query)
}
func (odriverConn222 *tdriverConn222) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn222.r, odriverConn222.setup, query, args)
}
func (odriverConn222 *tdriverConn222) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn222.r, odriverConn222.setup, ctx, query, args)
}
func (odriverConn222 *tdriverConn222) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn222.r, odriverConn222.setup, param0)
}
func (odriverConn222 *tdriverConn222) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn222.r, odriverConn222.setup, query, args)
}

func (odriverConn223 *tdriverConn223) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn223.r, odriverConn223.setup)
}
func (odriverConn223 *tdriverConn223) Close() error {
	return traceDCClose(odriverConn223.r, odriverConn223.setup)
}
func (odriverConn223 *tdriverConn223) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn223.r, odriverConn223.setup, query)
}
func (odriverConn223 *tdriverConn223) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn223.r, odriverConn223.setup, query, args)
}
func (odriverConn223 *tdriverConn223) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn223.r, odriverConn223.setup, ctx, query, args)
}
func (odriverConn223 *tdriverConn223) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn223.r, odriverConn223.setup, param0)
}
func (odriverConn223 *tdriverConn223) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn223.r, odriverConn223.setup, ctx, query, args)
}

func (odriverConn224 *tdriverConn224) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn224.r, odriverConn224.setup)
}
func (odriverConn224 *tdriverConn224) Close() error {
	return traceDCClose(odriverConn224.r, odriverConn224.setup)
}
func (odriverConn224 *tdriverConn224) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn224.r, odriverConn224.setup, query)
}
func (odriverConn224 *tdriverConn224) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn224.r, odriverConn224.setup, query, args)
}
func (odriverConn224 *tdriverConn224) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn224.r, odriverConn224.setup, ctx, query, args)
}
func (odriverConn224 *tdriverConn224) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn224.r, odriverConn224.setup, param0)
}
func (odriverConn224 *tdriverConn224) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn224.r, odriverConn224.setup, ctx)
}

func (odriverConn225 *tdriverConn225) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn225.r, odriverConn225.setup)
}
func (odriverConn225 *tdriverConn225) Close() error {
	return traceDCClose(odriverConn225.r, odriverConn225.setup)
}
func (odriverConn225 *tdriverConn225) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn225.r, odriverConn225.setup, query)
}
func (odriverConn225 *tdriverConn225) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn225.r, odriverConn225.setup, query, args)
}
func (odriverConn225 *tdriverConn225) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn225.r, odriverConn225.setup, ctx, query, args)
}
func (odriverConn225 *tdriverConn225) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn225.r, odriverConn225.setup, ctx)
}
func (odriverConn225 *tdriverConn225) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn225.r, odriverConn225.setup, query, args)
}

func (odriverConn226 *tdriverConn226) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn226.r, odriverConn226.setup)
}
func (odriverConn226 *tdriverConn226) Close() error {
	return traceDCClose(odriverConn226.r, odriverConn226.setup)
}
func (odriverConn226 *tdriverConn226) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn226.r, odriverConn226.setup, query)
}
func (odriverConn226 *tdriverConn226) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn226.r, odriverConn226.setup, query, args)
}
func (odriverConn226 *tdriverConn226) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn226.r, odriverConn226.setup, ctx, query, args)
}
func (odriverConn226 *tdriverConn226) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn226.r, odriverConn226.setup, ctx)
}
func (odriverConn226 *tdriverConn226) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn226.r, odriverConn226.setup, ctx, query, args)
}

func (odriverConn227 *tdriverConn227) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn227.r, odriverConn227.setup)
}
func (odriverConn227 *tdriverConn227) Close() error {
	return traceDCClose(odriverConn227.r, odriverConn227.setup)
}
func (odriverConn227 *tdriverConn227) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn227.r, odriverConn227.setup, query)
}
func (odriverConn227 *tdriverConn227) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn227.r, odriverConn227.setup, query, args)
}
func (odriverConn227 *tdriverConn227) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn227.r, odriverConn227.setup, ctx, query, args)
}
func (odriverConn227 *tdriverConn227) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn227.r, odriverConn227.setup, ctx)
}
func (odriverConn227 *tdriverConn227) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn227.r, odriverConn227.setup, ctx)
}

func (odriverConn228 *tdriverConn228) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn228.r, odriverConn228.setup)
}
func (odriverConn228 *tdriverConn228) Close() error {
	return traceDCClose(odriverConn228.r, odriverConn228.setup)
}
func (odriverConn228 *tdriverConn228) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn228.r, odriverConn228.setup, query)
}
func (odriverConn228 *tdriverConn228) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn228.r, odriverConn228.setup, query, args)
}
func (odriverConn228 *tdriverConn228) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn228.r, odriverConn228.setup, ctx, query, args)
}
func (odriverConn228 *tdriverConn228) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn228.r, odriverConn228.setup, query, args)
}
func (odriverConn228 *tdriverConn228) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn228.r, odriverConn228.setup, ctx, query, args)
}

func (odriverConn229 *tdriverConn229) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn229.r, odriverConn229.setup)
}
func (odriverConn229 *tdriverConn229) Close() error {
	return traceDCClose(odriverConn229.r, odriverConn229.setup)
}
func (odriverConn229 *tdriverConn229) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn229.r, odriverConn229.setup, query)
}
func (odriverConn229 *tdriverConn229) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn229.r, odriverConn229.setup, query, args)
}
func (odriverConn229 *tdriverConn229) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn229.r, odriverConn229.setup, ctx, query, args)
}
func (odriverConn229 *tdriverConn229) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn229.r, odriverConn229.setup, query, args)
}
func (odriverConn229 *tdriverConn229) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn229.r, odriverConn229.setup, ctx)
}

func (odriverConn230 *tdriverConn230) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn230.r, odriverConn230.setup)
}
func (odriverConn230 *tdriverConn230) Close() error {
	return traceDCClose(odriverConn230.r, odriverConn230.setup)
}
func (odriverConn230 *tdriverConn230) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn230.r, odriverConn230.setup, query)
}
func (odriverConn230 *tdriverConn230) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn230.r, odriverConn230.setup, query, args)
}
func (odriverConn230 *tdriverConn230) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn230.r, odriverConn230.setup, ctx, query, args)
}
func (odriverConn230 *tdriverConn230) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn230.r, odriverConn230.setup, ctx, query, args)
}
func (odriverConn230 *tdriverConn230) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn230.r, odriverConn230.setup, ctx)
}

func (odriverConn231 *tdriverConn231) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn231.r, odriverConn231.setup)
}
func (odriverConn231 *tdriverConn231) Close() error {
	return traceDCClose(odriverConn231.r, odriverConn231.setup)
}
func (odriverConn231 *tdriverConn231) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn231.r, odriverConn231.setup, query)
}
func (odriverConn231 *tdriverConn231) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn231.r, odriverConn231.setup, query, args)
}
func (odriverConn231 *tdriverConn231) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn231.r, odriverConn231.setup, param0)
}
func (odriverConn231 *tdriverConn231) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn231.r, odriverConn231.setup, ctx)
}
func (odriverConn231 *tdriverConn231) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn231.r, odriverConn231.setup, query, args)
}

func (odriverConn232 *tdriverConn232) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn232.r, odriverConn232.setup)
}
func (odriverConn232 *tdriverConn232) Close() error {
	return traceDCClose(odriverConn232.r, odriverConn232.setup)
}
func (odriverConn232 *tdriverConn232) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn232.r, odriverConn232.setup, query)
}
func (odriverConn232 *tdriverConn232) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn232.r, odriverConn232.setup, query, args)
}
func (odriverConn232 *tdriverConn232) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn232.r, odriverConn232.setup, param0)
}
func (odriverConn232 *tdriverConn232) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn232.r, odriverConn232.setup, ctx)
}
func (odriverConn232 *tdriverConn232) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn232.r, odriverConn232.setup, ctx, query, args)
}

func (odriverConn233 *tdriverConn233) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn233.r, odriverConn233.setup)
}
func (odriverConn233 *tdriverConn233) Close() error {
	return traceDCClose(odriverConn233.r, odriverConn233.setup)
}
func (odriverConn233 *tdriverConn233) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn233.r, odriverConn233.setup, query)
}
func (odriverConn233 *tdriverConn233) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn233.r, odriverConn233.setup, query, args)
}
func (odriverConn233 *tdriverConn233) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn233.r, odriverConn233.setup, param0)
}
func (odriverConn233 *tdriverConn233) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn233.r, odriverConn233.setup, ctx)
}
func (odriverConn233 *tdriverConn233) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn233.r, odriverConn233.setup, ctx)
}

func (odriverConn234 *tdriverConn234) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn234.r, odriverConn234.setup)
}
func (odriverConn234 *tdriverConn234) Close() error {
	return traceDCClose(odriverConn234.r, odriverConn234.setup)
}
func (odriverConn234 *tdriverConn234) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn234.r, odriverConn234.setup, query)
}
func (odriverConn234 *tdriverConn234) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn234.r, odriverConn234.setup, query, args)
}
func (odriverConn234 *tdriverConn234) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn234.r, odriverConn234.setup, param0)
}
func (odriverConn234 *tdriverConn234) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn234.r, odriverConn234.setup, query, args)
}
func (odriverConn234 *tdriverConn234) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn234.r, odriverConn234.setup, ctx, query, args)
}

func (odriverConn235 *tdriverConn235) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn235.r, odriverConn235.setup)
}
func (odriverConn235 *tdriverConn235) Close() error {
	return traceDCClose(odriverConn235.r, odriverConn235.setup)
}
func (odriverConn235 *tdriverConn235) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn235.r, odriverConn235.setup, query)
}
func (odriverConn235 *tdriverConn235) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn235.r, odriverConn235.setup, query, args)
}
func (odriverConn235 *tdriverConn235) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn235.r, odriverConn235.setup, param0)
}
func (odriverConn235 *tdriverConn235) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn235.r, odriverConn235.setup, query, args)
}
func (odriverConn235 *tdriverConn235) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn235.r, odriverConn235.setup, ctx)
}

func (odriverConn236 *tdriverConn236) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn236.r, odriverConn236.setup)
}
func (odriverConn236 *tdriverConn236) Close() error {
	return traceDCClose(odriverConn236.r, odriverConn236.setup)
}
func (odriverConn236 *tdriverConn236) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn236.r, odriverConn236.setup, query)
}
func (odriverConn236 *tdriverConn236) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn236.r, odriverConn236.setup, query, args)
}
func (odriverConn236 *tdriverConn236) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn236.r, odriverConn236.setup, param0)
}
func (odriverConn236 *tdriverConn236) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn236.r, odriverConn236.setup, ctx, query, args)
}
func (odriverConn236 *tdriverConn236) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn236.r, odriverConn236.setup, ctx)
}

func (odriverConn237 *tdriverConn237) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn237.r, odriverConn237.setup)
}
func (odriverConn237 *tdriverConn237) Close() error {
	return traceDCClose(odriverConn237.r, odriverConn237.setup)
}
func (odriverConn237 *tdriverConn237) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn237.r, odriverConn237.setup, query)
}
func (odriverConn237 *tdriverConn237) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn237.r, odriverConn237.setup, query, args)
}
func (odriverConn237 *tdriverConn237) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn237.r, odriverConn237.setup, ctx)
}
func (odriverConn237 *tdriverConn237) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn237.r, odriverConn237.setup, query, args)
}
func (odriverConn237 *tdriverConn237) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn237.r, odriverConn237.setup, ctx, query, args)
}

func (odriverConn238 *tdriverConn238) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn238.r, odriverConn238.setup)
}
func (odriverConn238 *tdriverConn238) Close() error {
	return traceDCClose(odriverConn238.r, odriverConn238.setup)
}
func (odriverConn238 *tdriverConn238) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn238.r, odriverConn238.setup, query)
}
func (odriverConn238 *tdriverConn238) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn238.r, odriverConn238.setup, query, args)
}
func (odriverConn238 *tdriverConn238) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn238.r, odriverConn238.setup, ctx)
}
func (odriverConn238 *tdriverConn238) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn238.r, odriverConn238.setup, query, args)
}
func (odriverConn238 *tdriverConn238) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn238.r, odriverConn238.setup, ctx)
}

func (odriverConn239 *tdriverConn239) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn239.r, odriverConn239.setup)
}
func (odriverConn239 *tdriverConn239) Close() error {
	return traceDCClose(odriverConn239.r, odriverConn239.setup)
}
func (odriverConn239 *tdriverConn239) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn239.r, odriverConn239.setup, query)
}
func (odriverConn239 *tdriverConn239) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn239.r, odriverConn239.setup, query, args)
}
func (odriverConn239 *tdriverConn239) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn239.r, odriverConn239.setup, ctx)
}
func (odriverConn239 *tdriverConn239) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn239.r, odriverConn239.setup, ctx, query, args)
}
func (odriverConn239 *tdriverConn239) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn239.r, odriverConn239.setup, ctx)
}

func (odriverConn240 *tdriverConn240) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn240.r, odriverConn240.setup)
}
func (odriverConn240 *tdriverConn240) Close() error {
	return traceDCClose(odriverConn240.r, odriverConn240.setup)
}
func (odriverConn240 *tdriverConn240) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn240.r, odriverConn240.setup, query)
}
func (odriverConn240 *tdriverConn240) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn240.r, odriverConn240.setup, query, args)
}
func (odriverConn240 *tdriverConn240) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn240.r, odriverConn240.setup, query, args)
}
func (odriverConn240 *tdriverConn240) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn240.r, odriverConn240.setup, ctx, query, args)
}
func (odriverConn240 *tdriverConn240) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn240.r, odriverConn240.setup, ctx)
}

func (odriverConn241 *tdriverConn241) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn241.r, odriverConn241.setup)
}
func (odriverConn241 *tdriverConn241) Close() error {
	return traceDCClose(odriverConn241.r, odriverConn241.setup)
}
func (odriverConn241 *tdriverConn241) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn241.r, odriverConn241.setup, query)
}
func (odriverConn241 *tdriverConn241) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn241.r, odriverConn241.setup, ctx, query, args)
}
func (odriverConn241 *tdriverConn241) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn241.r, odriverConn241.setup, param0)
}
func (odriverConn241 *tdriverConn241) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn241.r, odriverConn241.setup, ctx)
}
func (odriverConn241 *tdriverConn241) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn241.r, odriverConn241.setup, query, args)
}

func (odriverConn242 *tdriverConn242) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn242.r, odriverConn242.setup)
}
func (odriverConn242 *tdriverConn242) Close() error {
	return traceDCClose(odriverConn242.r, odriverConn242.setup)
}
func (odriverConn242 *tdriverConn242) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn242.r, odriverConn242.setup, query)
}
func (odriverConn242 *tdriverConn242) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn242.r, odriverConn242.setup, ctx, query, args)
}
func (odriverConn242 *tdriverConn242) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn242.r, odriverConn242.setup, param0)
}
func (odriverConn242 *tdriverConn242) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn242.r, odriverConn242.setup, ctx)
}
func (odriverConn242 *tdriverConn242) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn242.r, odriverConn242.setup, ctx, query, args)
}

func (odriverConn243 *tdriverConn243) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn243.r, odriverConn243.setup)
}
func (odriverConn243 *tdriverConn243) Close() error {
	return traceDCClose(odriverConn243.r, odriverConn243.setup)
}
func (odriverConn243 *tdriverConn243) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn243.r, odriverConn243.setup, query)
}
func (odriverConn243 *tdriverConn243) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn243.r, odriverConn243.setup, ctx, query, args)
}
func (odriverConn243 *tdriverConn243) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn243.r, odriverConn243.setup, param0)
}
func (odriverConn243 *tdriverConn243) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn243.r, odriverConn243.setup, ctx)
}
func (odriverConn243 *tdriverConn243) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn243.r, odriverConn243.setup, ctx)
}

func (odriverConn244 *tdriverConn244) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn244.r, odriverConn244.setup)
}
func (odriverConn244 *tdriverConn244) Close() error {
	return traceDCClose(odriverConn244.r, odriverConn244.setup)
}
func (odriverConn244 *tdriverConn244) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn244.r, odriverConn244.setup, query)
}
func (odriverConn244 *tdriverConn244) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn244.r, odriverConn244.setup, ctx, query, args)
}
func (odriverConn244 *tdriverConn244) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn244.r, odriverConn244.setup, param0)
}
func (odriverConn244 *tdriverConn244) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn244.r, odriverConn244.setup, query, args)
}
func (odriverConn244 *tdriverConn244) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn244.r, odriverConn244.setup, ctx, query, args)
}

func (odriverConn245 *tdriverConn245) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn245.r, odriverConn245.setup)
}
func (odriverConn245 *tdriverConn245) Close() error {
	return traceDCClose(odriverConn245.r, odriverConn245.setup)
}
func (odriverConn245 *tdriverConn245) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn245.r, odriverConn245.setup, query)
}
func (odriverConn245 *tdriverConn245) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn245.r, odriverConn245.setup, ctx, query, args)
}
func (odriverConn245 *tdriverConn245) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn245.r, odriverConn245.setup, param0)
}
func (odriverConn245 *tdriverConn245) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn245.r, odriverConn245.setup, query, args)
}
func (odriverConn245 *tdriverConn245) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn245.r, odriverConn245.setup, ctx)
}

func (odriverConn246 *tdriverConn246) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn246.r, odriverConn246.setup)
}
func (odriverConn246 *tdriverConn246) Close() error {
	return traceDCClose(odriverConn246.r, odriverConn246.setup)
}
func (odriverConn246 *tdriverConn246) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn246.r, odriverConn246.setup, query)
}
func (odriverConn246 *tdriverConn246) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn246.r, odriverConn246.setup, ctx, query, args)
}
func (odriverConn246 *tdriverConn246) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn246.r, odriverConn246.setup, param0)
}
func (odriverConn246 *tdriverConn246) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn246.r, odriverConn246.setup, ctx, query, args)
}
func (odriverConn246 *tdriverConn246) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn246.r, odriverConn246.setup, ctx)
}

func (odriverConn247 *tdriverConn247) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn247.r, odriverConn247.setup)
}
func (odriverConn247 *tdriverConn247) Close() error {
	return traceDCClose(odriverConn247.r, odriverConn247.setup)
}
func (odriverConn247 *tdriverConn247) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn247.r, odriverConn247.setup, query)
}
func (odriverConn247 *tdriverConn247) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn247.r, odriverConn247.setup, ctx, query, args)
}
func (odriverConn247 *tdriverConn247) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn247.r, odriverConn247.setup, ctx)
}
func (odriverConn247 *tdriverConn247) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn247.r, odriverConn247.setup, query, args)
}
func (odriverConn247 *tdriverConn247) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn247.r, odriverConn247.setup, ctx, query, args)
}

func (odriverConn248 *tdriverConn248) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn248.r, odriverConn248.setup)
}
func (odriverConn248 *tdriverConn248) Close() error {
	return traceDCClose(odriverConn248.r, odriverConn248.setup)
}
func (odriverConn248 *tdriverConn248) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn248.r, odriverConn248.setup, query)
}
func (odriverConn248 *tdriverConn248) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn248.r, odriverConn248.setup, ctx, query, args)
}
func (odriverConn248 *tdriverConn248) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn248.r, odriverConn248.setup, ctx)
}
func (odriverConn248 *tdriverConn248) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn248.r, odriverConn248.setup, query, args)
}
func (odriverConn248 *tdriverConn248) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn248.r, odriverConn248.setup, ctx)
}

func (odriverConn249 *tdriverConn249) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn249.r, odriverConn249.setup)
}
func (odriverConn249 *tdriverConn249) Close() error {
	return traceDCClose(odriverConn249.r, odriverConn249.setup)
}
func (odriverConn249 *tdriverConn249) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn249.r, odriverConn249.setup, query)
}
func (odriverConn249 *tdriverConn249) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn249.r, odriverConn249.setup, ctx, query, args)
}
func (odriverConn249 *tdriverConn249) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn249.r, odriverConn249.setup, ctx)
}
func (odriverConn249 *tdriverConn249) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn249.r, odriverConn249.setup, ctx, query, args)
}
func (odriverConn249 *tdriverConn249) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn249.r, odriverConn249.setup, ctx)
}

func (odriverConn250 *tdriverConn250) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn250.r, odriverConn250.setup)
}
func (odriverConn250 *tdriverConn250) Close() error {
	return traceDCClose(odriverConn250.r, odriverConn250.setup)
}
func (odriverConn250 *tdriverConn250) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn250.r, odriverConn250.setup, query)
}
func (odriverConn250 *tdriverConn250) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn250.r, odriverConn250.setup, ctx, query, args)
}
func (odriverConn250 *tdriverConn250) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn250.r, odriverConn250.setup, query, args)
}
func (odriverConn250 *tdriverConn250) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn250.r, odriverConn250.setup, ctx, query, args)
}
func (odriverConn250 *tdriverConn250) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn250.r, odriverConn250.setup, ctx)
}

func (odriverConn251 *tdriverConn251) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn251.r, odriverConn251.setup)
}
func (odriverConn251 *tdriverConn251) Close() error {
	return traceDCClose(odriverConn251.r, odriverConn251.setup)
}
func (odriverConn251 *tdriverConn251) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn251.r, odriverConn251.setup, query)
}
func (odriverConn251 *tdriverConn251) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn251.r, odriverConn251.setup, param0)
}
func (odriverConn251 *tdriverConn251) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn251.r, odriverConn251.setup, ctx)
}
func (odriverConn251 *tdriverConn251) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn251.r, odriverConn251.setup, query, args)
}
func (odriverConn251 *tdriverConn251) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn251.r, odriverConn251.setup, ctx, query, args)
}

func (odriverConn252 *tdriverConn252) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn252.r, odriverConn252.setup)
}
func (odriverConn252 *tdriverConn252) Close() error {
	return traceDCClose(odriverConn252.r, odriverConn252.setup)
}
func (odriverConn252 *tdriverConn252) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn252.r, odriverConn252.setup, query)
}
func (odriverConn252 *tdriverConn252) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn252.r, odriverConn252.setup, param0)
}
func (odriverConn252 *tdriverConn252) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn252.r, odriverConn252.setup, ctx)
}
func (odriverConn252 *tdriverConn252) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn252.r, odriverConn252.setup, query, args)
}
func (odriverConn252 *tdriverConn252) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn252.r, odriverConn252.setup, ctx)
}

func (odriverConn253 *tdriverConn253) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn253.r, odriverConn253.setup)
}
func (odriverConn253 *tdriverConn253) Close() error {
	return traceDCClose(odriverConn253.r, odriverConn253.setup)
}
func (odriverConn253 *tdriverConn253) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn253.r, odriverConn253.setup, query)
}
func (odriverConn253 *tdriverConn253) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn253.r, odriverConn253.setup, param0)
}
func (odriverConn253 *tdriverConn253) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn253.r, odriverConn253.setup, ctx)
}
func (odriverConn253 *tdriverConn253) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn253.r, odriverConn253.setup, ctx, query, args)
}
func (odriverConn253 *tdriverConn253) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn253.r, odriverConn253.setup, ctx)
}

func (odriverConn254 *tdriverConn254) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn254.r, odriverConn254.setup)
}
func (odriverConn254 *tdriverConn254) Close() error {
	return traceDCClose(odriverConn254.r, odriverConn254.setup)
}
func (odriverConn254 *tdriverConn254) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn254.r, odriverConn254.setup, query)
}
func (odriverConn254 *tdriverConn254) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn254.r, odriverConn254.setup, param0)
}
func (odriverConn254 *tdriverConn254) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn254.r, odriverConn254.setup, query, args)
}
func (odriverConn254 *tdriverConn254) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn254.r, odriverConn254.setup, ctx, query, args)
}
func (odriverConn254 *tdriverConn254) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn254.r, odriverConn254.setup, ctx)
}

func (odriverConn255 *tdriverConn255) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn255.r, odriverConn255.setup)
}
func (odriverConn255 *tdriverConn255) Close() error {
	return traceDCClose(odriverConn255.r, odriverConn255.setup)
}
func (odriverConn255 *tdriverConn255) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn255.r, odriverConn255.setup, query)
}
func (odriverConn255 *tdriverConn255) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn255.r, odriverConn255.setup, ctx)
}
func (odriverConn255 *tdriverConn255) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn255.r, odriverConn255.setup, query, args)
}
func (odriverConn255 *tdriverConn255) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn255.r, odriverConn255.setup, ctx, query, args)
}
func (odriverConn255 *tdriverConn255) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn255.r, odriverConn255.setup, ctx)
}

func (odriverConn256 *tdriverConn256) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn256.r, odriverConn256.setup)
}
func (odriverConn256 *tdriverConn256) Close() error {
	return traceDCClose(odriverConn256.r, odriverConn256.setup)
}
func (odriverConn256 *tdriverConn256) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn256.r, odriverConn256.setup, query)
}
func (odriverConn256 *tdriverConn256) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn256.r, odriverConn256.setup, ctx, opts)
}
func (odriverConn256 *tdriverConn256) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn256.r, odriverConn256.setup, ctx, query)
}
func (odriverConn256 *tdriverConn256) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn256.r, odriverConn256.setup, query, args)
}
func (odriverConn256 *tdriverConn256) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn256.r, odriverConn256.setup, ctx, query, args)
}
func (odriverConn256 *tdriverConn256) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn256.r, odriverConn256.setup, param0)
}

func (odriverConn257 *tdriverConn257) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn257.r, odriverConn257.setup)
}
func (odriverConn257 *tdriverConn257) Close() error {
	return traceDCClose(odriverConn257.r, odriverConn257.setup)
}
func (odriverConn257 *tdriverConn257) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn257.r, odriverConn257.setup, query)
}
func (odriverConn257 *tdriverConn257) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn257.r, odriverConn257.setup, ctx, opts)
}
func (odriverConn257 *tdriverConn257) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn257.r, odriverConn257.setup, ctx, query)
}
func (odriverConn257 *tdriverConn257) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn257.r, odriverConn257.setup, query, args)
}
func (odriverConn257 *tdriverConn257) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn257.r, odriverConn257.setup, ctx, query, args)
}
func (odriverConn257 *tdriverConn257) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn257.r, odriverConn257.setup, ctx)
}

func (odriverConn258 *tdriverConn258) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn258.r, odriverConn258.setup)
}
func (odriverConn258 *tdriverConn258) Close() error {
	return traceDCClose(odriverConn258.r, odriverConn258.setup)
}
func (odriverConn258 *tdriverConn258) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn258.r, odriverConn258.setup, query)
}
func (odriverConn258 *tdriverConn258) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn258.r, odriverConn258.setup, ctx, opts)
}
func (odriverConn258 *tdriverConn258) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn258.r, odriverConn258.setup, ctx, query)
}
func (odriverConn258 *tdriverConn258) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn258.r, odriverConn258.setup, query, args)
}
func (odriverConn258 *tdriverConn258) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn258.r, odriverConn258.setup, ctx, query, args)
}
func (odriverConn258 *tdriverConn258) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn258.r, odriverConn258.setup, query, args)
}

func (odriverConn259 *tdriverConn259) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn259.r, odriverConn259.setup)
}
func (odriverConn259 *tdriverConn259) Close() error {
	return traceDCClose(odriverConn259.r, odriverConn259.setup)
}
func (odriverConn259 *tdriverConn259) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn259.r, odriverConn259.setup, query)
}
func (odriverConn259 *tdriverConn259) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn259.r, odriverConn259.setup, ctx, opts)
}
func (odriverConn259 *tdriverConn259) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn259.r, odriverConn259.setup, ctx, query)
}
func (odriverConn259 *tdriverConn259) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn259.r, odriverConn259.setup, query, args)
}
func (odriverConn259 *tdriverConn259) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn259.r, odriverConn259.setup, ctx, query, args)
}
func (odriverConn259 *tdriverConn259) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn259.r, odriverConn259.setup, ctx, query, args)
}

func (odriverConn260 *tdriverConn260) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn260.r, odriverConn260.setup)
}
func (odriverConn260 *tdriverConn260) Close() error {
	return traceDCClose(odriverConn260.r, odriverConn260.setup)
}
func (odriverConn260 *tdriverConn260) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn260.r, odriverConn260.setup, query)
}
func (odriverConn260 *tdriverConn260) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn260.r, odriverConn260.setup, ctx, opts)
}
func (odriverConn260 *tdriverConn260) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn260.r, odriverConn260.setup, ctx, query)
}
func (odriverConn260 *tdriverConn260) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn260.r, odriverConn260.setup, query, args)
}
func (odriverConn260 *tdriverConn260) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn260.r, odriverConn260.setup, ctx, query, args)
}
func (odriverConn260 *tdriverConn260) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn260.r, odriverConn260.setup, ctx)
}

func (odriverConn261 *tdriverConn261) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn261.r, odriverConn261.setup)
}
func (odriverConn261 *tdriverConn261) Close() error {
	return traceDCClose(odriverConn261.r, odriverConn261.setup)
}
func (odriverConn261 *tdriverConn261) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn261.r, odriverConn261.setup, query)
}
func (odriverConn261 *tdriverConn261) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn261.r, odriverConn261.setup, ctx, opts)
}
func (odriverConn261 *tdriverConn261) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn261.r, odriverConn261.setup, ctx, query)
}
func (odriverConn261 *tdriverConn261) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn261.r, odriverConn261.setup, query, args)
}
func (odriverConn261 *tdriverConn261) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn261.r, odriverConn261.setup, param0)
}
func (odriverConn261 *tdriverConn261) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn261.r, odriverConn261.setup, ctx)
}

func (odriverConn262 *tdriverConn262) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn262.r, odriverConn262.setup)
}
func (odriverConn262 *tdriverConn262) Close() error {
	return traceDCClose(odriverConn262.r, odriverConn262.setup)
}
func (odriverConn262 *tdriverConn262) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn262.r, odriverConn262.setup, query)
}
func (odriverConn262 *tdriverConn262) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn262.r, odriverConn262.setup, ctx, opts)
}
func (odriverConn262 *tdriverConn262) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn262.r, odriverConn262.setup, ctx, query)
}
func (odriverConn262 *tdriverConn262) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn262.r, odriverConn262.setup, query, args)
}
func (odriverConn262 *tdriverConn262) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn262.r, odriverConn262.setup, param0)
}
func (odriverConn262 *tdriverConn262) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn262.r, odriverConn262.setup, query, args)
}

func (odriverConn263 *tdriverConn263) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn263.r, odriverConn263.setup)
}
func (odriverConn263 *tdriverConn263) Close() error {
	return traceDCClose(odriverConn263.r, odriverConn263.setup)
}
func (odriverConn263 *tdriverConn263) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn263.r, odriverConn263.setup, query)
}
func (odriverConn263 *tdriverConn263) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn263.r, odriverConn263.setup, ctx, opts)
}
func (odriverConn263 *tdriverConn263) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn263.r, odriverConn263.setup, ctx, query)
}
func (odriverConn263 *tdriverConn263) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn263.r, odriverConn263.setup, query, args)
}
func (odriverConn263 *tdriverConn263) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn263.r, odriverConn263.setup, param0)
}
func (odriverConn263 *tdriverConn263) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn263.r, odriverConn263.setup, ctx, query, args)
}

func (odriverConn264 *tdriverConn264) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn264.r, odriverConn264.setup)
}
func (odriverConn264 *tdriverConn264) Close() error {
	return traceDCClose(odriverConn264.r, odriverConn264.setup)
}
func (odriverConn264 *tdriverConn264) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn264.r, odriverConn264.setup, query)
}
func (odriverConn264 *tdriverConn264) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn264.r, odriverConn264.setup, ctx, opts)
}
func (odriverConn264 *tdriverConn264) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn264.r, odriverConn264.setup, ctx, query)
}
func (odriverConn264 *tdriverConn264) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn264.r, odriverConn264.setup, query, args)
}
func (odriverConn264 *tdriverConn264) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn264.r, odriverConn264.setup, param0)
}
func (odriverConn264 *tdriverConn264) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn264.r, odriverConn264.setup, ctx)
}

func (odriverConn265 *tdriverConn265) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn265.r, odriverConn265.setup)
}
func (odriverConn265 *tdriverConn265) Close() error {
	return traceDCClose(odriverConn265.r, odriverConn265.setup)
}
func (odriverConn265 *tdriverConn265) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn265.r, odriverConn265.setup, query)
}
func (odriverConn265 *tdriverConn265) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn265.r, odriverConn265.setup, ctx, opts)
}
func (odriverConn265 *tdriverConn265) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn265.r, odriverConn265.setup, ctx, query)
}
func (odriverConn265 *tdriverConn265) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn265.r, odriverConn265.setup, query, args)
}
func (odriverConn265 *tdriverConn265) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn265.r, odriverConn265.setup, ctx)
}
func (odriverConn265 *tdriverConn265) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn265.r, odriverConn265.setup, query, args)
}

func (odriverConn266 *tdriverConn266) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn266.r, odriverConn266.setup)
}
func (odriverConn266 *tdriverConn266) Close() error {
	return traceDCClose(odriverConn266.r, odriverConn266.setup)
}
func (odriverConn266 *tdriverConn266) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn266.r, odriverConn266.setup, query)
}
func (odriverConn266 *tdriverConn266) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn266.r, odriverConn266.setup, ctx, opts)
}
func (odriverConn266 *tdriverConn266) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn266.r, odriverConn266.setup, ctx, query)
}
func (odriverConn266 *tdriverConn266) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn266.r, odriverConn266.setup, query, args)
}
func (odriverConn266 *tdriverConn266) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn266.r, odriverConn266.setup, ctx)
}
func (odriverConn266 *tdriverConn266) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn266.r, odriverConn266.setup, ctx, query, args)
}

func (odriverConn267 *tdriverConn267) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn267.r, odriverConn267.setup)
}
func (odriverConn267 *tdriverConn267) Close() error {
	return traceDCClose(odriverConn267.r, odriverConn267.setup)
}
func (odriverConn267 *tdriverConn267) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn267.r, odriverConn267.setup, query)
}
func (odriverConn267 *tdriverConn267) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn267.r, odriverConn267.setup, ctx, opts)
}
func (odriverConn267 *tdriverConn267) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn267.r, odriverConn267.setup, ctx, query)
}
func (odriverConn267 *tdriverConn267) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn267.r, odriverConn267.setup, query, args)
}
func (odriverConn267 *tdriverConn267) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn267.r, odriverConn267.setup, ctx)
}
func (odriverConn267 *tdriverConn267) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn267.r, odriverConn267.setup, ctx)
}

func (odriverConn268 *tdriverConn268) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn268.r, odriverConn268.setup)
}
func (odriverConn268 *tdriverConn268) Close() error {
	return traceDCClose(odriverConn268.r, odriverConn268.setup)
}
func (odriverConn268 *tdriverConn268) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn268.r, odriverConn268.setup, query)
}
func (odriverConn268 *tdriverConn268) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn268.r, odriverConn268.setup, ctx, opts)
}
func (odriverConn268 *tdriverConn268) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn268.r, odriverConn268.setup, ctx, query)
}
func (odriverConn268 *tdriverConn268) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn268.r, odriverConn268.setup, query, args)
}
func (odriverConn268 *tdriverConn268) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn268.r, odriverConn268.setup, query, args)
}
func (odriverConn268 *tdriverConn268) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn268.r, odriverConn268.setup, ctx, query, args)
}

func (odriverConn269 *tdriverConn269) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn269.r, odriverConn269.setup)
}
func (odriverConn269 *tdriverConn269) Close() error {
	return traceDCClose(odriverConn269.r, odriverConn269.setup)
}
func (odriverConn269 *tdriverConn269) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn269.r, odriverConn269.setup, query)
}
func (odriverConn269 *tdriverConn269) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn269.r, odriverConn269.setup, ctx, opts)
}
func (odriverConn269 *tdriverConn269) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn269.r, odriverConn269.setup, ctx, query)
}
func (odriverConn269 *tdriverConn269) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn269.r, odriverConn269.setup, query, args)
}
func (odriverConn269 *tdriverConn269) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn269.r, odriverConn269.setup, query, args)
}
func (odriverConn269 *tdriverConn269) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn269.r, odriverConn269.setup, ctx)
}

func (odriverConn270 *tdriverConn270) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn270.r, odriverConn270.setup)
}
func (odriverConn270 *tdriverConn270) Close() error {
	return traceDCClose(odriverConn270.r, odriverConn270.setup)
}
func (odriverConn270 *tdriverConn270) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn270.r, odriverConn270.setup, query)
}
func (odriverConn270 *tdriverConn270) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn270.r, odriverConn270.setup, ctx, opts)
}
func (odriverConn270 *tdriverConn270) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn270.r, odriverConn270.setup, ctx, query)
}
func (odriverConn270 *tdriverConn270) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn270.r, odriverConn270.setup, query, args)
}
func (odriverConn270 *tdriverConn270) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn270.r, odriverConn270.setup, ctx, query, args)
}
func (odriverConn270 *tdriverConn270) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn270.r, odriverConn270.setup, ctx)
}

func (odriverConn271 *tdriverConn271) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn271.r, odriverConn271.setup)
}
func (odriverConn271 *tdriverConn271) Close() error {
	return traceDCClose(odriverConn271.r, odriverConn271.setup)
}
func (odriverConn271 *tdriverConn271) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn271.r, odriverConn271.setup, query)
}
func (odriverConn271 *tdriverConn271) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn271.r, odriverConn271.setup, ctx, opts)
}
func (odriverConn271 *tdriverConn271) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn271.r, odriverConn271.setup, ctx, query)
}
func (odriverConn271 *tdriverConn271) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn271.r, odriverConn271.setup, ctx, query, args)
}
func (odriverConn271 *tdriverConn271) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn271.r, odriverConn271.setup, param0)
}
func (odriverConn271 *tdriverConn271) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn271.r, odriverConn271.setup, ctx)
}

func (odriverConn272 *tdriverConn272) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn272.r, odriverConn272.setup)
}
func (odriverConn272 *tdriverConn272) Close() error {
	return traceDCClose(odriverConn272.r, odriverConn272.setup)
}
func (odriverConn272 *tdriverConn272) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn272.r, odriverConn272.setup, query)
}
func (odriverConn272 *tdriverConn272) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn272.r, odriverConn272.setup, ctx, opts)
}
func (odriverConn272 *tdriverConn272) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn272.r, odriverConn272.setup, ctx, query)
}
func (odriverConn272 *tdriverConn272) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn272.r, odriverConn272.setup, ctx, query, args)
}
func (odriverConn272 *tdriverConn272) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn272.r, odriverConn272.setup, param0)
}
func (odriverConn272 *tdriverConn272) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn272.r, odriverConn272.setup, query, args)
}

func (odriverConn273 *tdriverConn273) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn273.r, odriverConn273.setup)
}
func (odriverConn273 *tdriverConn273) Close() error {
	return traceDCClose(odriverConn273.r, odriverConn273.setup)
}
func (odriverConn273 *tdriverConn273) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn273.r, odriverConn273.setup, query)
}
func (odriverConn273 *tdriverConn273) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn273.r, odriverConn273.setup, ctx, opts)
}
func (odriverConn273 *tdriverConn273) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn273.r, odriverConn273.setup, ctx, query)
}
func (odriverConn273 *tdriverConn273) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn273.r, odriverConn273.setup, ctx, query, args)
}
func (odriverConn273 *tdriverConn273) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn273.r, odriverConn273.setup, param0)
}
func (odriverConn273 *tdriverConn273) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn273.r, odriverConn273.setup, ctx, query, args)
}

func (odriverConn274 *tdriverConn274) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn274.r, odriverConn274.setup)
}
func (odriverConn274 *tdriverConn274) Close() error {
	return traceDCClose(odriverConn274.r, odriverConn274.setup)
}
func (odriverConn274 *tdriverConn274) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn274.r, odriverConn274.setup, query)
}
func (odriverConn274 *tdriverConn274) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn274.r, odriverConn274.setup, ctx, opts)
}
func (odriverConn274 *tdriverConn274) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn274.r, odriverConn274.setup, ctx, query)
}
func (odriverConn274 *tdriverConn274) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn274.r, odriverConn274.setup, ctx, query, args)
}
func (odriverConn274 *tdriverConn274) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn274.r, odriverConn274.setup, param0)
}
func (odriverConn274 *tdriverConn274) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn274.r, odriverConn274.setup, ctx)
}

func (odriverConn275 *tdriverConn275) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn275.r, odriverConn275.setup)
}
func (odriverConn275 *tdriverConn275) Close() error {
	return traceDCClose(odriverConn275.r, odriverConn275.setup)
}
func (odriverConn275 *tdriverConn275) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn275.r, odriverConn275.setup, query)
}
func (odriverConn275 *tdriverConn275) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn275.r, odriverConn275.setup, ctx, opts)
}
func (odriverConn275 *tdriverConn275) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn275.r, odriverConn275.setup, ctx, query)
}
func (odriverConn275 *tdriverConn275) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn275.r, odriverConn275.setup, ctx, query, args)
}
func (odriverConn275 *tdriverConn275) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn275.r, odriverConn275.setup, ctx)
}
func (odriverConn275 *tdriverConn275) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn275.r, odriverConn275.setup, query, args)
}

func (odriverConn276 *tdriverConn276) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn276.r, odriverConn276.setup)
}
func (odriverConn276 *tdriverConn276) Close() error {
	return traceDCClose(odriverConn276.r, odriverConn276.setup)
}
func (odriverConn276 *tdriverConn276) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn276.r, odriverConn276.setup, query)
}
func (odriverConn276 *tdriverConn276) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn276.r, odriverConn276.setup, ctx, opts)
}
func (odriverConn276 *tdriverConn276) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn276.r, odriverConn276.setup, ctx, query)
}
func (odriverConn276 *tdriverConn276) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn276.r, odriverConn276.setup, ctx, query, args)
}
func (odriverConn276 *tdriverConn276) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn276.r, odriverConn276.setup, ctx)
}
func (odriverConn276 *tdriverConn276) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn276.r, odriverConn276.setup, ctx, query, args)
}

func (odriverConn277 *tdriverConn277) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn277.r, odriverConn277.setup)
}
func (odriverConn277 *tdriverConn277) Close() error {
	return traceDCClose(odriverConn277.r, odriverConn277.setup)
}
func (odriverConn277 *tdriverConn277) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn277.r, odriverConn277.setup, query)
}
func (odriverConn277 *tdriverConn277) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn277.r, odriverConn277.setup, ctx, opts)
}
func (odriverConn277 *tdriverConn277) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn277.r, odriverConn277.setup, ctx, query)
}
func (odriverConn277 *tdriverConn277) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn277.r, odriverConn277.setup, ctx, query, args)
}
func (odriverConn277 *tdriverConn277) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn277.r, odriverConn277.setup, ctx)
}
func (odriverConn277 *tdriverConn277) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn277.r, odriverConn277.setup, ctx)
}

func (odriverConn278 *tdriverConn278) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn278.r, odriverConn278.setup)
}
func (odriverConn278 *tdriverConn278) Close() error {
	return traceDCClose(odriverConn278.r, odriverConn278.setup)
}
func (odriverConn278 *tdriverConn278) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn278.r, odriverConn278.setup, query)
}
func (odriverConn278 *tdriverConn278) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn278.r, odriverConn278.setup, ctx, opts)
}
func (odriverConn278 *tdriverConn278) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn278.r, odriverConn278.setup, ctx, query)
}
func (odriverConn278 *tdriverConn278) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn278.r, odriverConn278.setup, ctx, query, args)
}
func (odriverConn278 *tdriverConn278) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn278.r, odriverConn278.setup, query, args)
}
func (odriverConn278 *tdriverConn278) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn278.r, odriverConn278.setup, ctx, query, args)
}

func (odriverConn279 *tdriverConn279) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn279.r, odriverConn279.setup)
}
func (odriverConn279 *tdriverConn279) Close() error {
	return traceDCClose(odriverConn279.r, odriverConn279.setup)
}
func (odriverConn279 *tdriverConn279) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn279.r, odriverConn279.setup, query)
}
func (odriverConn279 *tdriverConn279) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn279.r, odriverConn279.setup, ctx, opts)
}
func (odriverConn279 *tdriverConn279) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn279.r, odriverConn279.setup, ctx, query)
}
func (odriverConn279 *tdriverConn279) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn279.r, odriverConn279.setup, ctx, query, args)
}
func (odriverConn279 *tdriverConn279) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn279.r, odriverConn279.setup, query, args)
}
func (odriverConn279 *tdriverConn279) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn279.r, odriverConn279.setup, ctx)
}

func (odriverConn280 *tdriverConn280) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn280.r, odriverConn280.setup)
}
func (odriverConn280 *tdriverConn280) Close() error {
	return traceDCClose(odriverConn280.r, odriverConn280.setup)
}
func (odriverConn280 *tdriverConn280) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn280.r, odriverConn280.setup, query)
}
func (odriverConn280 *tdriverConn280) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn280.r, odriverConn280.setup, ctx, opts)
}
func (odriverConn280 *tdriverConn280) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn280.r, odriverConn280.setup, ctx, query)
}
func (odriverConn280 *tdriverConn280) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn280.r, odriverConn280.setup, ctx, query, args)
}
func (odriverConn280 *tdriverConn280) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn280.r, odriverConn280.setup, ctx, query, args)
}
func (odriverConn280 *tdriverConn280) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn280.r, odriverConn280.setup, ctx)
}

func (odriverConn281 *tdriverConn281) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn281.r, odriverConn281.setup)
}
func (odriverConn281 *tdriverConn281) Close() error {
	return traceDCClose(odriverConn281.r, odriverConn281.setup)
}
func (odriverConn281 *tdriverConn281) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn281.r, odriverConn281.setup, query)
}
func (odriverConn281 *tdriverConn281) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn281.r, odriverConn281.setup, ctx, opts)
}
func (odriverConn281 *tdriverConn281) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn281.r, odriverConn281.setup, ctx, query)
}
func (odriverConn281 *tdriverConn281) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn281.r, odriverConn281.setup, param0)
}
func (odriverConn281 *tdriverConn281) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn281.r, odriverConn281.setup, ctx)
}
func (odriverConn281 *tdriverConn281) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn281.r, odriverConn281.setup, query, args)
}

func (odriverConn282 *tdriverConn282) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn282.r, odriverConn282.setup)
}
func (odriverConn282 *tdriverConn282) Close() error {
	return traceDCClose(odriverConn282.r, odriverConn282.setup)
}
func (odriverConn282 *tdriverConn282) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn282.r, odriverConn282.setup, query)
}
func (odriverConn282 *tdriverConn282) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn282.r, odriverConn282.setup, ctx, opts)
}
func (odriverConn282 *tdriverConn282) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn282.r, odriverConn282.setup, ctx, query)
}
func (odriverConn282 *tdriverConn282) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn282.r, odriverConn282.setup, param0)
}
func (odriverConn282 *tdriverConn282) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn282.r, odriverConn282.setup, ctx)
}
func (odriverConn282 *tdriverConn282) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn282.r, odriverConn282.setup, ctx, query, args)
}

func (odriverConn283 *tdriverConn283) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn283.r, odriverConn283.setup)
}
func (odriverConn283 *tdriverConn283) Close() error {
	return traceDCClose(odriverConn283.r, odriverConn283.setup)
}
func (odriverConn283 *tdriverConn283) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn283.r, odriverConn283.setup, query)
}
func (odriverConn283 *tdriverConn283) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn283.r, odriverConn283.setup, ctx, opts)
}
func (odriverConn283 *tdriverConn283) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn283.r, odriverConn283.setup, ctx, query)
}
func (odriverConn283 *tdriverConn283) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn283.r, odriverConn283.setup, param0)
}
func (odriverConn283 *tdriverConn283) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn283.r, odriverConn283.setup, ctx)
}
func (odriverConn283 *tdriverConn283) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn283.r, odriverConn283.setup, ctx)
}

func (odriverConn284 *tdriverConn284) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn284.r, odriverConn284.setup)
}
func (odriverConn284 *tdriverConn284) Close() error {
	return traceDCClose(odriverConn284.r, odriverConn284.setup)
}
func (odriverConn284 *tdriverConn284) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn284.r, odriverConn284.setup, query)
}
func (odriverConn284 *tdriverConn284) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn284.r, odriverConn284.setup, ctx, opts)
}
func (odriverConn284 *tdriverConn284) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn284.r, odriverConn284.setup, ctx, query)
}
func (odriverConn284 *tdriverConn284) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn284.r, odriverConn284.setup, param0)
}
func (odriverConn284 *tdriverConn284) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn284.r, odriverConn284.setup, query, args)
}
func (odriverConn284 *tdriverConn284) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn284.r, odriverConn284.setup, ctx, query, args)
}

func (odriverConn285 *tdriverConn285) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn285.r, odriverConn285.setup)
}
func (odriverConn285 *tdriverConn285) Close() error {
	return traceDCClose(odriverConn285.r, odriverConn285.setup)
}
func (odriverConn285 *tdriverConn285) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn285.r, odriverConn285.setup, query)
}
func (odriverConn285 *tdriverConn285) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn285.r, odriverConn285.setup, ctx, opts)
}
func (odriverConn285 *tdriverConn285) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn285.r, odriverConn285.setup, ctx, query)
}
func (odriverConn285 *tdriverConn285) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn285.r, odriverConn285.setup, param0)
}
func (odriverConn285 *tdriverConn285) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn285.r, odriverConn285.setup, query, args)
}
func (odriverConn285 *tdriverConn285) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn285.r, odriverConn285.setup, ctx)
}

func (odriverConn286 *tdriverConn286) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn286.r, odriverConn286.setup)
}
func (odriverConn286 *tdriverConn286) Close() error {
	return traceDCClose(odriverConn286.r, odriverConn286.setup)
}
func (odriverConn286 *tdriverConn286) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn286.r, odriverConn286.setup, query)
}
func (odriverConn286 *tdriverConn286) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn286.r, odriverConn286.setup, ctx, opts)
}
func (odriverConn286 *tdriverConn286) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn286.r, odriverConn286.setup, ctx, query)
}
func (odriverConn286 *tdriverConn286) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn286.r, odriverConn286.setup, param0)
}
func (odriverConn286 *tdriverConn286) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn286.r, odriverConn286.setup, ctx, query, args)
}
func (odriverConn286 *tdriverConn286) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn286.r, odriverConn286.setup, ctx)
}

func (odriverConn287 *tdriverConn287) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn287.r, odriverConn287.setup)
}
func (odriverConn287 *tdriverConn287) Close() error {
	return traceDCClose(odriverConn287.r, odriverConn287.setup)
}
func (odriverConn287 *tdriverConn287) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn287.r, odriverConn287.setup, query)
}
func (odriverConn287 *tdriverConn287) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn287.r, odriverConn287.setup, ctx, opts)
}
func (odriverConn287 *tdriverConn287) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn287.r, odriverConn287.setup, ctx, query)
}
func (odriverConn287 *tdriverConn287) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn287.r, odriverConn287.setup, ctx)
}
func (odriverConn287 *tdriverConn287) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn287.r, odriverConn287.setup, query, args)
}
func (odriverConn287 *tdriverConn287) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn287.r, odriverConn287.setup, ctx, query, args)
}

func (odriverConn288 *tdriverConn288) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn288.r, odriverConn288.setup)
}
func (odriverConn288 *tdriverConn288) Close() error {
	return traceDCClose(odriverConn288.r, odriverConn288.setup)
}
func (odriverConn288 *tdriverConn288) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn288.r, odriverConn288.setup, query)
}
func (odriverConn288 *tdriverConn288) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn288.r, odriverConn288.setup, ctx, opts)
}
func (odriverConn288 *tdriverConn288) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn288.r, odriverConn288.setup, ctx, query)
}
func (odriverConn288 *tdriverConn288) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn288.r, odriverConn288.setup, ctx)
}
func (odriverConn288 *tdriverConn288) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn288.r, odriverConn288.setup, query, args)
}
func (odriverConn288 *tdriverConn288) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn288.r, odriverConn288.setup, ctx)
}

func (odriverConn289 *tdriverConn289) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn289.r, odriverConn289.setup)
}
func (odriverConn289 *tdriverConn289) Close() error {
	return traceDCClose(odriverConn289.r, odriverConn289.setup)
}
func (odriverConn289 *tdriverConn289) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn289.r, odriverConn289.setup, query)
}
func (odriverConn289 *tdriverConn289) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn289.r, odriverConn289.setup, ctx, opts)
}
func (odriverConn289 *tdriverConn289) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn289.r, odriverConn289.setup, ctx, query)
}
func (odriverConn289 *tdriverConn289) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn289.r, odriverConn289.setup, ctx)
}
func (odriverConn289 *tdriverConn289) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn289.r, odriverConn289.setup, ctx, query, args)
}
func (odriverConn289 *tdriverConn289) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn289.r, odriverConn289.setup, ctx)
}

func (odriverConn290 *tdriverConn290) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn290.r, odriverConn290.setup)
}
func (odriverConn290 *tdriverConn290) Close() error {
	return traceDCClose(odriverConn290.r, odriverConn290.setup)
}
func (odriverConn290 *tdriverConn290) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn290.r, odriverConn290.setup, query)
}
func (odriverConn290 *tdriverConn290) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn290.r, odriverConn290.setup, ctx, opts)
}
func (odriverConn290 *tdriverConn290) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn290.r, odriverConn290.setup, ctx, query)
}
func (odriverConn290 *tdriverConn290) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn290.r, odriverConn290.setup, query, args)
}
func (odriverConn290 *tdriverConn290) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn290.r, odriverConn290.setup, ctx, query, args)
}
func (odriverConn290 *tdriverConn290) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn290.r, odriverConn290.setup, ctx)
}

func (odriverConn291 *tdriverConn291) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn291.r, odriverConn291.setup)
}
func (odriverConn291 *tdriverConn291) Close() error {
	return traceDCClose(odriverConn291.r, odriverConn291.setup)
}
func (odriverConn291 *tdriverConn291) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn291.r, odriverConn291.setup, query)
}
func (odriverConn291 *tdriverConn291) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn291.r, odriverConn291.setup, ctx, opts)
}
func (odriverConn291 *tdriverConn291) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn291.r, odriverConn291.setup, query, args)
}
func (odriverConn291 *tdriverConn291) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn291.r, odriverConn291.setup, ctx, query, args)
}
func (odriverConn291 *tdriverConn291) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn291.r, odriverConn291.setup, param0)
}
func (odriverConn291 *tdriverConn291) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn291.r, odriverConn291.setup, ctx)
}

func (odriverConn292 *tdriverConn292) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn292.r, odriverConn292.setup)
}
func (odriverConn292 *tdriverConn292) Close() error {
	return traceDCClose(odriverConn292.r, odriverConn292.setup)
}
func (odriverConn292 *tdriverConn292) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn292.r, odriverConn292.setup, query)
}
func (odriverConn292 *tdriverConn292) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn292.r, odriverConn292.setup, ctx, opts)
}
func (odriverConn292 *tdriverConn292) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn292.r, odriverConn292.setup, query, args)
}
func (odriverConn292 *tdriverConn292) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn292.r, odriverConn292.setup, ctx, query, args)
}
func (odriverConn292 *tdriverConn292) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn292.r, odriverConn292.setup, param0)
}
func (odriverConn292 *tdriverConn292) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn292.r, odriverConn292.setup, query, args)
}

func (odriverConn293 *tdriverConn293) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn293.r, odriverConn293.setup)
}
func (odriverConn293 *tdriverConn293) Close() error {
	return traceDCClose(odriverConn293.r, odriverConn293.setup)
}
func (odriverConn293 *tdriverConn293) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn293.r, odriverConn293.setup, query)
}
func (odriverConn293 *tdriverConn293) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn293.r, odriverConn293.setup, ctx, opts)
}
func (odriverConn293 *tdriverConn293) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn293.r, odriverConn293.setup, query, args)
}
func (odriverConn293 *tdriverConn293) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn293.r, odriverConn293.setup, ctx, query, args)
}
func (odriverConn293 *tdriverConn293) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn293.r, odriverConn293.setup, param0)
}
func (odriverConn293 *tdriverConn293) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn293.r, odriverConn293.setup, ctx, query, args)
}

func (odriverConn294 *tdriverConn294) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn294.r, odriverConn294.setup)
}
func (odriverConn294 *tdriverConn294) Close() error {
	return traceDCClose(odriverConn294.r, odriverConn294.setup)
}
func (odriverConn294 *tdriverConn294) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn294.r, odriverConn294.setup, query)
}
func (odriverConn294 *tdriverConn294) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn294.r, odriverConn294.setup, ctx, opts)
}
func (odriverConn294 *tdriverConn294) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn294.r, odriverConn294.setup, query, args)
}
func (odriverConn294 *tdriverConn294) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn294.r, odriverConn294.setup, ctx, query, args)
}
func (odriverConn294 *tdriverConn294) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn294.r, odriverConn294.setup, param0)
}
func (odriverConn294 *tdriverConn294) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn294.r, odriverConn294.setup, ctx)
}

func (odriverConn295 *tdriverConn295) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn295.r, odriverConn295.setup)
}
func (odriverConn295 *tdriverConn295) Close() error {
	return traceDCClose(odriverConn295.r, odriverConn295.setup)
}
func (odriverConn295 *tdriverConn295) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn295.r, odriverConn295.setup, query)
}
func (odriverConn295 *tdriverConn295) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn295.r, odriverConn295.setup, ctx, opts)
}
func (odriverConn295 *tdriverConn295) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn295.r, odriverConn295.setup, query, args)
}
func (odriverConn295 *tdriverConn295) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn295.r, odriverConn295.setup, ctx, query, args)
}
func (odriverConn295 *tdriverConn295) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn295.r, odriverConn295.setup, ctx)
}
func (odriverConn295 *tdriverConn295) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn295.r, odriverConn295.setup, query, args)
}

func (odriverConn296 *tdriverConn296) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn296.r, odriverConn296.setup)
}
func (odriverConn296 *tdriverConn296) Close() error {
	return traceDCClose(odriverConn296.r, odriverConn296.setup)
}
func (odriverConn296 *tdriverConn296) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn296.r, odriverConn296.setup, query)
}
func (odriverConn296 *tdriverConn296) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn296.r, odriverConn296.setup, ctx, opts)
}
func (odriverConn296 *tdriverConn296) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn296.r, odriverConn296.setup, query, args)
}
func (odriverConn296 *tdriverConn296) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn296.r, odriverConn296.setup, ctx, query, args)
}
func (odriverConn296 *tdriverConn296) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn296.r, odriverConn296.setup, ctx)
}
func (odriverConn296 *tdriverConn296) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn296.r, odriverConn296.setup, ctx, query, args)
}

func (odriverConn297 *tdriverConn297) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn297.r, odriverConn297.setup)
}
func (odriverConn297 *tdriverConn297) Close() error {
	return traceDCClose(odriverConn297.r, odriverConn297.setup)
}
func (odriverConn297 *tdriverConn297) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn297.r, odriverConn297.setup, query)
}
func (odriverConn297 *tdriverConn297) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn297.r, odriverConn297.setup, ctx, opts)
}
func (odriverConn297 *tdriverConn297) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn297.r, odriverConn297.setup, query, args)
}
func (odriverConn297 *tdriverConn297) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn297.r, odriverConn297.setup, ctx, query, args)
}
func (odriverConn297 *tdriverConn297) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn297.r, odriverConn297.setup, ctx)
}
func (odriverConn297 *tdriverConn297) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn297.r, odriverConn297.setup, ctx)
}

func (odriverConn298 *tdriverConn298) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn298.r, odriverConn298.setup)
}
func (odriverConn298 *tdriverConn298) Close() error {
	return traceDCClose(odriverConn298.r, odriverConn298.setup)
}
func (odriverConn298 *tdriverConn298) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn298.r, odriverConn298.setup, query)
}
func (odriverConn298 *tdriverConn298) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn298.r, odriverConn298.setup, ctx, opts)
}
func (odriverConn298 *tdriverConn298) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn298.r, odriverConn298.setup, query, args)
}
func (odriverConn298 *tdriverConn298) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn298.r, odriverConn298.setup, ctx, query, args)
}
func (odriverConn298 *tdriverConn298) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn298.r, odriverConn298.setup, query, args)
}
func (odriverConn298 *tdriverConn298) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn298.r, odriverConn298.setup, ctx, query, args)
}

func (odriverConn299 *tdriverConn299) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn299.r, odriverConn299.setup)
}
func (odriverConn299 *tdriverConn299) Close() error {
	return traceDCClose(odriverConn299.r, odriverConn299.setup)
}
func (odriverConn299 *tdriverConn299) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn299.r, odriverConn299.setup, query)
}
func (odriverConn299 *tdriverConn299) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn299.r, odriverConn299.setup, ctx, opts)
}
func (odriverConn299 *tdriverConn299) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn299.r, odriverConn299.setup, query, args)
}
func (odriverConn299 *tdriverConn299) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn299.r, odriverConn299.setup, ctx, query, args)
}
func (odriverConn299 *tdriverConn299) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn299.r, odriverConn299.setup, query, args)
}
func (odriverConn299 *tdriverConn299) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn299.r, odriverConn299.setup, ctx)
}

func (odriverConn300 *tdriverConn300) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn300.r, odriverConn300.setup)
}
func (odriverConn300 *tdriverConn300) Close() error {
	return traceDCClose(odriverConn300.r, odriverConn300.setup)
}
func (odriverConn300 *tdriverConn300) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn300.r, odriverConn300.setup, query)
}
func (odriverConn300 *tdriverConn300) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn300.r, odriverConn300.setup, ctx, opts)
}
func (odriverConn300 *tdriverConn300) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn300.r, odriverConn300.setup, query, args)
}
func (odriverConn300 *tdriverConn300) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn300.r, odriverConn300.setup, ctx, query, args)
}
func (odriverConn300 *tdriverConn300) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn300.r, odriverConn300.setup, ctx, query, args)
}
func (odriverConn300 *tdriverConn300) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn300.r, odriverConn300.setup, ctx)
}

func (odriverConn301 *tdriverConn301) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn301.r, odriverConn301.setup)
}
func (odriverConn301 *tdriverConn301) Close() error {
	return traceDCClose(odriverConn301.r, odriverConn301.setup)
}
func (odriverConn301 *tdriverConn301) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn301.r, odriverConn301.setup, query)
}
func (odriverConn301 *tdriverConn301) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn301.r, odriverConn301.setup, ctx, opts)
}
func (odriverConn301 *tdriverConn301) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn301.r, odriverConn301.setup, query, args)
}
func (odriverConn301 *tdriverConn301) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn301.r, odriverConn301.setup, param0)
}
func (odriverConn301 *tdriverConn301) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn301.r, odriverConn301.setup, ctx)
}
func (odriverConn301 *tdriverConn301) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn301.r, odriverConn301.setup, query, args)
}

func (odriverConn302 *tdriverConn302) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn302.r, odriverConn302.setup)
}
func (odriverConn302 *tdriverConn302) Close() error {
	return traceDCClose(odriverConn302.r, odriverConn302.setup)
}
func (odriverConn302 *tdriverConn302) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn302.r, odriverConn302.setup, query)
}
func (odriverConn302 *tdriverConn302) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn302.r, odriverConn302.setup, ctx, opts)
}
func (odriverConn302 *tdriverConn302) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn302.r, odriverConn302.setup, query, args)
}
func (odriverConn302 *tdriverConn302) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn302.r, odriverConn302.setup, param0)
}
func (odriverConn302 *tdriverConn302) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn302.r, odriverConn302.setup, ctx)
}
func (odriverConn302 *tdriverConn302) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn302.r, odriverConn302.setup, ctx, query, args)
}

func (odriverConn303 *tdriverConn303) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn303.r, odriverConn303.setup)
}
func (odriverConn303 *tdriverConn303) Close() error {
	return traceDCClose(odriverConn303.r, odriverConn303.setup)
}
func (odriverConn303 *tdriverConn303) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn303.r, odriverConn303.setup, query)
}
func (odriverConn303 *tdriverConn303) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn303.r, odriverConn303.setup, ctx, opts)
}
func (odriverConn303 *tdriverConn303) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn303.r, odriverConn303.setup, query, args)
}
func (odriverConn303 *tdriverConn303) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn303.r, odriverConn303.setup, param0)
}
func (odriverConn303 *tdriverConn303) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn303.r, odriverConn303.setup, ctx)
}
func (odriverConn303 *tdriverConn303) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn303.r, odriverConn303.setup, ctx)
}

func (odriverConn304 *tdriverConn304) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn304.r, odriverConn304.setup)
}
func (odriverConn304 *tdriverConn304) Close() error {
	return traceDCClose(odriverConn304.r, odriverConn304.setup)
}
func (odriverConn304 *tdriverConn304) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn304.r, odriverConn304.setup, query)
}
func (odriverConn304 *tdriverConn304) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn304.r, odriverConn304.setup, ctx, opts)
}
func (odriverConn304 *tdriverConn304) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn304.r, odriverConn304.setup, query, args)
}
func (odriverConn304 *tdriverConn304) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn304.r, odriverConn304.setup, param0)
}
func (odriverConn304 *tdriverConn304) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn304.r, odriverConn304.setup, query, args)
}
func (odriverConn304 *tdriverConn304) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn304.r, odriverConn304.setup, ctx, query, args)
}

func (odriverConn305 *tdriverConn305) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn305.r, odriverConn305.setup)
}
func (odriverConn305 *tdriverConn305) Close() error {
	return traceDCClose(odriverConn305.r, odriverConn305.setup)
}
func (odriverConn305 *tdriverConn305) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn305.r, odriverConn305.setup, query)
}
func (odriverConn305 *tdriverConn305) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn305.r, odriverConn305.setup, ctx, opts)
}
func (odriverConn305 *tdriverConn305) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn305.r, odriverConn305.setup, query, args)
}
func (odriverConn305 *tdriverConn305) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn305.r, odriverConn305.setup, param0)
}
func (odriverConn305 *tdriverConn305) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn305.r, odriverConn305.setup, query, args)
}
func (odriverConn305 *tdriverConn305) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn305.r, odriverConn305.setup, ctx)
}

func (odriverConn306 *tdriverConn306) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn306.r, odriverConn306.setup)
}
func (odriverConn306 *tdriverConn306) Close() error {
	return traceDCClose(odriverConn306.r, odriverConn306.setup)
}
func (odriverConn306 *tdriverConn306) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn306.r, odriverConn306.setup, query)
}
func (odriverConn306 *tdriverConn306) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn306.r, odriverConn306.setup, ctx, opts)
}
func (odriverConn306 *tdriverConn306) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn306.r, odriverConn306.setup, query, args)
}
func (odriverConn306 *tdriverConn306) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn306.r, odriverConn306.setup, param0)
}
func (odriverConn306 *tdriverConn306) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn306.r, odriverConn306.setup, ctx, query, args)
}
func (odriverConn306 *tdriverConn306) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn306.r, odriverConn306.setup, ctx)
}

func (odriverConn307 *tdriverConn307) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn307.r, odriverConn307.setup)
}
func (odriverConn307 *tdriverConn307) Close() error {
	return traceDCClose(odriverConn307.r, odriverConn307.setup)
}
func (odriverConn307 *tdriverConn307) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn307.r, odriverConn307.setup, query)
}
func (odriverConn307 *tdriverConn307) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn307.r, odriverConn307.setup, ctx, opts)
}
func (odriverConn307 *tdriverConn307) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn307.r, odriverConn307.setup, query, args)
}
func (odriverConn307 *tdriverConn307) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn307.r, odriverConn307.setup, ctx)
}
func (odriverConn307 *tdriverConn307) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn307.r, odriverConn307.setup, query, args)
}
func (odriverConn307 *tdriverConn307) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn307.r, odriverConn307.setup, ctx, query, args)
}

func (odriverConn308 *tdriverConn308) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn308.r, odriverConn308.setup)
}
func (odriverConn308 *tdriverConn308) Close() error {
	return traceDCClose(odriverConn308.r, odriverConn308.setup)
}
func (odriverConn308 *tdriverConn308) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn308.r, odriverConn308.setup, query)
}
func (odriverConn308 *tdriverConn308) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn308.r, odriverConn308.setup, ctx, opts)
}
func (odriverConn308 *tdriverConn308) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn308.r, odriverConn308.setup, query, args)
}
func (odriverConn308 *tdriverConn308) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn308.r, odriverConn308.setup, ctx)
}
func (odriverConn308 *tdriverConn308) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn308.r, odriverConn308.setup, query, args)
}
func (odriverConn308 *tdriverConn308) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn308.r, odriverConn308.setup, ctx)
}

func (odriverConn309 *tdriverConn309) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn309.r, odriverConn309.setup)
}
func (odriverConn309 *tdriverConn309) Close() error {
	return traceDCClose(odriverConn309.r, odriverConn309.setup)
}
func (odriverConn309 *tdriverConn309) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn309.r, odriverConn309.setup, query)
}
func (odriverConn309 *tdriverConn309) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn309.r, odriverConn309.setup, ctx, opts)
}
func (odriverConn309 *tdriverConn309) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn309.r, odriverConn309.setup, query, args)
}
func (odriverConn309 *tdriverConn309) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn309.r, odriverConn309.setup, ctx)
}
func (odriverConn309 *tdriverConn309) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn309.r, odriverConn309.setup, ctx, query, args)
}
func (odriverConn309 *tdriverConn309) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn309.r, odriverConn309.setup, ctx)
}

func (odriverConn310 *tdriverConn310) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn310.r, odriverConn310.setup)
}
func (odriverConn310 *tdriverConn310) Close() error {
	return traceDCClose(odriverConn310.r, odriverConn310.setup)
}
func (odriverConn310 *tdriverConn310) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn310.r, odriverConn310.setup, query)
}
func (odriverConn310 *tdriverConn310) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn310.r, odriverConn310.setup, ctx, opts)
}
func (odriverConn310 *tdriverConn310) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn310.r, odriverConn310.setup, query, args)
}
func (odriverConn310 *tdriverConn310) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn310.r, odriverConn310.setup, query, args)
}
func (odriverConn310 *tdriverConn310) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn310.r, odriverConn310.setup, ctx, query, args)
}
func (odriverConn310 *tdriverConn310) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn310.r, odriverConn310.setup, ctx)
}

func (odriverConn311 *tdriverConn311) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn311.r, odriverConn311.setup)
}
func (odriverConn311 *tdriverConn311) Close() error {
	return traceDCClose(odriverConn311.r, odriverConn311.setup)
}
func (odriverConn311 *tdriverConn311) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn311.r, odriverConn311.setup, query)
}
func (odriverConn311 *tdriverConn311) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn311.r, odriverConn311.setup, ctx, opts)
}
func (odriverConn311 *tdriverConn311) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn311.r, odriverConn311.setup, ctx, query, args)
}
func (odriverConn311 *tdriverConn311) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn311.r, odriverConn311.setup, param0)
}
func (odriverConn311 *tdriverConn311) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn311.r, odriverConn311.setup, ctx)
}
func (odriverConn311 *tdriverConn311) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn311.r, odriverConn311.setup, query, args)
}

func (odriverConn312 *tdriverConn312) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn312.r, odriverConn312.setup)
}
func (odriverConn312 *tdriverConn312) Close() error {
	return traceDCClose(odriverConn312.r, odriverConn312.setup)
}
func (odriverConn312 *tdriverConn312) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn312.r, odriverConn312.setup, query)
}
func (odriverConn312 *tdriverConn312) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn312.r, odriverConn312.setup, ctx, opts)
}
func (odriverConn312 *tdriverConn312) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn312.r, odriverConn312.setup, ctx, query, args)
}
func (odriverConn312 *tdriverConn312) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn312.r, odriverConn312.setup, param0)
}
func (odriverConn312 *tdriverConn312) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn312.r, odriverConn312.setup, ctx)
}
func (odriverConn312 *tdriverConn312) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn312.r, odriverConn312.setup, ctx, query, args)
}

func (odriverConn313 *tdriverConn313) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn313.r, odriverConn313.setup)
}
func (odriverConn313 *tdriverConn313) Close() error {
	return traceDCClose(odriverConn313.r, odriverConn313.setup)
}
func (odriverConn313 *tdriverConn313) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn313.r, odriverConn313.setup, query)
}
func (odriverConn313 *tdriverConn313) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn313.r, odriverConn313.setup, ctx, opts)
}
func (odriverConn313 *tdriverConn313) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn313.r, odriverConn313.setup, ctx, query, args)
}
func (odriverConn313 *tdriverConn313) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn313.r, odriverConn313.setup, param0)
}
func (odriverConn313 *tdriverConn313) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn313.r, odriverConn313.setup, ctx)
}
func (odriverConn313 *tdriverConn313) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn313.r, odriverConn313.setup, ctx)
}

func (odriverConn314 *tdriverConn314) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn314.r, odriverConn314.setup)
}
func (odriverConn314 *tdriverConn314) Close() error {
	return traceDCClose(odriverConn314.r, odriverConn314.setup)
}
func (odriverConn314 *tdriverConn314) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn314.r, odriverConn314.setup, query)
}
func (odriverConn314 *tdriverConn314) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn314.r, odriverConn314.setup, ctx, opts)
}
func (odriverConn314 *tdriverConn314) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn314.r, odriverConn314.setup, ctx, query, args)
}
func (odriverConn314 *tdriverConn314) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn314.r, odriverConn314.setup, param0)
}
func (odriverConn314 *tdriverConn314) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn314.r, odriverConn314.setup, query, args)
}
func (odriverConn314 *tdriverConn314) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn314.r, odriverConn314.setup, ctx, query, args)
}

func (odriverConn315 *tdriverConn315) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn315.r, odriverConn315.setup)
}
func (odriverConn315 *tdriverConn315) Close() error {
	return traceDCClose(odriverConn315.r, odriverConn315.setup)
}
func (odriverConn315 *tdriverConn315) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn315.r, odriverConn315.setup, query)
}
func (odriverConn315 *tdriverConn315) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn315.r, odriverConn315.setup, ctx, opts)
}
func (odriverConn315 *tdriverConn315) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn315.r, odriverConn315.setup, ctx, query, args)
}
func (odriverConn315 *tdriverConn315) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn315.r, odriverConn315.setup, param0)
}
func (odriverConn315 *tdriverConn315) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn315.r, odriverConn315.setup, query, args)
}
func (odriverConn315 *tdriverConn315) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn315.r, odriverConn315.setup, ctx)
}

func (odriverConn316 *tdriverConn316) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn316.r, odriverConn316.setup)
}
func (odriverConn316 *tdriverConn316) Close() error {
	return traceDCClose(odriverConn316.r, odriverConn316.setup)
}
func (odriverConn316 *tdriverConn316) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn316.r, odriverConn316.setup, query)
}
func (odriverConn316 *tdriverConn316) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn316.r, odriverConn316.setup, ctx, opts)
}
func (odriverConn316 *tdriverConn316) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn316.r, odriverConn316.setup, ctx, query, args)
}
func (odriverConn316 *tdriverConn316) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn316.r, odriverConn316.setup, param0)
}
func (odriverConn316 *tdriverConn316) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn316.r, odriverConn316.setup, ctx, query, args)
}
func (odriverConn316 *tdriverConn316) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn316.r, odriverConn316.setup, ctx)
}

func (odriverConn317 *tdriverConn317) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn317.r, odriverConn317.setup)
}
func (odriverConn317 *tdriverConn317) Close() error {
	return traceDCClose(odriverConn317.r, odriverConn317.setup)
}
func (odriverConn317 *tdriverConn317) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn317.r, odriverConn317.setup, query)
}
func (odriverConn317 *tdriverConn317) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn317.r, odriverConn317.setup, ctx, opts)
}
func (odriverConn317 *tdriverConn317) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn317.r, odriverConn317.setup, ctx, query, args)
}
func (odriverConn317 *tdriverConn317) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn317.r, odriverConn317.setup, ctx)
}
func (odriverConn317 *tdriverConn317) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn317.r, odriverConn317.setup, query, args)
}
func (odriverConn317 *tdriverConn317) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn317.r, odriverConn317.setup, ctx, query, args)
}

func (odriverConn318 *tdriverConn318) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn318.r, odriverConn318.setup)
}
func (odriverConn318 *tdriverConn318) Close() error {
	return traceDCClose(odriverConn318.r, odriverConn318.setup)
}
func (odriverConn318 *tdriverConn318) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn318.r, odriverConn318.setup, query)
}
func (odriverConn318 *tdriverConn318) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn318.r, odriverConn318.setup, ctx, opts)
}
func (odriverConn318 *tdriverConn318) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn318.r, odriverConn318.setup, ctx, query, args)
}
func (odriverConn318 *tdriverConn318) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn318.r, odriverConn318.setup, ctx)
}
func (odriverConn318 *tdriverConn318) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn318.r, odriverConn318.setup, query, args)
}
func (odriverConn318 *tdriverConn318) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn318.r, odriverConn318.setup, ctx)
}

func (odriverConn319 *tdriverConn319) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn319.r, odriverConn319.setup)
}
func (odriverConn319 *tdriverConn319) Close() error {
	return traceDCClose(odriverConn319.r, odriverConn319.setup)
}
func (odriverConn319 *tdriverConn319) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn319.r, odriverConn319.setup, query)
}
func (odriverConn319 *tdriverConn319) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn319.r, odriverConn319.setup, ctx, opts)
}
func (odriverConn319 *tdriverConn319) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn319.r, odriverConn319.setup, ctx, query, args)
}
func (odriverConn319 *tdriverConn319) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn319.r, odriverConn319.setup, ctx)
}
func (odriverConn319 *tdriverConn319) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn319.r, odriverConn319.setup, ctx, query, args)
}
func (odriverConn319 *tdriverConn319) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn319.r, odriverConn319.setup, ctx)
}

func (odriverConn320 *tdriverConn320) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn320.r, odriverConn320.setup)
}
func (odriverConn320 *tdriverConn320) Close() error {
	return traceDCClose(odriverConn320.r, odriverConn320.setup)
}
func (odriverConn320 *tdriverConn320) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn320.r, odriverConn320.setup, query)
}
func (odriverConn320 *tdriverConn320) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn320.r, odriverConn320.setup, ctx, opts)
}
func (odriverConn320 *tdriverConn320) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn320.r, odriverConn320.setup, ctx, query, args)
}
func (odriverConn320 *tdriverConn320) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn320.r, odriverConn320.setup, query, args)
}
func (odriverConn320 *tdriverConn320) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn320.r, odriverConn320.setup, ctx, query, args)
}
func (odriverConn320 *tdriverConn320) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn320.r, odriverConn320.setup, ctx)
}

func (odriverConn321 *tdriverConn321) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn321.r, odriverConn321.setup)
}
func (odriverConn321 *tdriverConn321) Close() error {
	return traceDCClose(odriverConn321.r, odriverConn321.setup)
}
func (odriverConn321 *tdriverConn321) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn321.r, odriverConn321.setup, query)
}
func (odriverConn321 *tdriverConn321) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn321.r, odriverConn321.setup, ctx, opts)
}
func (odriverConn321 *tdriverConn321) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn321.r, odriverConn321.setup, param0)
}
func (odriverConn321 *tdriverConn321) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn321.r, odriverConn321.setup, ctx)
}
func (odriverConn321 *tdriverConn321) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn321.r, odriverConn321.setup, query, args)
}
func (odriverConn321 *tdriverConn321) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn321.r, odriverConn321.setup, ctx, query, args)
}

func (odriverConn322 *tdriverConn322) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn322.r, odriverConn322.setup)
}
func (odriverConn322 *tdriverConn322) Close() error {
	return traceDCClose(odriverConn322.r, odriverConn322.setup)
}
func (odriverConn322 *tdriverConn322) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn322.r, odriverConn322.setup, query)
}
func (odriverConn322 *tdriverConn322) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn322.r, odriverConn322.setup, ctx, opts)
}
func (odriverConn322 *tdriverConn322) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn322.r, odriverConn322.setup, param0)
}
func (odriverConn322 *tdriverConn322) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn322.r, odriverConn322.setup, ctx)
}
func (odriverConn322 *tdriverConn322) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn322.r, odriverConn322.setup, query, args)
}
func (odriverConn322 *tdriverConn322) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn322.r, odriverConn322.setup, ctx)
}

func (odriverConn323 *tdriverConn323) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn323.r, odriverConn323.setup)
}
func (odriverConn323 *tdriverConn323) Close() error {
	return traceDCClose(odriverConn323.r, odriverConn323.setup)
}
func (odriverConn323 *tdriverConn323) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn323.r, odriverConn323.setup, query)
}
func (odriverConn323 *tdriverConn323) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn323.r, odriverConn323.setup, ctx, opts)
}
func (odriverConn323 *tdriverConn323) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn323.r, odriverConn323.setup, param0)
}
func (odriverConn323 *tdriverConn323) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn323.r, odriverConn323.setup, ctx)
}
func (odriverConn323 *tdriverConn323) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn323.r, odriverConn323.setup, ctx, query, args)
}
func (odriverConn323 *tdriverConn323) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn323.r, odriverConn323.setup, ctx)
}

func (odriverConn324 *tdriverConn324) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn324.r, odriverConn324.setup)
}
func (odriverConn324 *tdriverConn324) Close() error {
	return traceDCClose(odriverConn324.r, odriverConn324.setup)
}
func (odriverConn324 *tdriverConn324) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn324.r, odriverConn324.setup, query)
}
func (odriverConn324 *tdriverConn324) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn324.r, odriverConn324.setup, ctx, opts)
}
func (odriverConn324 *tdriverConn324) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn324.r, odriverConn324.setup, param0)
}
func (odriverConn324 *tdriverConn324) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn324.r, odriverConn324.setup, query, args)
}
func (odriverConn324 *tdriverConn324) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn324.r, odriverConn324.setup, ctx, query, args)
}
func (odriverConn324 *tdriverConn324) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn324.r, odriverConn324.setup, ctx)
}

func (odriverConn325 *tdriverConn325) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn325.r, odriverConn325.setup)
}
func (odriverConn325 *tdriverConn325) Close() error {
	return traceDCClose(odriverConn325.r, odriverConn325.setup)
}
func (odriverConn325 *tdriverConn325) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn325.r, odriverConn325.setup, query)
}
func (odriverConn325 *tdriverConn325) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn325.r, odriverConn325.setup, ctx, opts)
}
func (odriverConn325 *tdriverConn325) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn325.r, odriverConn325.setup, ctx)
}
func (odriverConn325 *tdriverConn325) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn325.r, odriverConn325.setup, query, args)
}
func (odriverConn325 *tdriverConn325) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn325.r, odriverConn325.setup, ctx, query, args)
}
func (odriverConn325 *tdriverConn325) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn325.r, odriverConn325.setup, ctx)
}

func (odriverConn326 *tdriverConn326) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn326.r, odriverConn326.setup)
}
func (odriverConn326 *tdriverConn326) Close() error {
	return traceDCClose(odriverConn326.r, odriverConn326.setup)
}
func (odriverConn326 *tdriverConn326) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn326.r, odriverConn326.setup, query)
}
func (odriverConn326 *tdriverConn326) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn326.r, odriverConn326.setup, ctx, query)
}
func (odriverConn326 *tdriverConn326) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn326.r, odriverConn326.setup, query, args)
}
func (odriverConn326 *tdriverConn326) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn326.r, odriverConn326.setup, ctx, query, args)
}
func (odriverConn326 *tdriverConn326) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn326.r, odriverConn326.setup, param0)
}
func (odriverConn326 *tdriverConn326) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn326.r, odriverConn326.setup, ctx)
}

func (odriverConn327 *tdriverConn327) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn327.r, odriverConn327.setup)
}
func (odriverConn327 *tdriverConn327) Close() error {
	return traceDCClose(odriverConn327.r, odriverConn327.setup)
}
func (odriverConn327 *tdriverConn327) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn327.r, odriverConn327.setup, query)
}
func (odriverConn327 *tdriverConn327) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn327.r, odriverConn327.setup, ctx, query)
}
func (odriverConn327 *tdriverConn327) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn327.r, odriverConn327.setup, query, args)
}
func (odriverConn327 *tdriverConn327) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn327.r, odriverConn327.setup, ctx, query, args)
}
func (odriverConn327 *tdriverConn327) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn327.r, odriverConn327.setup, param0)
}
func (odriverConn327 *tdriverConn327) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn327.r, odriverConn327.setup, query, args)
}

func (odriverConn328 *tdriverConn328) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn328.r, odriverConn328.setup)
}
func (odriverConn328 *tdriverConn328) Close() error {
	return traceDCClose(odriverConn328.r, odriverConn328.setup)
}
func (odriverConn328 *tdriverConn328) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn328.r, odriverConn328.setup, query)
}
func (odriverConn328 *tdriverConn328) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn328.r, odriverConn328.setup, ctx, query)
}
func (odriverConn328 *tdriverConn328) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn328.r, odriverConn328.setup, query, args)
}
func (odriverConn328 *tdriverConn328) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn328.r, odriverConn328.setup, ctx, query, args)
}
func (odriverConn328 *tdriverConn328) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn328.r, odriverConn328.setup, param0)
}
func (odriverConn328 *tdriverConn328) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn328.r, odriverConn328.setup, ctx, query, args)
}

func (odriverConn329 *tdriverConn329) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn329.r, odriverConn329.setup)
}
func (odriverConn329 *tdriverConn329) Close() error {
	return traceDCClose(odriverConn329.r, odriverConn329.setup)
}
func (odriverConn329 *tdriverConn329) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn329.r, odriverConn329.setup, query)
}
func (odriverConn329 *tdriverConn329) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn329.r, odriverConn329.setup, ctx, query)
}
func (odriverConn329 *tdriverConn329) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn329.r, odriverConn329.setup, query, args)
}
func (odriverConn329 *tdriverConn329) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn329.r, odriverConn329.setup, ctx, query, args)
}
func (odriverConn329 *tdriverConn329) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn329.r, odriverConn329.setup, param0)
}
func (odriverConn329 *tdriverConn329) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn329.r, odriverConn329.setup, ctx)
}

func (odriverConn330 *tdriverConn330) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn330.r, odriverConn330.setup)
}
func (odriverConn330 *tdriverConn330) Close() error {
	return traceDCClose(odriverConn330.r, odriverConn330.setup)
}
func (odriverConn330 *tdriverConn330) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn330.r, odriverConn330.setup, query)
}
func (odriverConn330 *tdriverConn330) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn330.r, odriverConn330.setup, ctx, query)
}
func (odriverConn330 *tdriverConn330) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn330.r, odriverConn330.setup, query, args)
}
func (odriverConn330 *tdriverConn330) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn330.r, odriverConn330.setup, ctx, query, args)
}
func (odriverConn330 *tdriverConn330) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn330.r, odriverConn330.setup, ctx)
}
func (odriverConn330 *tdriverConn330) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn330.r, odriverConn330.setup, query, args)
}

func (odriverConn331 *tdriverConn331) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn331.r, odriverConn331.setup)
}
func (odriverConn331 *tdriverConn331) Close() error {
	return traceDCClose(odriverConn331.r, odriverConn331.setup)
}
func (odriverConn331 *tdriverConn331) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn331.r, odriverConn331.setup, query)
}
func (odriverConn331 *tdriverConn331) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn331.r, odriverConn331.setup, ctx, query)
}
func (odriverConn331 *tdriverConn331) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn331.r, odriverConn331.setup, query, args)
}
func (odriverConn331 *tdriverConn331) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn331.r, odriverConn331.setup, ctx, query, args)
}
func (odriverConn331 *tdriverConn331) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn331.r, odriverConn331.setup, ctx)
}
func (odriverConn331 *tdriverConn331) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn331.r, odriverConn331.setup, ctx, query, args)
}

func (odriverConn332 *tdriverConn332) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn332.r, odriverConn332.setup)
}
func (odriverConn332 *tdriverConn332) Close() error {
	return traceDCClose(odriverConn332.r, odriverConn332.setup)
}
func (odriverConn332 *tdriverConn332) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn332.r, odriverConn332.setup, query)
}
func (odriverConn332 *tdriverConn332) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn332.r, odriverConn332.setup, ctx, query)
}
func (odriverConn332 *tdriverConn332) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn332.r, odriverConn332.setup, query, args)
}
func (odriverConn332 *tdriverConn332) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn332.r, odriverConn332.setup, ctx, query, args)
}
func (odriverConn332 *tdriverConn332) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn332.r, odriverConn332.setup, ctx)
}
func (odriverConn332 *tdriverConn332) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn332.r, odriverConn332.setup, ctx)
}

func (odriverConn333 *tdriverConn333) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn333.r, odriverConn333.setup)
}
func (odriverConn333 *tdriverConn333) Close() error {
	return traceDCClose(odriverConn333.r, odriverConn333.setup)
}
func (odriverConn333 *tdriverConn333) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn333.r, odriverConn333.setup, query)
}
func (odriverConn333 *tdriverConn333) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn333.r, odriverConn333.setup, ctx, query)
}
func (odriverConn333 *tdriverConn333) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn333.r, odriverConn333.setup, query, args)
}
func (odriverConn333 *tdriverConn333) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn333.r, odriverConn333.setup, ctx, query, args)
}
func (odriverConn333 *tdriverConn333) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn333.r, odriverConn333.setup, query, args)
}
func (odriverConn333 *tdriverConn333) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn333.r, odriverConn333.setup, ctx, query, args)
}

func (odriverConn334 *tdriverConn334) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn334.r, odriverConn334.setup)
}
func (odriverConn334 *tdriverConn334) Close() error {
	return traceDCClose(odriverConn334.r, odriverConn334.setup)
}
func (odriverConn334 *tdriverConn334) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn334.r, odriverConn334.setup, query)
}
func (odriverConn334 *tdriverConn334) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn334.r, odriverConn334.setup, ctx, query)
}
func (odriverConn334 *tdriverConn334) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn334.r, odriverConn334.setup, query, args)
}
func (odriverConn334 *tdriverConn334) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn334.r, odriverConn334.setup, ctx, query, args)
}
func (odriverConn334 *tdriverConn334) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn334.r, odriverConn334.setup, query, args)
}
func (odriverConn334 *tdriverConn334) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn334.r, odriverConn334.setup, ctx)
}

func (odriverConn335 *tdriverConn335) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn335.r, odriverConn335.setup)
}
func (odriverConn335 *tdriverConn335) Close() error {
	return traceDCClose(odriverConn335.r, odriverConn335.setup)
}
func (odriverConn335 *tdriverConn335) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn335.r, odriverConn335.setup, query)
}
func (odriverConn335 *tdriverConn335) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn335.r, odriverConn335.setup, ctx, query)
}
func (odriverConn335 *tdriverConn335) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn335.r, odriverConn335.setup, query, args)
}
func (odriverConn335 *tdriverConn335) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn335.r, odriverConn335.setup, ctx, query, args)
}
func (odriverConn335 *tdriverConn335) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn335.r, odriverConn335.setup, ctx, query, args)
}
func (odriverConn335 *tdriverConn335) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn335.r, odriverConn335.setup, ctx)
}

func (odriverConn336 *tdriverConn336) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn336.r, odriverConn336.setup)
}
func (odriverConn336 *tdriverConn336) Close() error {
	return traceDCClose(odriverConn336.r, odriverConn336.setup)
}
func (odriverConn336 *tdriverConn336) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn336.r, odriverConn336.setup, query)
}
func (odriverConn336 *tdriverConn336) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn336.r, odriverConn336.setup, ctx, query)
}
func (odriverConn336 *tdriverConn336) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn336.r, odriverConn336.setup, query, args)
}
func (odriverConn336 *tdriverConn336) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn336.r, odriverConn336.setup, param0)
}
func (odriverConn336 *tdriverConn336) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn336.r, odriverConn336.setup, ctx)
}
func (odriverConn336 *tdriverConn336) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn336.r, odriverConn336.setup, query, args)
}

func (odriverConn337 *tdriverConn337) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn337.r, odriverConn337.setup)
}
func (odriverConn337 *tdriverConn337) Close() error {
	return traceDCClose(odriverConn337.r, odriverConn337.setup)
}
func (odriverConn337 *tdriverConn337) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn337.r, odriverConn337.setup, query)
}
func (odriverConn337 *tdriverConn337) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn337.r, odriverConn337.setup, ctx, query)
}
func (odriverConn337 *tdriverConn337) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn337.r, odriverConn337.setup, query, args)
}
func (odriverConn337 *tdriverConn337) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn337.r, odriverConn337.setup, param0)
}
func (odriverConn337 *tdriverConn337) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn337.r, odriverConn337.setup, ctx)
}
func (odriverConn337 *tdriverConn337) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn337.r, odriverConn337.setup, ctx, query, args)
}

func (odriverConn338 *tdriverConn338) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn338.r, odriverConn338.setup)
}
func (odriverConn338 *tdriverConn338) Close() error {
	return traceDCClose(odriverConn338.r, odriverConn338.setup)
}
func (odriverConn338 *tdriverConn338) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn338.r, odriverConn338.setup, query)
}
func (odriverConn338 *tdriverConn338) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn338.r, odriverConn338.setup, ctx, query)
}
func (odriverConn338 *tdriverConn338) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn338.r, odriverConn338.setup, query, args)
}
func (odriverConn338 *tdriverConn338) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn338.r, odriverConn338.setup, param0)
}
func (odriverConn338 *tdriverConn338) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn338.r, odriverConn338.setup, ctx)
}
func (odriverConn338 *tdriverConn338) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn338.r, odriverConn338.setup, ctx)
}

func (odriverConn339 *tdriverConn339) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn339.r, odriverConn339.setup)
}
func (odriverConn339 *tdriverConn339) Close() error {
	return traceDCClose(odriverConn339.r, odriverConn339.setup)
}
func (odriverConn339 *tdriverConn339) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn339.r, odriverConn339.setup, query)
}
func (odriverConn339 *tdriverConn339) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn339.r, odriverConn339.setup, ctx, query)
}
func (odriverConn339 *tdriverConn339) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn339.r, odriverConn339.setup, query, args)
}
func (odriverConn339 *tdriverConn339) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn339.r, odriverConn339.setup, param0)
}
func (odriverConn339 *tdriverConn339) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn339.r, odriverConn339.setup, query, args)
}
func (odriverConn339 *tdriverConn339) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn339.r, odriverConn339.setup, ctx, query, args)
}

func (odriverConn340 *tdriverConn340) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn340.r, odriverConn340.setup)
}
func (odriverConn340 *tdriverConn340) Close() error {
	return traceDCClose(odriverConn340.r, odriverConn340.setup)
}
func (odriverConn340 *tdriverConn340) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn340.r, odriverConn340.setup, query)
}
func (odriverConn340 *tdriverConn340) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn340.r, odriverConn340.setup, ctx, query)
}
func (odriverConn340 *tdriverConn340) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn340.r, odriverConn340.setup, query, args)
}
func (odriverConn340 *tdriverConn340) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn340.r, odriverConn340.setup, param0)
}
func (odriverConn340 *tdriverConn340) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn340.r, odriverConn340.setup, query, args)
}
func (odriverConn340 *tdriverConn340) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn340.r, odriverConn340.setup, ctx)
}

func (odriverConn341 *tdriverConn341) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn341.r, odriverConn341.setup)
}
func (odriverConn341 *tdriverConn341) Close() error {
	return traceDCClose(odriverConn341.r, odriverConn341.setup)
}
func (odriverConn341 *tdriverConn341) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn341.r, odriverConn341.setup, query)
}
func (odriverConn341 *tdriverConn341) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn341.r, odriverConn341.setup, ctx, query)
}
func (odriverConn341 *tdriverConn341) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn341.r, odriverConn341.setup, query, args)
}
func (odriverConn341 *tdriverConn341) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn341.r, odriverConn341.setup, param0)
}
func (odriverConn341 *tdriverConn341) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn341.r, odriverConn341.setup, ctx, query, args)
}
func (odriverConn341 *tdriverConn341) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn341.r, odriverConn341.setup, ctx)
}

func (odriverConn342 *tdriverConn342) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn342.r, odriverConn342.setup)
}
func (odriverConn342 *tdriverConn342) Close() error {
	return traceDCClose(odriverConn342.r, odriverConn342.setup)
}
func (odriverConn342 *tdriverConn342) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn342.r, odriverConn342.setup, query)
}
func (odriverConn342 *tdriverConn342) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn342.r, odriverConn342.setup, ctx, query)
}
func (odriverConn342 *tdriverConn342) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn342.r, odriverConn342.setup, query, args)
}
func (odriverConn342 *tdriverConn342) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn342.r, odriverConn342.setup, ctx)
}
func (odriverConn342 *tdriverConn342) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn342.r, odriverConn342.setup, query, args)
}
func (odriverConn342 *tdriverConn342) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn342.r, odriverConn342.setup, ctx, query, args)
}

func (odriverConn343 *tdriverConn343) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn343.r, odriverConn343.setup)
}
func (odriverConn343 *tdriverConn343) Close() error {
	return traceDCClose(odriverConn343.r, odriverConn343.setup)
}
func (odriverConn343 *tdriverConn343) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn343.r, odriverConn343.setup, query)
}
func (odriverConn343 *tdriverConn343) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn343.r, odriverConn343.setup, ctx, query)
}
func (odriverConn343 *tdriverConn343) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn343.r, odriverConn343.setup, query, args)
}
func (odriverConn343 *tdriverConn343) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn343.r, odriverConn343.setup, ctx)
}
func (odriverConn343 *tdriverConn343) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn343.r, odriverConn343.setup, query, args)
}
func (odriverConn343 *tdriverConn343) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn343.r, odriverConn343.setup, ctx)
}

func (odriverConn344 *tdriverConn344) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn344.r, odriverConn344.setup)
}
func (odriverConn344 *tdriverConn344) Close() error {
	return traceDCClose(odriverConn344.r, odriverConn344.setup)
}
func (odriverConn344 *tdriverConn344) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn344.r, odriverConn344.setup, query)
}
func (odriverConn344 *tdriverConn344) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn344.r, odriverConn344.setup, ctx, query)
}
func (odriverConn344 *tdriverConn344) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn344.r, odriverConn344.setup, query, args)
}
func (odriverConn344 *tdriverConn344) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn344.r, odriverConn344.setup, ctx)
}
func (odriverConn344 *tdriverConn344) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn344.r, odriverConn344.setup, ctx, query, args)
}
func (odriverConn344 *tdriverConn344) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn344.r, odriverConn344.setup, ctx)
}

func (odriverConn345 *tdriverConn345) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn345.r, odriverConn345.setup)
}
func (odriverConn345 *tdriverConn345) Close() error {
	return traceDCClose(odriverConn345.r, odriverConn345.setup)
}
func (odriverConn345 *tdriverConn345) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn345.r, odriverConn345.setup, query)
}
func (odriverConn345 *tdriverConn345) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn345.r, odriverConn345.setup, ctx, query)
}
func (odriverConn345 *tdriverConn345) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn345.r, odriverConn345.setup, query, args)
}
func (odriverConn345 *tdriverConn345) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn345.r, odriverConn345.setup, query, args)
}
func (odriverConn345 *tdriverConn345) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn345.r, odriverConn345.setup, ctx, query, args)
}
func (odriverConn345 *tdriverConn345) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn345.r, odriverConn345.setup, ctx)
}

func (odriverConn346 *tdriverConn346) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn346.r, odriverConn346.setup)
}
func (odriverConn346 *tdriverConn346) Close() error {
	return traceDCClose(odriverConn346.r, odriverConn346.setup)
}
func (odriverConn346 *tdriverConn346) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn346.r, odriverConn346.setup, query)
}
func (odriverConn346 *tdriverConn346) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn346.r, odriverConn346.setup, ctx, query)
}
func (odriverConn346 *tdriverConn346) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn346.r, odriverConn346.setup, ctx, query, args)
}
func (odriverConn346 *tdriverConn346) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn346.r, odriverConn346.setup, param0)
}
func (odriverConn346 *tdriverConn346) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn346.r, odriverConn346.setup, ctx)
}
func (odriverConn346 *tdriverConn346) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn346.r, odriverConn346.setup, query, args)
}

func (odriverConn347 *tdriverConn347) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn347.r, odriverConn347.setup)
}
func (odriverConn347 *tdriverConn347) Close() error {
	return traceDCClose(odriverConn347.r, odriverConn347.setup)
}
func (odriverConn347 *tdriverConn347) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn347.r, odriverConn347.setup, query)
}
func (odriverConn347 *tdriverConn347) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn347.r, odriverConn347.setup, ctx, query)
}
func (odriverConn347 *tdriverConn347) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn347.r, odriverConn347.setup, ctx, query, args)
}
func (odriverConn347 *tdriverConn347) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn347.r, odriverConn347.setup, param0)
}
func (odriverConn347 *tdriverConn347) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn347.r, odriverConn347.setup, ctx)
}
func (odriverConn347 *tdriverConn347) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn347.r, odriverConn347.setup, ctx, query, args)
}

func (odriverConn348 *tdriverConn348) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn348.r, odriverConn348.setup)
}
func (odriverConn348 *tdriverConn348) Close() error {
	return traceDCClose(odriverConn348.r, odriverConn348.setup)
}
func (odriverConn348 *tdriverConn348) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn348.r, odriverConn348.setup, query)
}
func (odriverConn348 *tdriverConn348) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn348.r, odriverConn348.setup, ctx, query)
}
func (odriverConn348 *tdriverConn348) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn348.r, odriverConn348.setup, ctx, query, args)
}
func (odriverConn348 *tdriverConn348) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn348.r, odriverConn348.setup, param0)
}
func (odriverConn348 *tdriverConn348) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn348.r, odriverConn348.setup, ctx)
}
func (odriverConn348 *tdriverConn348) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn348.r, odriverConn348.setup, ctx)
}

func (odriverConn349 *tdriverConn349) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn349.r, odriverConn349.setup)
}
func (odriverConn349 *tdriverConn349) Close() error {
	return traceDCClose(odriverConn349.r, odriverConn349.setup)
}
func (odriverConn349 *tdriverConn349) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn349.r, odriverConn349.setup, query)
}
func (odriverConn349 *tdriverConn349) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn349.r, odriverConn349.setup, ctx, query)
}
func (odriverConn349 *tdriverConn349) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn349.r, odriverConn349.setup, ctx, query, args)
}
func (odriverConn349 *tdriverConn349) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn349.r, odriverConn349.setup, param0)
}
func (odriverConn349 *tdriverConn349) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn349.r, odriverConn349.setup, query, args)
}
func (odriverConn349 *tdriverConn349) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn349.r, odriverConn349.setup, ctx, query, args)
}

func (odriverConn350 *tdriverConn350) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn350.r, odriverConn350.setup)
}
func (odriverConn350 *tdriverConn350) Close() error {
	return traceDCClose(odriverConn350.r, odriverConn350.setup)
}
func (odriverConn350 *tdriverConn350) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn350.r, odriverConn350.setup, query)
}
func (odriverConn350 *tdriverConn350) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn350.r, odriverConn350.setup, ctx, query)
}
func (odriverConn350 *tdriverConn350) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn350.r, odriverConn350.setup, ctx, query, args)
}
func (odriverConn350 *tdriverConn350) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn350.r, odriverConn350.setup, param0)
}
func (odriverConn350 *tdriverConn350) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn350.r, odriverConn350.setup, query, args)
}
func (odriverConn350 *tdriverConn350) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn350.r, odriverConn350.setup, ctx)
}

func (odriverConn351 *tdriverConn351) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn351.r, odriverConn351.setup)
}
func (odriverConn351 *tdriverConn351) Close() error {
	return traceDCClose(odriverConn351.r, odriverConn351.setup)
}
func (odriverConn351 *tdriverConn351) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn351.r, odriverConn351.setup, query)
}
func (odriverConn351 *tdriverConn351) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn351.r, odriverConn351.setup, ctx, query)
}
func (odriverConn351 *tdriverConn351) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn351.r, odriverConn351.setup, ctx, query, args)
}
func (odriverConn351 *tdriverConn351) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn351.r, odriverConn351.setup, param0)
}
func (odriverConn351 *tdriverConn351) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn351.r, odriverConn351.setup, ctx, query, args)
}
func (odriverConn351 *tdriverConn351) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn351.r, odriverConn351.setup, ctx)
}

func (odriverConn352 *tdriverConn352) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn352.r, odriverConn352.setup)
}
func (odriverConn352 *tdriverConn352) Close() error {
	return traceDCClose(odriverConn352.r, odriverConn352.setup)
}
func (odriverConn352 *tdriverConn352) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn352.r, odriverConn352.setup, query)
}
func (odriverConn352 *tdriverConn352) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn352.r, odriverConn352.setup, ctx, query)
}
func (odriverConn352 *tdriverConn352) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn352.r, odriverConn352.setup, ctx, query, args)
}
func (odriverConn352 *tdriverConn352) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn352.r, odriverConn352.setup, ctx)
}
func (odriverConn352 *tdriverConn352) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn352.r, odriverConn352.setup, query, args)
}
func (odriverConn352 *tdriverConn352) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn352.r, odriverConn352.setup, ctx, query, args)
}

func (odriverConn353 *tdriverConn353) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn353.r, odriverConn353.setup)
}
func (odriverConn353 *tdriverConn353) Close() error {
	return traceDCClose(odriverConn353.r, odriverConn353.setup)
}
func (odriverConn353 *tdriverConn353) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn353.r, odriverConn353.setup, query)
}
func (odriverConn353 *tdriverConn353) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn353.r, odriverConn353.setup, ctx, query)
}
func (odriverConn353 *tdriverConn353) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn353.r, odriverConn353.setup, ctx, query, args)
}
func (odriverConn353 *tdriverConn353) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn353.r, odriverConn353.setup, ctx)
}
func (odriverConn353 *tdriverConn353) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn353.r, odriverConn353.setup, query, args)
}
func (odriverConn353 *tdriverConn353) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn353.r, odriverConn353.setup, ctx)
}

func (odriverConn354 *tdriverConn354) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn354.r, odriverConn354.setup)
}
func (odriverConn354 *tdriverConn354) Close() error {
	return traceDCClose(odriverConn354.r, odriverConn354.setup)
}
func (odriverConn354 *tdriverConn354) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn354.r, odriverConn354.setup, query)
}
func (odriverConn354 *tdriverConn354) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn354.r, odriverConn354.setup, ctx, query)
}
func (odriverConn354 *tdriverConn354) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn354.r, odriverConn354.setup, ctx, query, args)
}
func (odriverConn354 *tdriverConn354) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn354.r, odriverConn354.setup, ctx)
}
func (odriverConn354 *tdriverConn354) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn354.r, odriverConn354.setup, ctx, query, args)
}
func (odriverConn354 *tdriverConn354) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn354.r, odriverConn354.setup, ctx)
}

func (odriverConn355 *tdriverConn355) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn355.r, odriverConn355.setup)
}
func (odriverConn355 *tdriverConn355) Close() error {
	return traceDCClose(odriverConn355.r, odriverConn355.setup)
}
func (odriverConn355 *tdriverConn355) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn355.r, odriverConn355.setup, query)
}
func (odriverConn355 *tdriverConn355) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn355.r, odriverConn355.setup, ctx, query)
}
func (odriverConn355 *tdriverConn355) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn355.r, odriverConn355.setup, ctx, query, args)
}
func (odriverConn355 *tdriverConn355) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn355.r, odriverConn355.setup, query, args)
}
func (odriverConn355 *tdriverConn355) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn355.r, odriverConn355.setup, ctx, query, args)
}
func (odriverConn355 *tdriverConn355) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn355.r, odriverConn355.setup, ctx)
}

func (odriverConn356 *tdriverConn356) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn356.r, odriverConn356.setup)
}
func (odriverConn356 *tdriverConn356) Close() error {
	return traceDCClose(odriverConn356.r, odriverConn356.setup)
}
func (odriverConn356 *tdriverConn356) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn356.r, odriverConn356.setup, query)
}
func (odriverConn356 *tdriverConn356) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn356.r, odriverConn356.setup, ctx, query)
}
func (odriverConn356 *tdriverConn356) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn356.r, odriverConn356.setup, param0)
}
func (odriverConn356 *tdriverConn356) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn356.r, odriverConn356.setup, ctx)
}
func (odriverConn356 *tdriverConn356) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn356.r, odriverConn356.setup, query, args)
}
func (odriverConn356 *tdriverConn356) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn356.r, odriverConn356.setup, ctx, query, args)
}

func (odriverConn357 *tdriverConn357) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn357.r, odriverConn357.setup)
}
func (odriverConn357 *tdriverConn357) Close() error {
	return traceDCClose(odriverConn357.r, odriverConn357.setup)
}
func (odriverConn357 *tdriverConn357) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn357.r, odriverConn357.setup, query)
}
func (odriverConn357 *tdriverConn357) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn357.r, odriverConn357.setup, ctx, query)
}
func (odriverConn357 *tdriverConn357) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn357.r, odriverConn357.setup, param0)
}
func (odriverConn357 *tdriverConn357) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn357.r, odriverConn357.setup, ctx)
}
func (odriverConn357 *tdriverConn357) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn357.r, odriverConn357.setup, query, args)
}
func (odriverConn357 *tdriverConn357) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn357.r, odriverConn357.setup, ctx)
}

func (odriverConn358 *tdriverConn358) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn358.r, odriverConn358.setup)
}
func (odriverConn358 *tdriverConn358) Close() error {
	return traceDCClose(odriverConn358.r, odriverConn358.setup)
}
func (odriverConn358 *tdriverConn358) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn358.r, odriverConn358.setup, query)
}
func (odriverConn358 *tdriverConn358) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn358.r, odriverConn358.setup, ctx, query)
}
func (odriverConn358 *tdriverConn358) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn358.r, odriverConn358.setup, param0)
}
func (odriverConn358 *tdriverConn358) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn358.r, odriverConn358.setup, ctx)
}
func (odriverConn358 *tdriverConn358) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn358.r, odriverConn358.setup, ctx, query, args)
}
func (odriverConn358 *tdriverConn358) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn358.r, odriverConn358.setup, ctx)
}

func (odriverConn359 *tdriverConn359) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn359.r, odriverConn359.setup)
}
func (odriverConn359 *tdriverConn359) Close() error {
	return traceDCClose(odriverConn359.r, odriverConn359.setup)
}
func (odriverConn359 *tdriverConn359) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn359.r, odriverConn359.setup, query)
}
func (odriverConn359 *tdriverConn359) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn359.r, odriverConn359.setup, ctx, query)
}
func (odriverConn359 *tdriverConn359) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn359.r, odriverConn359.setup, param0)
}
func (odriverConn359 *tdriverConn359) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn359.r, odriverConn359.setup, query, args)
}
func (odriverConn359 *tdriverConn359) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn359.r, odriverConn359.setup, ctx, query, args)
}
func (odriverConn359 *tdriverConn359) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn359.r, odriverConn359.setup, ctx)
}

func (odriverConn360 *tdriverConn360) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn360.r, odriverConn360.setup)
}
func (odriverConn360 *tdriverConn360) Close() error {
	return traceDCClose(odriverConn360.r, odriverConn360.setup)
}
func (odriverConn360 *tdriverConn360) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn360.r, odriverConn360.setup, query)
}
func (odriverConn360 *tdriverConn360) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn360.r, odriverConn360.setup, ctx, query)
}
func (odriverConn360 *tdriverConn360) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn360.r, odriverConn360.setup, ctx)
}
func (odriverConn360 *tdriverConn360) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn360.r, odriverConn360.setup, query, args)
}
func (odriverConn360 *tdriverConn360) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn360.r, odriverConn360.setup, ctx, query, args)
}
func (odriverConn360 *tdriverConn360) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn360.r, odriverConn360.setup, ctx)
}

func (odriverConn361 *tdriverConn361) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn361.r, odriverConn361.setup)
}
func (odriverConn361 *tdriverConn361) Close() error {
	return traceDCClose(odriverConn361.r, odriverConn361.setup)
}
func (odriverConn361 *tdriverConn361) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn361.r, odriverConn361.setup, query)
}
func (odriverConn361 *tdriverConn361) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn361.r, odriverConn361.setup, query, args)
}
func (odriverConn361 *tdriverConn361) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn361.r, odriverConn361.setup, ctx, query, args)
}
func (odriverConn361 *tdriverConn361) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn361.r, odriverConn361.setup, param0)
}
func (odriverConn361 *tdriverConn361) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn361.r, odriverConn361.setup, ctx)
}
func (odriverConn361 *tdriverConn361) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn361.r, odriverConn361.setup, query, args)
}

func (odriverConn362 *tdriverConn362) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn362.r, odriverConn362.setup)
}
func (odriverConn362 *tdriverConn362) Close() error {
	return traceDCClose(odriverConn362.r, odriverConn362.setup)
}
func (odriverConn362 *tdriverConn362) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn362.r, odriverConn362.setup, query)
}
func (odriverConn362 *tdriverConn362) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn362.r, odriverConn362.setup, query, args)
}
func (odriverConn362 *tdriverConn362) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn362.r, odriverConn362.setup, ctx, query, args)
}
func (odriverConn362 *tdriverConn362) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn362.r, odriverConn362.setup, param0)
}
func (odriverConn362 *tdriverConn362) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn362.r, odriverConn362.setup, ctx)
}
func (odriverConn362 *tdriverConn362) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn362.r, odriverConn362.setup, ctx, query, args)
}

func (odriverConn363 *tdriverConn363) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn363.r, odriverConn363.setup)
}
func (odriverConn363 *tdriverConn363) Close() error {
	return traceDCClose(odriverConn363.r, odriverConn363.setup)
}
func (odriverConn363 *tdriverConn363) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn363.r, odriverConn363.setup, query)
}
func (odriverConn363 *tdriverConn363) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn363.r, odriverConn363.setup, query, args)
}
func (odriverConn363 *tdriverConn363) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn363.r, odriverConn363.setup, ctx, query, args)
}
func (odriverConn363 *tdriverConn363) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn363.r, odriverConn363.setup, param0)
}
func (odriverConn363 *tdriverConn363) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn363.r, odriverConn363.setup, ctx)
}
func (odriverConn363 *tdriverConn363) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn363.r, odriverConn363.setup, ctx)
}

func (odriverConn364 *tdriverConn364) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn364.r, odriverConn364.setup)
}
func (odriverConn364 *tdriverConn364) Close() error {
	return traceDCClose(odriverConn364.r, odriverConn364.setup)
}
func (odriverConn364 *tdriverConn364) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn364.r, odriverConn364.setup, query)
}
func (odriverConn364 *tdriverConn364) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn364.r, odriverConn364.setup, query, args)
}
func (odriverConn364 *tdriverConn364) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn364.r, odriverConn364.setup, ctx, query, args)
}
func (odriverConn364 *tdriverConn364) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn364.r, odriverConn364.setup, param0)
}
func (odriverConn364 *tdriverConn364) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn364.r, odriverConn364.setup, query, args)
}
func (odriverConn364 *tdriverConn364) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn364.r, odriverConn364.setup, ctx, query, args)
}

func (odriverConn365 *tdriverConn365) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn365.r, odriverConn365.setup)
}
func (odriverConn365 *tdriverConn365) Close() error {
	return traceDCClose(odriverConn365.r, odriverConn365.setup)
}
func (odriverConn365 *tdriverConn365) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn365.r, odriverConn365.setup, query)
}
func (odriverConn365 *tdriverConn365) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn365.r, odriverConn365.setup, query, args)
}
func (odriverConn365 *tdriverConn365) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn365.r, odriverConn365.setup, ctx, query, args)
}
func (odriverConn365 *tdriverConn365) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn365.r, odriverConn365.setup, param0)
}
func (odriverConn365 *tdriverConn365) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn365.r, odriverConn365.setup, query, args)
}
func (odriverConn365 *tdriverConn365) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn365.r, odriverConn365.setup, ctx)
}

func (odriverConn366 *tdriverConn366) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn366.r, odriverConn366.setup)
}
func (odriverConn366 *tdriverConn366) Close() error {
	return traceDCClose(odriverConn366.r, odriverConn366.setup)
}
func (odriverConn366 *tdriverConn366) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn366.r, odriverConn366.setup, query)
}
func (odriverConn366 *tdriverConn366) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn366.r, odriverConn366.setup, query, args)
}
func (odriverConn366 *tdriverConn366) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn366.r, odriverConn366.setup, ctx, query, args)
}
func (odriverConn366 *tdriverConn366) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn366.r, odriverConn366.setup, param0)
}
func (odriverConn366 *tdriverConn366) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn366.r, odriverConn366.setup, ctx, query, args)
}
func (odriverConn366 *tdriverConn366) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn366.r, odriverConn366.setup, ctx)
}

func (odriverConn367 *tdriverConn367) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn367.r, odriverConn367.setup)
}
func (odriverConn367 *tdriverConn367) Close() error {
	return traceDCClose(odriverConn367.r, odriverConn367.setup)
}
func (odriverConn367 *tdriverConn367) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn367.r, odriverConn367.setup, query)
}
func (odriverConn367 *tdriverConn367) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn367.r, odriverConn367.setup, query, args)
}
func (odriverConn367 *tdriverConn367) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn367.r, odriverConn367.setup, ctx, query, args)
}
func (odriverConn367 *tdriverConn367) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn367.r, odriverConn367.setup, ctx)
}
func (odriverConn367 *tdriverConn367) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn367.r, odriverConn367.setup, query, args)
}
func (odriverConn367 *tdriverConn367) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn367.r, odriverConn367.setup, ctx, query, args)
}

func (odriverConn368 *tdriverConn368) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn368.r, odriverConn368.setup)
}
func (odriverConn368 *tdriverConn368) Close() error {
	return traceDCClose(odriverConn368.r, odriverConn368.setup)
}
func (odriverConn368 *tdriverConn368) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn368.r, odriverConn368.setup, query)
}
func (odriverConn368 *tdriverConn368) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn368.r, odriverConn368.setup, query, args)
}
func (odriverConn368 *tdriverConn368) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn368.r, odriverConn368.setup, ctx, query, args)
}
func (odriverConn368 *tdriverConn368) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn368.r, odriverConn368.setup, ctx)
}
func (odriverConn368 *tdriverConn368) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn368.r, odriverConn368.setup, query, args)
}
func (odriverConn368 *tdriverConn368) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn368.r, odriverConn368.setup, ctx)
}

func (odriverConn369 *tdriverConn369) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn369.r, odriverConn369.setup)
}
func (odriverConn369 *tdriverConn369) Close() error {
	return traceDCClose(odriverConn369.r, odriverConn369.setup)
}
func (odriverConn369 *tdriverConn369) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn369.r, odriverConn369.setup, query)
}
func (odriverConn369 *tdriverConn369) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn369.r, odriverConn369.setup, query, args)
}
func (odriverConn369 *tdriverConn369) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn369.r, odriverConn369.setup, ctx, query, args)
}
func (odriverConn369 *tdriverConn369) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn369.r, odriverConn369.setup, ctx)
}
func (odriverConn369 *tdriverConn369) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn369.r, odriverConn369.setup, ctx, query, args)
}
func (odriverConn369 *tdriverConn369) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn369.r, odriverConn369.setup, ctx)
}

func (odriverConn370 *tdriverConn370) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn370.r, odriverConn370.setup)
}
func (odriverConn370 *tdriverConn370) Close() error {
	return traceDCClose(odriverConn370.r, odriverConn370.setup)
}
func (odriverConn370 *tdriverConn370) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn370.r, odriverConn370.setup, query)
}
func (odriverConn370 *tdriverConn370) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn370.r, odriverConn370.setup, query, args)
}
func (odriverConn370 *tdriverConn370) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn370.r, odriverConn370.setup, ctx, query, args)
}
func (odriverConn370 *tdriverConn370) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn370.r, odriverConn370.setup, query, args)
}
func (odriverConn370 *tdriverConn370) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn370.r, odriverConn370.setup, ctx, query, args)
}
func (odriverConn370 *tdriverConn370) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn370.r, odriverConn370.setup, ctx)
}

func (odriverConn371 *tdriverConn371) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn371.r, odriverConn371.setup)
}
func (odriverConn371 *tdriverConn371) Close() error {
	return traceDCClose(odriverConn371.r, odriverConn371.setup)
}
func (odriverConn371 *tdriverConn371) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn371.r, odriverConn371.setup, query)
}
func (odriverConn371 *tdriverConn371) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn371.r, odriverConn371.setup, query, args)
}
func (odriverConn371 *tdriverConn371) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn371.r, odriverConn371.setup, param0)
}
func (odriverConn371 *tdriverConn371) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn371.r, odriverConn371.setup, ctx)
}
func (odriverConn371 *tdriverConn371) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn371.r, odriverConn371.setup, query, args)
}
func (odriverConn371 *tdriverConn371) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn371.r, odriverConn371.setup, ctx, query, args)
}

func (odriverConn372 *tdriverConn372) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn372.r, odriverConn372.setup)
}
func (odriverConn372 *tdriverConn372) Close() error {
	return traceDCClose(odriverConn372.r, odriverConn372.setup)
}
func (odriverConn372 *tdriverConn372) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn372.r, odriverConn372.setup, query)
}
func (odriverConn372 *tdriverConn372) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn372.r, odriverConn372.setup, query, args)
}
func (odriverConn372 *tdriverConn372) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn372.r, odriverConn372.setup, param0)
}
func (odriverConn372 *tdriverConn372) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn372.r, odriverConn372.setup, ctx)
}
func (odriverConn372 *tdriverConn372) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn372.r, odriverConn372.setup, query, args)
}
func (odriverConn372 *tdriverConn372) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn372.r, odriverConn372.setup, ctx)
}

func (odriverConn373 *tdriverConn373) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn373.r, odriverConn373.setup)
}
func (odriverConn373 *tdriverConn373) Close() error {
	return traceDCClose(odriverConn373.r, odriverConn373.setup)
}
func (odriverConn373 *tdriverConn373) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn373.r, odriverConn373.setup, query)
}
func (odriverConn373 *tdriverConn373) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn373.r, odriverConn373.setup, query, args)
}
func (odriverConn373 *tdriverConn373) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn373.r, odriverConn373.setup, param0)
}
func (odriverConn373 *tdriverConn373) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn373.r, odriverConn373.setup, ctx)
}
func (odriverConn373 *tdriverConn373) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn373.r, odriverConn373.setup, ctx, query, args)
}
func (odriverConn373 *tdriverConn373) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn373.r, odriverConn373.setup, ctx)
}

func (odriverConn374 *tdriverConn374) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn374.r, odriverConn374.setup)
}
func (odriverConn374 *tdriverConn374) Close() error {
	return traceDCClose(odriverConn374.r, odriverConn374.setup)
}
func (odriverConn374 *tdriverConn374) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn374.r, odriverConn374.setup, query)
}
func (odriverConn374 *tdriverConn374) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn374.r, odriverConn374.setup, query, args)
}
func (odriverConn374 *tdriverConn374) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn374.r, odriverConn374.setup, param0)
}
func (odriverConn374 *tdriverConn374) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn374.r, odriverConn374.setup, query, args)
}
func (odriverConn374 *tdriverConn374) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn374.r, odriverConn374.setup, ctx, query, args)
}
func (odriverConn374 *tdriverConn374) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn374.r, odriverConn374.setup, ctx)
}

func (odriverConn375 *tdriverConn375) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn375.r, odriverConn375.setup)
}
func (odriverConn375 *tdriverConn375) Close() error {
	return traceDCClose(odriverConn375.r, odriverConn375.setup)
}
func (odriverConn375 *tdriverConn375) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn375.r, odriverConn375.setup, query)
}
func (odriverConn375 *tdriverConn375) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn375.r, odriverConn375.setup, query, args)
}
func (odriverConn375 *tdriverConn375) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn375.r, odriverConn375.setup, ctx)
}
func (odriverConn375 *tdriverConn375) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn375.r, odriverConn375.setup, query, args)
}
func (odriverConn375 *tdriverConn375) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn375.r, odriverConn375.setup, ctx, query, args)
}
func (odriverConn375 *tdriverConn375) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn375.r, odriverConn375.setup, ctx)
}

func (odriverConn376 *tdriverConn376) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn376.r, odriverConn376.setup)
}
func (odriverConn376 *tdriverConn376) Close() error {
	return traceDCClose(odriverConn376.r, odriverConn376.setup)
}
func (odriverConn376 *tdriverConn376) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn376.r, odriverConn376.setup, query)
}
func (odriverConn376 *tdriverConn376) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn376.r, odriverConn376.setup, ctx, query, args)
}
func (odriverConn376 *tdriverConn376) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn376.r, odriverConn376.setup, param0)
}
func (odriverConn376 *tdriverConn376) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn376.r, odriverConn376.setup, ctx)
}
func (odriverConn376 *tdriverConn376) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn376.r, odriverConn376.setup, query, args)
}
func (odriverConn376 *tdriverConn376) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn376.r, odriverConn376.setup, ctx, query, args)
}

func (odriverConn377 *tdriverConn377) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn377.r, odriverConn377.setup)
}
func (odriverConn377 *tdriverConn377) Close() error {
	return traceDCClose(odriverConn377.r, odriverConn377.setup)
}
func (odriverConn377 *tdriverConn377) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn377.r, odriverConn377.setup, query)
}
func (odriverConn377 *tdriverConn377) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn377.r, odriverConn377.setup, ctx, query, args)
}
func (odriverConn377 *tdriverConn377) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn377.r, odriverConn377.setup, param0)
}
func (odriverConn377 *tdriverConn377) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn377.r, odriverConn377.setup, ctx)
}
func (odriverConn377 *tdriverConn377) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn377.r, odriverConn377.setup, query, args)
}
func (odriverConn377 *tdriverConn377) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn377.r, odriverConn377.setup, ctx)
}

func (odriverConn378 *tdriverConn378) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn378.r, odriverConn378.setup)
}
func (odriverConn378 *tdriverConn378) Close() error {
	return traceDCClose(odriverConn378.r, odriverConn378.setup)
}
func (odriverConn378 *tdriverConn378) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn378.r, odriverConn378.setup, query)
}
func (odriverConn378 *tdriverConn378) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn378.r, odriverConn378.setup, ctx, query, args)
}
func (odriverConn378 *tdriverConn378) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn378.r, odriverConn378.setup, param0)
}
func (odriverConn378 *tdriverConn378) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn378.r, odriverConn378.setup, ctx)
}
func (odriverConn378 *tdriverConn378) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn378.r, odriverConn378.setup, ctx, query, args)
}
func (odriverConn378 *tdriverConn378) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn378.r, odriverConn378.setup, ctx)
}

func (odriverConn379 *tdriverConn379) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn379.r, odriverConn379.setup)
}
func (odriverConn379 *tdriverConn379) Close() error {
	return traceDCClose(odriverConn379.r, odriverConn379.setup)
}
func (odriverConn379 *tdriverConn379) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn379.r, odriverConn379.setup, query)
}
func (odriverConn379 *tdriverConn379) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn379.r, odriverConn379.setup, ctx, query, args)
}
func (odriverConn379 *tdriverConn379) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn379.r, odriverConn379.setup, param0)
}
func (odriverConn379 *tdriverConn379) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn379.r, odriverConn379.setup, query, args)
}
func (odriverConn379 *tdriverConn379) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn379.r, odriverConn379.setup, ctx, query, args)
}
func (odriverConn379 *tdriverConn379) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn379.r, odriverConn379.setup, ctx)
}

func (odriverConn380 *tdriverConn380) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn380.r, odriverConn380.setup)
}
func (odriverConn380 *tdriverConn380) Close() error {
	return traceDCClose(odriverConn380.r, odriverConn380.setup)
}
func (odriverConn380 *tdriverConn380) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn380.r, odriverConn380.setup, query)
}
func (odriverConn380 *tdriverConn380) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn380.r, odriverConn380.setup, ctx, query, args)
}
func (odriverConn380 *tdriverConn380) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn380.r, odriverConn380.setup, ctx)
}
func (odriverConn380 *tdriverConn380) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn380.r, odriverConn380.setup, query, args)
}
func (odriverConn380 *tdriverConn380) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn380.r, odriverConn380.setup, ctx, query, args)
}
func (odriverConn380 *tdriverConn380) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn380.r, odriverConn380.setup, ctx)
}

func (odriverConn381 *tdriverConn381) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn381.r, odriverConn381.setup)
}
func (odriverConn381 *tdriverConn381) Close() error {
	return traceDCClose(odriverConn381.r, odriverConn381.setup)
}
func (odriverConn381 *tdriverConn381) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn381.r, odriverConn381.setup, query)
}
func (odriverConn381 *tdriverConn381) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn381.r, odriverConn381.setup, param0)
}
func (odriverConn381 *tdriverConn381) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn381.r, odriverConn381.setup, ctx)
}
func (odriverConn381 *tdriverConn381) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn381.r, odriverConn381.setup, query, args)
}
func (odriverConn381 *tdriverConn381) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn381.r, odriverConn381.setup, ctx, query, args)
}
func (odriverConn381 *tdriverConn381) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn381.r, odriverConn381.setup, ctx)
}

func (odriverConn382 *tdriverConn382) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn382.r, odriverConn382.setup)
}
func (odriverConn382 *tdriverConn382) Close() error {
	return traceDCClose(odriverConn382.r, odriverConn382.setup)
}
func (odriverConn382 *tdriverConn382) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn382.r, odriverConn382.setup, query)
}
func (odriverConn382 *tdriverConn382) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn382.r, odriverConn382.setup, ctx, opts)
}
func (odriverConn382 *tdriverConn382) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn382.r, odriverConn382.setup, ctx, query)
}
func (odriverConn382 *tdriverConn382) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn382.r, odriverConn382.setup, query, args)
}
func (odriverConn382 *tdriverConn382) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn382.r, odriverConn382.setup, ctx, query, args)
}
func (odriverConn382 *tdriverConn382) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn382.r, odriverConn382.setup, param0)
}
func (odriverConn382 *tdriverConn382) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn382.r, odriverConn382.setup, ctx)
}

func (odriverConn383 *tdriverConn383) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn383.r, odriverConn383.setup)
}
func (odriverConn383 *tdriverConn383) Close() error {
	return traceDCClose(odriverConn383.r, odriverConn383.setup)
}
func (odriverConn383 *tdriverConn383) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn383.r, odriverConn383.setup, query)
}
func (odriverConn383 *tdriverConn383) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn383.r, odriverConn383.setup, ctx, opts)
}
func (odriverConn383 *tdriverConn383) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn383.r, odriverConn383.setup, ctx, query)
}
func (odriverConn383 *tdriverConn383) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn383.r, odriverConn383.setup, query, args)
}
func (odriverConn383 *tdriverConn383) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn383.r, odriverConn383.setup, ctx, query, args)
}
func (odriverConn383 *tdriverConn383) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn383.r, odriverConn383.setup, param0)
}
func (odriverConn383 *tdriverConn383) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn383.r, odriverConn383.setup, query, args)
}

func (odriverConn384 *tdriverConn384) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn384.r, odriverConn384.setup)
}
func (odriverConn384 *tdriverConn384) Close() error {
	return traceDCClose(odriverConn384.r, odriverConn384.setup)
}
func (odriverConn384 *tdriverConn384) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn384.r, odriverConn384.setup, query)
}
func (odriverConn384 *tdriverConn384) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn384.r, odriverConn384.setup, ctx, opts)
}
func (odriverConn384 *tdriverConn384) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn384.r, odriverConn384.setup, ctx, query)
}
func (odriverConn384 *tdriverConn384) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn384.r, odriverConn384.setup, query, args)
}
func (odriverConn384 *tdriverConn384) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn384.r, odriverConn384.setup, ctx, query, args)
}
func (odriverConn384 *tdriverConn384) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn384.r, odriverConn384.setup, param0)
}
func (odriverConn384 *tdriverConn384) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn384.r, odriverConn384.setup, ctx, query, args)
}

func (odriverConn385 *tdriverConn385) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn385.r, odriverConn385.setup)
}
func (odriverConn385 *tdriverConn385) Close() error {
	return traceDCClose(odriverConn385.r, odriverConn385.setup)
}
func (odriverConn385 *tdriverConn385) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn385.r, odriverConn385.setup, query)
}
func (odriverConn385 *tdriverConn385) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn385.r, odriverConn385.setup, ctx, opts)
}
func (odriverConn385 *tdriverConn385) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn385.r, odriverConn385.setup, ctx, query)
}
func (odriverConn385 *tdriverConn385) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn385.r, odriverConn385.setup, query, args)
}
func (odriverConn385 *tdriverConn385) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn385.r, odriverConn385.setup, ctx, query, args)
}
func (odriverConn385 *tdriverConn385) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn385.r, odriverConn385.setup, param0)
}
func (odriverConn385 *tdriverConn385) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn385.r, odriverConn385.setup, ctx)
}

func (odriverConn386 *tdriverConn386) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn386.r, odriverConn386.setup)
}
func (odriverConn386 *tdriverConn386) Close() error {
	return traceDCClose(odriverConn386.r, odriverConn386.setup)
}
func (odriverConn386 *tdriverConn386) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn386.r, odriverConn386.setup, query)
}
func (odriverConn386 *tdriverConn386) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn386.r, odriverConn386.setup, ctx, opts)
}
func (odriverConn386 *tdriverConn386) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn386.r, odriverConn386.setup, ctx, query)
}
func (odriverConn386 *tdriverConn386) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn386.r, odriverConn386.setup, query, args)
}
func (odriverConn386 *tdriverConn386) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn386.r, odriverConn386.setup, ctx, query, args)
}
func (odriverConn386 *tdriverConn386) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn386.r, odriverConn386.setup, ctx)
}
func (odriverConn386 *tdriverConn386) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn386.r, odriverConn386.setup, query, args)
}

func (odriverConn387 *tdriverConn387) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn387.r, odriverConn387.setup)
}
func (odriverConn387 *tdriverConn387) Close() error {
	return traceDCClose(odriverConn387.r, odriverConn387.setup)
}
func (odriverConn387 *tdriverConn387) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn387.r, odriverConn387.setup, query)
}
func (odriverConn387 *tdriverConn387) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn387.r, odriverConn387.setup, ctx, opts)
}
func (odriverConn387 *tdriverConn387) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn387.r, odriverConn387.setup, ctx, query)
}
func (odriverConn387 *tdriverConn387) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn387.r, odriverConn387.setup, query, args)
}
func (odriverConn387 *tdriverConn387) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn387.r, odriverConn387.setup, ctx, query, args)
}
func (odriverConn387 *tdriverConn387) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn387.r, odriverConn387.setup, ctx)
}
func (odriverConn387 *tdriverConn387) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn387.r, odriverConn387.setup, ctx, query, args)
}

func (odriverConn388 *tdriverConn388) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn388.r, odriverConn388.setup)
}
func (odriverConn388 *tdriverConn388) Close() error {
	return traceDCClose(odriverConn388.r, odriverConn388.setup)
}
func (odriverConn388 *tdriverConn388) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn388.r, odriverConn388.setup, query)
}
func (odriverConn388 *tdriverConn388) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn388.r, odriverConn388.setup, ctx, opts)
}
func (odriverConn388 *tdriverConn388) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn388.r, odriverConn388.setup, ctx, query)
}
func (odriverConn388 *tdriverConn388) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn388.r, odriverConn388.setup, query, args)
}
func (odriverConn388 *tdriverConn388) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn388.r, odriverConn388.setup, ctx, query, args)
}
func (odriverConn388 *tdriverConn388) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn388.r, odriverConn388.setup, ctx)
}
func (odriverConn388 *tdriverConn388) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn388.r, odriverConn388.setup, ctx)
}

func (odriverConn389 *tdriverConn389) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn389.r, odriverConn389.setup)
}
func (odriverConn389 *tdriverConn389) Close() error {
	return traceDCClose(odriverConn389.r, odriverConn389.setup)
}
func (odriverConn389 *tdriverConn389) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn389.r, odriverConn389.setup, query)
}
func (odriverConn389 *tdriverConn389) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn389.r, odriverConn389.setup, ctx, opts)
}
func (odriverConn389 *tdriverConn389) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn389.r, odriverConn389.setup, ctx, query)
}
func (odriverConn389 *tdriverConn389) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn389.r, odriverConn389.setup, query, args)
}
func (odriverConn389 *tdriverConn389) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn389.r, odriverConn389.setup, ctx, query, args)
}
func (odriverConn389 *tdriverConn389) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn389.r, odriverConn389.setup, query, args)
}
func (odriverConn389 *tdriverConn389) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn389.r, odriverConn389.setup, ctx, query, args)
}

func (odriverConn390 *tdriverConn390) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn390.r, odriverConn390.setup)
}
func (odriverConn390 *tdriverConn390) Close() error {
	return traceDCClose(odriverConn390.r, odriverConn390.setup)
}
func (odriverConn390 *tdriverConn390) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn390.r, odriverConn390.setup, query)
}
func (odriverConn390 *tdriverConn390) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn390.r, odriverConn390.setup, ctx, opts)
}
func (odriverConn390 *tdriverConn390) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn390.r, odriverConn390.setup, ctx, query)
}
func (odriverConn390 *tdriverConn390) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn390.r, odriverConn390.setup, query, args)
}
func (odriverConn390 *tdriverConn390) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn390.r, odriverConn390.setup, ctx, query, args)
}
func (odriverConn390 *tdriverConn390) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn390.r, odriverConn390.setup, query, args)
}
func (odriverConn390 *tdriverConn390) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn390.r, odriverConn390.setup, ctx)
}

func (odriverConn391 *tdriverConn391) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn391.r, odriverConn391.setup)
}
func (odriverConn391 *tdriverConn391) Close() error {
	return traceDCClose(odriverConn391.r, odriverConn391.setup)
}
func (odriverConn391 *tdriverConn391) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn391.r, odriverConn391.setup, query)
}
func (odriverConn391 *tdriverConn391) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn391.r, odriverConn391.setup, ctx, opts)
}
func (odriverConn391 *tdriverConn391) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn391.r, odriverConn391.setup, ctx, query)
}
func (odriverConn391 *tdriverConn391) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn391.r, odriverConn391.setup, query, args)
}
func (odriverConn391 *tdriverConn391) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn391.r, odriverConn391.setup, ctx, query, args)
}
func (odriverConn391 *tdriverConn391) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn391.r, odriverConn391.setup, ctx, query, args)
}
func (odriverConn391 *tdriverConn391) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn391.r, odriverConn391.setup, ctx)
}

func (odriverConn392 *tdriverConn392) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn392.r, odriverConn392.setup)
}
func (odriverConn392 *tdriverConn392) Close() error {
	return traceDCClose(odriverConn392.r, odriverConn392.setup)
}
func (odriverConn392 *tdriverConn392) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn392.r, odriverConn392.setup, query)
}
func (odriverConn392 *tdriverConn392) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn392.r, odriverConn392.setup, ctx, opts)
}
func (odriverConn392 *tdriverConn392) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn392.r, odriverConn392.setup, ctx, query)
}
func (odriverConn392 *tdriverConn392) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn392.r, odriverConn392.setup, query, args)
}
func (odriverConn392 *tdriverConn392) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn392.r, odriverConn392.setup, param0)
}
func (odriverConn392 *tdriverConn392) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn392.r, odriverConn392.setup, ctx)
}
func (odriverConn392 *tdriverConn392) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn392.r, odriverConn392.setup, query, args)
}

func (odriverConn393 *tdriverConn393) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn393.r, odriverConn393.setup)
}
func (odriverConn393 *tdriverConn393) Close() error {
	return traceDCClose(odriverConn393.r, odriverConn393.setup)
}
func (odriverConn393 *tdriverConn393) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn393.r, odriverConn393.setup, query)
}
func (odriverConn393 *tdriverConn393) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn393.r, odriverConn393.setup, ctx, opts)
}
func (odriverConn393 *tdriverConn393) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn393.r, odriverConn393.setup, ctx, query)
}
func (odriverConn393 *tdriverConn393) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn393.r, odriverConn393.setup, query, args)
}
func (odriverConn393 *tdriverConn393) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn393.r, odriverConn393.setup, param0)
}
func (odriverConn393 *tdriverConn393) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn393.r, odriverConn393.setup, ctx)
}
func (odriverConn393 *tdriverConn393) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn393.r, odriverConn393.setup, ctx, query, args)
}

func (odriverConn394 *tdriverConn394) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn394.r, odriverConn394.setup)
}
func (odriverConn394 *tdriverConn394) Close() error {
	return traceDCClose(odriverConn394.r, odriverConn394.setup)
}
func (odriverConn394 *tdriverConn394) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn394.r, odriverConn394.setup, query)
}
func (odriverConn394 *tdriverConn394) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn394.r, odriverConn394.setup, ctx, opts)
}
func (odriverConn394 *tdriverConn394) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn394.r, odriverConn394.setup, ctx, query)
}
func (odriverConn394 *tdriverConn394) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn394.r, odriverConn394.setup, query, args)
}
func (odriverConn394 *tdriverConn394) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn394.r, odriverConn394.setup, param0)
}
func (odriverConn394 *tdriverConn394) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn394.r, odriverConn394.setup, ctx)
}
func (odriverConn394 *tdriverConn394) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn394.r, odriverConn394.setup, ctx)
}

func (odriverConn395 *tdriverConn395) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn395.r, odriverConn395.setup)
}
func (odriverConn395 *tdriverConn395) Close() error {
	return traceDCClose(odriverConn395.r, odriverConn395.setup)
}
func (odriverConn395 *tdriverConn395) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn395.r, odriverConn395.setup, query)
}
func (odriverConn395 *tdriverConn395) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn395.r, odriverConn395.setup, ctx, opts)
}
func (odriverConn395 *tdriverConn395) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn395.r, odriverConn395.setup, ctx, query)
}
func (odriverConn395 *tdriverConn395) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn395.r, odriverConn395.setup, query, args)
}
func (odriverConn395 *tdriverConn395) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn395.r, odriverConn395.setup, param0)
}
func (odriverConn395 *tdriverConn395) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn395.r, odriverConn395.setup, query, args)
}
func (odriverConn395 *tdriverConn395) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn395.r, odriverConn395.setup, ctx, query, args)
}

func (odriverConn396 *tdriverConn396) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn396.r, odriverConn396.setup)
}
func (odriverConn396 *tdriverConn396) Close() error {
	return traceDCClose(odriverConn396.r, odriverConn396.setup)
}
func (odriverConn396 *tdriverConn396) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn396.r, odriverConn396.setup, query)
}
func (odriverConn396 *tdriverConn396) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn396.r, odriverConn396.setup, ctx, opts)
}
func (odriverConn396 *tdriverConn396) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn396.r, odriverConn396.setup, ctx, query)
}
func (odriverConn396 *tdriverConn396) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn396.r, odriverConn396.setup, query, args)
}
func (odriverConn396 *tdriverConn396) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn396.r, odriverConn396.setup, param0)
}
func (odriverConn396 *tdriverConn396) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn396.r, odriverConn396.setup, query, args)
}
func (odriverConn396 *tdriverConn396) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn396.r, odriverConn396.setup, ctx)
}

func (odriverConn397 *tdriverConn397) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn397.r, odriverConn397.setup)
}
func (odriverConn397 *tdriverConn397) Close() error {
	return traceDCClose(odriverConn397.r, odriverConn397.setup)
}
func (odriverConn397 *tdriverConn397) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn397.r, odriverConn397.setup, query)
}
func (odriverConn397 *tdriverConn397) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn397.r, odriverConn397.setup, ctx, opts)
}
func (odriverConn397 *tdriverConn397) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn397.r, odriverConn397.setup, ctx, query)
}
func (odriverConn397 *tdriverConn397) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn397.r, odriverConn397.setup, query, args)
}
func (odriverConn397 *tdriverConn397) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn397.r, odriverConn397.setup, param0)
}
func (odriverConn397 *tdriverConn397) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn397.r, odriverConn397.setup, ctx, query, args)
}
func (odriverConn397 *tdriverConn397) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn397.r, odriverConn397.setup, ctx)
}

func (odriverConn398 *tdriverConn398) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn398.r, odriverConn398.setup)
}
func (odriverConn398 *tdriverConn398) Close() error {
	return traceDCClose(odriverConn398.r, odriverConn398.setup)
}
func (odriverConn398 *tdriverConn398) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn398.r, odriverConn398.setup, query)
}
func (odriverConn398 *tdriverConn398) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn398.r, odriverConn398.setup, ctx, opts)
}
func (odriverConn398 *tdriverConn398) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn398.r, odriverConn398.setup, ctx, query)
}
func (odriverConn398 *tdriverConn398) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn398.r, odriverConn398.setup, query, args)
}
func (odriverConn398 *tdriverConn398) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn398.r, odriverConn398.setup, ctx)
}
func (odriverConn398 *tdriverConn398) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn398.r, odriverConn398.setup, query, args)
}
func (odriverConn398 *tdriverConn398) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn398.r, odriverConn398.setup, ctx, query, args)
}

func (odriverConn399 *tdriverConn399) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn399.r, odriverConn399.setup)
}
func (odriverConn399 *tdriverConn399) Close() error {
	return traceDCClose(odriverConn399.r, odriverConn399.setup)
}
func (odriverConn399 *tdriverConn399) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn399.r, odriverConn399.setup, query)
}
func (odriverConn399 *tdriverConn399) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn399.r, odriverConn399.setup, ctx, opts)
}
func (odriverConn399 *tdriverConn399) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn399.r, odriverConn399.setup, ctx, query)
}
func (odriverConn399 *tdriverConn399) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn399.r, odriverConn399.setup, query, args)
}
func (odriverConn399 *tdriverConn399) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn399.r, odriverConn399.setup, ctx)
}
func (odriverConn399 *tdriverConn399) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn399.r, odriverConn399.setup, query, args)
}
func (odriverConn399 *tdriverConn399) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn399.r, odriverConn399.setup, ctx)
}

func (odriverConn400 *tdriverConn400) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn400.r, odriverConn400.setup)
}
func (odriverConn400 *tdriverConn400) Close() error {
	return traceDCClose(odriverConn400.r, odriverConn400.setup)
}
func (odriverConn400 *tdriverConn400) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn400.r, odriverConn400.setup, query)
}
func (odriverConn400 *tdriverConn400) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn400.r, odriverConn400.setup, ctx, opts)
}
func (odriverConn400 *tdriverConn400) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn400.r, odriverConn400.setup, ctx, query)
}
func (odriverConn400 *tdriverConn400) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn400.r, odriverConn400.setup, query, args)
}
func (odriverConn400 *tdriverConn400) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn400.r, odriverConn400.setup, ctx)
}
func (odriverConn400 *tdriverConn400) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn400.r, odriverConn400.setup, ctx, query, args)
}
func (odriverConn400 *tdriverConn400) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn400.r, odriverConn400.setup, ctx)
}

func (odriverConn401 *tdriverConn401) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn401.r, odriverConn401.setup)
}
func (odriverConn401 *tdriverConn401) Close() error {
	return traceDCClose(odriverConn401.r, odriverConn401.setup)
}
func (odriverConn401 *tdriverConn401) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn401.r, odriverConn401.setup, query)
}
func (odriverConn401 *tdriverConn401) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn401.r, odriverConn401.setup, ctx, opts)
}
func (odriverConn401 *tdriverConn401) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn401.r, odriverConn401.setup, ctx, query)
}
func (odriverConn401 *tdriverConn401) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn401.r, odriverConn401.setup, query, args)
}
func (odriverConn401 *tdriverConn401) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn401.r, odriverConn401.setup, query, args)
}
func (odriverConn401 *tdriverConn401) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn401.r, odriverConn401.setup, ctx, query, args)
}
func (odriverConn401 *tdriverConn401) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn401.r, odriverConn401.setup, ctx)
}

func (odriverConn402 *tdriverConn402) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn402.r, odriverConn402.setup)
}
func (odriverConn402 *tdriverConn402) Close() error {
	return traceDCClose(odriverConn402.r, odriverConn402.setup)
}
func (odriverConn402 *tdriverConn402) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn402.r, odriverConn402.setup, query)
}
func (odriverConn402 *tdriverConn402) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn402.r, odriverConn402.setup, ctx, opts)
}
func (odriverConn402 *tdriverConn402) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn402.r, odriverConn402.setup, ctx, query)
}
func (odriverConn402 *tdriverConn402) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn402.r, odriverConn402.setup, ctx, query, args)
}
func (odriverConn402 *tdriverConn402) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn402.r, odriverConn402.setup, param0)
}
func (odriverConn402 *tdriverConn402) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn402.r, odriverConn402.setup, ctx)
}
func (odriverConn402 *tdriverConn402) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn402.r, odriverConn402.setup, query, args)
}

func (odriverConn403 *tdriverConn403) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn403.r, odriverConn403.setup)
}
func (odriverConn403 *tdriverConn403) Close() error {
	return traceDCClose(odriverConn403.r, odriverConn403.setup)
}
func (odriverConn403 *tdriverConn403) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn403.r, odriverConn403.setup, query)
}
func (odriverConn403 *tdriverConn403) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn403.r, odriverConn403.setup, ctx, opts)
}
func (odriverConn403 *tdriverConn403) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn403.r, odriverConn403.setup, ctx, query)
}
func (odriverConn403 *tdriverConn403) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn403.r, odriverConn403.setup, ctx, query, args)
}
func (odriverConn403 *tdriverConn403) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn403.r, odriverConn403.setup, param0)
}
func (odriverConn403 *tdriverConn403) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn403.r, odriverConn403.setup, ctx)
}
func (odriverConn403 *tdriverConn403) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn403.r, odriverConn403.setup, ctx, query, args)
}

func (odriverConn404 *tdriverConn404) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn404.r, odriverConn404.setup)
}
func (odriverConn404 *tdriverConn404) Close() error {
	return traceDCClose(odriverConn404.r, odriverConn404.setup)
}
func (odriverConn404 *tdriverConn404) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn404.r, odriverConn404.setup, query)
}
func (odriverConn404 *tdriverConn404) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn404.r, odriverConn404.setup, ctx, opts)
}
func (odriverConn404 *tdriverConn404) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn404.r, odriverConn404.setup, ctx, query)
}
func (odriverConn404 *tdriverConn404) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn404.r, odriverConn404.setup, ctx, query, args)
}
func (odriverConn404 *tdriverConn404) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn404.r, odriverConn404.setup, param0)
}
func (odriverConn404 *tdriverConn404) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn404.r, odriverConn404.setup, ctx)
}
func (odriverConn404 *tdriverConn404) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn404.r, odriverConn404.setup, ctx)
}

func (odriverConn405 *tdriverConn405) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn405.r, odriverConn405.setup)
}
func (odriverConn405 *tdriverConn405) Close() error {
	return traceDCClose(odriverConn405.r, odriverConn405.setup)
}
func (odriverConn405 *tdriverConn405) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn405.r, odriverConn405.setup, query)
}
func (odriverConn405 *tdriverConn405) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn405.r, odriverConn405.setup, ctx, opts)
}
func (odriverConn405 *tdriverConn405) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn405.r, odriverConn405.setup, ctx, query)
}
func (odriverConn405 *tdriverConn405) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn405.r, odriverConn405.setup, ctx, query, args)
}
func (odriverConn405 *tdriverConn405) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn405.r, odriverConn405.setup, param0)
}
func (odriverConn405 *tdriverConn405) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn405.r, odriverConn405.setup, query, args)
}
func (odriverConn405 *tdriverConn405) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn405.r, odriverConn405.setup, ctx, query, args)
}

func (odriverConn406 *tdriverConn406) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn406.r, odriverConn406.setup)
}
func (odriverConn406 *tdriverConn406) Close() error {
	return traceDCClose(odriverConn406.r, odriverConn406.setup)
}
func (odriverConn406 *tdriverConn406) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn406.r, odriverConn406.setup, query)
}
func (odriverConn406 *tdriverConn406) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn406.r, odriverConn406.setup, ctx, opts)
}
func (odriverConn406 *tdriverConn406) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn406.r, odriverConn406.setup, ctx, query)
}
func (odriverConn406 *tdriverConn406) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn406.r, odriverConn406.setup, ctx, query, args)
}
func (odriverConn406 *tdriverConn406) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn406.r, odriverConn406.setup, param0)
}
func (odriverConn406 *tdriverConn406) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn406.r, odriverConn406.setup, query, args)
}
func (odriverConn406 *tdriverConn406) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn406.r, odriverConn406.setup, ctx)
}

func (odriverConn407 *tdriverConn407) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn407.r, odriverConn407.setup)
}
func (odriverConn407 *tdriverConn407) Close() error {
	return traceDCClose(odriverConn407.r, odriverConn407.setup)
}
func (odriverConn407 *tdriverConn407) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn407.r, odriverConn407.setup, query)
}
func (odriverConn407 *tdriverConn407) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn407.r, odriverConn407.setup, ctx, opts)
}
func (odriverConn407 *tdriverConn407) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn407.r, odriverConn407.setup, ctx, query)
}
func (odriverConn407 *tdriverConn407) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn407.r, odriverConn407.setup, ctx, query, args)
}
func (odriverConn407 *tdriverConn407) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn407.r, odriverConn407.setup, param0)
}
func (odriverConn407 *tdriverConn407) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn407.r, odriverConn407.setup, ctx, query, args)
}
func (odriverConn407 *tdriverConn407) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn407.r, odriverConn407.setup, ctx)
}

func (odriverConn408 *tdriverConn408) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn408.r, odriverConn408.setup)
}
func (odriverConn408 *tdriverConn408) Close() error {
	return traceDCClose(odriverConn408.r, odriverConn408.setup)
}
func (odriverConn408 *tdriverConn408) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn408.r, odriverConn408.setup, query)
}
func (odriverConn408 *tdriverConn408) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn408.r, odriverConn408.setup, ctx, opts)
}
func (odriverConn408 *tdriverConn408) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn408.r, odriverConn408.setup, ctx, query)
}
func (odriverConn408 *tdriverConn408) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn408.r, odriverConn408.setup, ctx, query, args)
}
func (odriverConn408 *tdriverConn408) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn408.r, odriverConn408.setup, ctx)
}
func (odriverConn408 *tdriverConn408) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn408.r, odriverConn408.setup, query, args)
}
func (odriverConn408 *tdriverConn408) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn408.r, odriverConn408.setup, ctx, query, args)
}

func (odriverConn409 *tdriverConn409) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn409.r, odriverConn409.setup)
}
func (odriverConn409 *tdriverConn409) Close() error {
	return traceDCClose(odriverConn409.r, odriverConn409.setup)
}
func (odriverConn409 *tdriverConn409) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn409.r, odriverConn409.setup, query)
}
func (odriverConn409 *tdriverConn409) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn409.r, odriverConn409.setup, ctx, opts)
}
func (odriverConn409 *tdriverConn409) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn409.r, odriverConn409.setup, ctx, query)
}
func (odriverConn409 *tdriverConn409) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn409.r, odriverConn409.setup, ctx, query, args)
}
func (odriverConn409 *tdriverConn409) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn409.r, odriverConn409.setup, ctx)
}
func (odriverConn409 *tdriverConn409) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn409.r, odriverConn409.setup, query, args)
}
func (odriverConn409 *tdriverConn409) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn409.r, odriverConn409.setup, ctx)
}

func (odriverConn410 *tdriverConn410) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn410.r, odriverConn410.setup)
}
func (odriverConn410 *tdriverConn410) Close() error {
	return traceDCClose(odriverConn410.r, odriverConn410.setup)
}
func (odriverConn410 *tdriverConn410) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn410.r, odriverConn410.setup, query)
}
func (odriverConn410 *tdriverConn410) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn410.r, odriverConn410.setup, ctx, opts)
}
func (odriverConn410 *tdriverConn410) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn410.r, odriverConn410.setup, ctx, query)
}
func (odriverConn410 *tdriverConn410) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn410.r, odriverConn410.setup, ctx, query, args)
}
func (odriverConn410 *tdriverConn410) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn410.r, odriverConn410.setup, ctx)
}
func (odriverConn410 *tdriverConn410) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn410.r, odriverConn410.setup, ctx, query, args)
}
func (odriverConn410 *tdriverConn410) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn410.r, odriverConn410.setup, ctx)
}

func (odriverConn411 *tdriverConn411) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn411.r, odriverConn411.setup)
}
func (odriverConn411 *tdriverConn411) Close() error {
	return traceDCClose(odriverConn411.r, odriverConn411.setup)
}
func (odriverConn411 *tdriverConn411) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn411.r, odriverConn411.setup, query)
}
func (odriverConn411 *tdriverConn411) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn411.r, odriverConn411.setup, ctx, opts)
}
func (odriverConn411 *tdriverConn411) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn411.r, odriverConn411.setup, ctx, query)
}
func (odriverConn411 *tdriverConn411) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn411.r, odriverConn411.setup, ctx, query, args)
}
func (odriverConn411 *tdriverConn411) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn411.r, odriverConn411.setup, query, args)
}
func (odriverConn411 *tdriverConn411) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn411.r, odriverConn411.setup, ctx, query, args)
}
func (odriverConn411 *tdriverConn411) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn411.r, odriverConn411.setup, ctx)
}

func (odriverConn412 *tdriverConn412) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn412.r, odriverConn412.setup)
}
func (odriverConn412 *tdriverConn412) Close() error {
	return traceDCClose(odriverConn412.r, odriverConn412.setup)
}
func (odriverConn412 *tdriverConn412) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn412.r, odriverConn412.setup, query)
}
func (odriverConn412 *tdriverConn412) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn412.r, odriverConn412.setup, ctx, opts)
}
func (odriverConn412 *tdriverConn412) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn412.r, odriverConn412.setup, ctx, query)
}
func (odriverConn412 *tdriverConn412) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn412.r, odriverConn412.setup, param0)
}
func (odriverConn412 *tdriverConn412) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn412.r, odriverConn412.setup, ctx)
}
func (odriverConn412 *tdriverConn412) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn412.r, odriverConn412.setup, query, args)
}
func (odriverConn412 *tdriverConn412) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn412.r, odriverConn412.setup, ctx, query, args)
}

func (odriverConn413 *tdriverConn413) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn413.r, odriverConn413.setup)
}
func (odriverConn413 *tdriverConn413) Close() error {
	return traceDCClose(odriverConn413.r, odriverConn413.setup)
}
func (odriverConn413 *tdriverConn413) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn413.r, odriverConn413.setup, query)
}
func (odriverConn413 *tdriverConn413) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn413.r, odriverConn413.setup, ctx, opts)
}
func (odriverConn413 *tdriverConn413) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn413.r, odriverConn413.setup, ctx, query)
}
func (odriverConn413 *tdriverConn413) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn413.r, odriverConn413.setup, param0)
}
func (odriverConn413 *tdriverConn413) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn413.r, odriverConn413.setup, ctx)
}
func (odriverConn413 *tdriverConn413) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn413.r, odriverConn413.setup, query, args)
}
func (odriverConn413 *tdriverConn413) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn413.r, odriverConn413.setup, ctx)
}

func (odriverConn414 *tdriverConn414) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn414.r, odriverConn414.setup)
}
func (odriverConn414 *tdriverConn414) Close() error {
	return traceDCClose(odriverConn414.r, odriverConn414.setup)
}
func (odriverConn414 *tdriverConn414) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn414.r, odriverConn414.setup, query)
}
func (odriverConn414 *tdriverConn414) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn414.r, odriverConn414.setup, ctx, opts)
}
func (odriverConn414 *tdriverConn414) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn414.r, odriverConn414.setup, ctx, query)
}
func (odriverConn414 *tdriverConn414) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn414.r, odriverConn414.setup, param0)
}
func (odriverConn414 *tdriverConn414) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn414.r, odriverConn414.setup, ctx)
}
func (odriverConn414 *tdriverConn414) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn414.r, odriverConn414.setup, ctx, query, args)
}
func (odriverConn414 *tdriverConn414) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn414.r, odriverConn414.setup, ctx)
}

func (odriverConn415 *tdriverConn415) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn415.r, odriverConn415.setup)
}
func (odriverConn415 *tdriverConn415) Close() error {
	return traceDCClose(odriverConn415.r, odriverConn415.setup)
}
func (odriverConn415 *tdriverConn415) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn415.r, odriverConn415.setup, query)
}
func (odriverConn415 *tdriverConn415) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn415.r, odriverConn415.setup, ctx, opts)
}
func (odriverConn415 *tdriverConn415) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn415.r, odriverConn415.setup, ctx, query)
}
func (odriverConn415 *tdriverConn415) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn415.r, odriverConn415.setup, param0)
}
func (odriverConn415 *tdriverConn415) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn415.r, odriverConn415.setup, query, args)
}
func (odriverConn415 *tdriverConn415) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn415.r, odriverConn415.setup, ctx, query, args)
}
func (odriverConn415 *tdriverConn415) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn415.r, odriverConn415.setup, ctx)
}

func (odriverConn416 *tdriverConn416) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn416.r, odriverConn416.setup)
}
func (odriverConn416 *tdriverConn416) Close() error {
	return traceDCClose(odriverConn416.r, odriverConn416.setup)
}
func (odriverConn416 *tdriverConn416) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn416.r, odriverConn416.setup, query)
}
func (odriverConn416 *tdriverConn416) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn416.r, odriverConn416.setup, ctx, opts)
}
func (odriverConn416 *tdriverConn416) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn416.r, odriverConn416.setup, ctx, query)
}
func (odriverConn416 *tdriverConn416) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn416.r, odriverConn416.setup, ctx)
}
func (odriverConn416 *tdriverConn416) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn416.r, odriverConn416.setup, query, args)
}
func (odriverConn416 *tdriverConn416) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn416.r, odriverConn416.setup, ctx, query, args)
}
func (odriverConn416 *tdriverConn416) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn416.r, odriverConn416.setup, ctx)
}

func (odriverConn417 *tdriverConn417) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn417.r, odriverConn417.setup)
}
func (odriverConn417 *tdriverConn417) Close() error {
	return traceDCClose(odriverConn417.r, odriverConn417.setup)
}
func (odriverConn417 *tdriverConn417) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn417.r, odriverConn417.setup, query)
}
func (odriverConn417 *tdriverConn417) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn417.r, odriverConn417.setup, ctx, opts)
}
func (odriverConn417 *tdriverConn417) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn417.r, odriverConn417.setup, query, args)
}
func (odriverConn417 *tdriverConn417) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn417.r, odriverConn417.setup, ctx, query, args)
}
func (odriverConn417 *tdriverConn417) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn417.r, odriverConn417.setup, param0)
}
func (odriverConn417 *tdriverConn417) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn417.r, odriverConn417.setup, ctx)
}
func (odriverConn417 *tdriverConn417) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn417.r, odriverConn417.setup, query, args)
}

func (odriverConn418 *tdriverConn418) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn418.r, odriverConn418.setup)
}
func (odriverConn418 *tdriverConn418) Close() error {
	return traceDCClose(odriverConn418.r, odriverConn418.setup)
}
func (odriverConn418 *tdriverConn418) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn418.r, odriverConn418.setup, query)
}
func (odriverConn418 *tdriverConn418) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn418.r, odriverConn418.setup, ctx, opts)
}
func (odriverConn418 *tdriverConn418) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn418.r, odriverConn418.setup, query, args)
}
func (odriverConn418 *tdriverConn418) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn418.r, odriverConn418.setup, ctx, query, args)
}
func (odriverConn418 *tdriverConn418) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn418.r, odriverConn418.setup, param0)
}
func (odriverConn418 *tdriverConn418) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn418.r, odriverConn418.setup, ctx)
}
func (odriverConn418 *tdriverConn418) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn418.r, odriverConn418.setup, ctx, query, args)
}

func (odriverConn419 *tdriverConn419) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn419.r, odriverConn419.setup)
}
func (odriverConn419 *tdriverConn419) Close() error {
	return traceDCClose(odriverConn419.r, odriverConn419.setup)
}
func (odriverConn419 *tdriverConn419) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn419.r, odriverConn419.setup, query)
}
func (odriverConn419 *tdriverConn419) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn419.r, odriverConn419.setup, ctx, opts)
}
func (odriverConn419 *tdriverConn419) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn419.r, odriverConn419.setup, query, args)
}
func (odriverConn419 *tdriverConn419) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn419.r, odriverConn419.setup, ctx, query, args)
}
func (odriverConn419 *tdriverConn419) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn419.r, odriverConn419.setup, param0)
}
func (odriverConn419 *tdriverConn419) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn419.r, odriverConn419.setup, ctx)
}
func (odriverConn419 *tdriverConn419) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn419.r, odriverConn419.setup, ctx)
}

func (odriverConn420 *tdriverConn420) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn420.r, odriverConn420.setup)
}
func (odriverConn420 *tdriverConn420) Close() error {
	return traceDCClose(odriverConn420.r, odriverConn420.setup)
}
func (odriverConn420 *tdriverConn420) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn420.r, odriverConn420.setup, query)
}
func (odriverConn420 *tdriverConn420) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn420.r, odriverConn420.setup, ctx, opts)
}
func (odriverConn420 *tdriverConn420) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn420.r, odriverConn420.setup, query, args)
}
func (odriverConn420 *tdriverConn420) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn420.r, odriverConn420.setup, ctx, query, args)
}
func (odriverConn420 *tdriverConn420) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn420.r, odriverConn420.setup, param0)
}
func (odriverConn420 *tdriverConn420) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn420.r, odriverConn420.setup, query, args)
}
func (odriverConn420 *tdriverConn420) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn420.r, odriverConn420.setup, ctx, query, args)
}

func (odriverConn421 *tdriverConn421) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn421.r, odriverConn421.setup)
}
func (odriverConn421 *tdriverConn421) Close() error {
	return traceDCClose(odriverConn421.r, odriverConn421.setup)
}
func (odriverConn421 *tdriverConn421) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn421.r, odriverConn421.setup, query)
}
func (odriverConn421 *tdriverConn421) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn421.r, odriverConn421.setup, ctx, opts)
}
func (odriverConn421 *tdriverConn421) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn421.r, odriverConn421.setup, query, args)
}
func (odriverConn421 *tdriverConn421) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn421.r, odriverConn421.setup, ctx, query, args)
}
func (odriverConn421 *tdriverConn421) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn421.r, odriverConn421.setup, param0)
}
func (odriverConn421 *tdriverConn421) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn421.r, odriverConn421.setup, query, args)
}
func (odriverConn421 *tdriverConn421) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn421.r, odriverConn421.setup, ctx)
}

func (odriverConn422 *tdriverConn422) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn422.r, odriverConn422.setup)
}
func (odriverConn422 *tdriverConn422) Close() error {
	return traceDCClose(odriverConn422.r, odriverConn422.setup)
}
func (odriverConn422 *tdriverConn422) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn422.r, odriverConn422.setup, query)
}
func (odriverConn422 *tdriverConn422) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn422.r, odriverConn422.setup, ctx, opts)
}
func (odriverConn422 *tdriverConn422) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn422.r, odriverConn422.setup, query, args)
}
func (odriverConn422 *tdriverConn422) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn422.r, odriverConn422.setup, ctx, query, args)
}
func (odriverConn422 *tdriverConn422) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn422.r, odriverConn422.setup, param0)
}
func (odriverConn422 *tdriverConn422) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn422.r, odriverConn422.setup, ctx, query, args)
}
func (odriverConn422 *tdriverConn422) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn422.r, odriverConn422.setup, ctx)
}

func (odriverConn423 *tdriverConn423) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn423.r, odriverConn423.setup)
}
func (odriverConn423 *tdriverConn423) Close() error {
	return traceDCClose(odriverConn423.r, odriverConn423.setup)
}
func (odriverConn423 *tdriverConn423) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn423.r, odriverConn423.setup, query)
}
func (odriverConn423 *tdriverConn423) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn423.r, odriverConn423.setup, ctx, opts)
}
func (odriverConn423 *tdriverConn423) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn423.r, odriverConn423.setup, query, args)
}
func (odriverConn423 *tdriverConn423) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn423.r, odriverConn423.setup, ctx, query, args)
}
func (odriverConn423 *tdriverConn423) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn423.r, odriverConn423.setup, ctx)
}
func (odriverConn423 *tdriverConn423) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn423.r, odriverConn423.setup, query, args)
}
func (odriverConn423 *tdriverConn423) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn423.r, odriverConn423.setup, ctx, query, args)
}

func (odriverConn424 *tdriverConn424) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn424.r, odriverConn424.setup)
}
func (odriverConn424 *tdriverConn424) Close() error {
	return traceDCClose(odriverConn424.r, odriverConn424.setup)
}
func (odriverConn424 *tdriverConn424) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn424.r, odriverConn424.setup, query)
}
func (odriverConn424 *tdriverConn424) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn424.r, odriverConn424.setup, ctx, opts)
}
func (odriverConn424 *tdriverConn424) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn424.r, odriverConn424.setup, query, args)
}
func (odriverConn424 *tdriverConn424) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn424.r, odriverConn424.setup, ctx, query, args)
}
func (odriverConn424 *tdriverConn424) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn424.r, odriverConn424.setup, ctx)
}
func (odriverConn424 *tdriverConn424) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn424.r, odriverConn424.setup, query, args)
}
func (odriverConn424 *tdriverConn424) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn424.r, odriverConn424.setup, ctx)
}

func (odriverConn425 *tdriverConn425) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn425.r, odriverConn425.setup)
}
func (odriverConn425 *tdriverConn425) Close() error {
	return traceDCClose(odriverConn425.r, odriverConn425.setup)
}
func (odriverConn425 *tdriverConn425) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn425.r, odriverConn425.setup, query)
}
func (odriverConn425 *tdriverConn425) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn425.r, odriverConn425.setup, ctx, opts)
}
func (odriverConn425 *tdriverConn425) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn425.r, odriverConn425.setup, query, args)
}
func (odriverConn425 *tdriverConn425) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn425.r, odriverConn425.setup, ctx, query, args)
}
func (odriverConn425 *tdriverConn425) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn425.r, odriverConn425.setup, ctx)
}
func (odriverConn425 *tdriverConn425) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn425.r, odriverConn425.setup, ctx, query, args)
}
func (odriverConn425 *tdriverConn425) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn425.r, odriverConn425.setup, ctx)
}

func (odriverConn426 *tdriverConn426) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn426.r, odriverConn426.setup)
}
func (odriverConn426 *tdriverConn426) Close() error {
	return traceDCClose(odriverConn426.r, odriverConn426.setup)
}
func (odriverConn426 *tdriverConn426) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn426.r, odriverConn426.setup, query)
}
func (odriverConn426 *tdriverConn426) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn426.r, odriverConn426.setup, ctx, opts)
}
func (odriverConn426 *tdriverConn426) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn426.r, odriverConn426.setup, query, args)
}
func (odriverConn426 *tdriverConn426) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn426.r, odriverConn426.setup, ctx, query, args)
}
func (odriverConn426 *tdriverConn426) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn426.r, odriverConn426.setup, query, args)
}
func (odriverConn426 *tdriverConn426) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn426.r, odriverConn426.setup, ctx, query, args)
}
func (odriverConn426 *tdriverConn426) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn426.r, odriverConn426.setup, ctx)
}

func (odriverConn427 *tdriverConn427) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn427.r, odriverConn427.setup)
}
func (odriverConn427 *tdriverConn427) Close() error {
	return traceDCClose(odriverConn427.r, odriverConn427.setup)
}
func (odriverConn427 *tdriverConn427) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn427.r, odriverConn427.setup, query)
}
func (odriverConn427 *tdriverConn427) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn427.r, odriverConn427.setup, ctx, opts)
}
func (odriverConn427 *tdriverConn427) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn427.r, odriverConn427.setup, query, args)
}
func (odriverConn427 *tdriverConn427) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn427.r, odriverConn427.setup, param0)
}
func (odriverConn427 *tdriverConn427) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn427.r, odriverConn427.setup, ctx)
}
func (odriverConn427 *tdriverConn427) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn427.r, odriverConn427.setup, query, args)
}
func (odriverConn427 *tdriverConn427) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn427.r, odriverConn427.setup, ctx, query, args)
}

func (odriverConn428 *tdriverConn428) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn428.r, odriverConn428.setup)
}
func (odriverConn428 *tdriverConn428) Close() error {
	return traceDCClose(odriverConn428.r, odriverConn428.setup)
}
func (odriverConn428 *tdriverConn428) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn428.r, odriverConn428.setup, query)
}
func (odriverConn428 *tdriverConn428) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn428.r, odriverConn428.setup, ctx, opts)
}
func (odriverConn428 *tdriverConn428) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn428.r, odriverConn428.setup, query, args)
}
func (odriverConn428 *tdriverConn428) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn428.r, odriverConn428.setup, param0)
}
func (odriverConn428 *tdriverConn428) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn428.r, odriverConn428.setup, ctx)
}
func (odriverConn428 *tdriverConn428) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn428.r, odriverConn428.setup, query, args)
}
func (odriverConn428 *tdriverConn428) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn428.r, odriverConn428.setup, ctx)
}

func (odriverConn429 *tdriverConn429) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn429.r, odriverConn429.setup)
}
func (odriverConn429 *tdriverConn429) Close() error {
	return traceDCClose(odriverConn429.r, odriverConn429.setup)
}
func (odriverConn429 *tdriverConn429) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn429.r, odriverConn429.setup, query)
}
func (odriverConn429 *tdriverConn429) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn429.r, odriverConn429.setup, ctx, opts)
}
func (odriverConn429 *tdriverConn429) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn429.r, odriverConn429.setup, query, args)
}
func (odriverConn429 *tdriverConn429) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn429.r, odriverConn429.setup, param0)
}
func (odriverConn429 *tdriverConn429) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn429.r, odriverConn429.setup, ctx)
}
func (odriverConn429 *tdriverConn429) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn429.r, odriverConn429.setup, ctx, query, args)
}
func (odriverConn429 *tdriverConn429) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn429.r, odriverConn429.setup, ctx)
}

func (odriverConn430 *tdriverConn430) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn430.r, odriverConn430.setup)
}
func (odriverConn430 *tdriverConn430) Close() error {
	return traceDCClose(odriverConn430.r, odriverConn430.setup)
}
func (odriverConn430 *tdriverConn430) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn430.r, odriverConn430.setup, query)
}
func (odriverConn430 *tdriverConn430) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn430.r, odriverConn430.setup, ctx, opts)
}
func (odriverConn430 *tdriverConn430) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn430.r, odriverConn430.setup, query, args)
}
func (odriverConn430 *tdriverConn430) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn430.r, odriverConn430.setup, param0)
}
func (odriverConn430 *tdriverConn430) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn430.r, odriverConn430.setup, query, args)
}
func (odriverConn430 *tdriverConn430) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn430.r, odriverConn430.setup, ctx, query, args)
}
func (odriverConn430 *tdriverConn430) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn430.r, odriverConn430.setup, ctx)
}

func (odriverConn431 *tdriverConn431) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn431.r, odriverConn431.setup)
}
func (odriverConn431 *tdriverConn431) Close() error {
	return traceDCClose(odriverConn431.r, odriverConn431.setup)
}
func (odriverConn431 *tdriverConn431) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn431.r, odriverConn431.setup, query)
}
func (odriverConn431 *tdriverConn431) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn431.r, odriverConn431.setup, ctx, opts)
}
func (odriverConn431 *tdriverConn431) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn431.r, odriverConn431.setup, query, args)
}
func (odriverConn431 *tdriverConn431) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn431.r, odriverConn431.setup, ctx)
}
func (odriverConn431 *tdriverConn431) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn431.r, odriverConn431.setup, query, args)
}
func (odriverConn431 *tdriverConn431) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn431.r, odriverConn431.setup, ctx, query, args)
}
func (odriverConn431 *tdriverConn431) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn431.r, odriverConn431.setup, ctx)
}

func (odriverConn432 *tdriverConn432) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn432.r, odriverConn432.setup)
}
func (odriverConn432 *tdriverConn432) Close() error {
	return traceDCClose(odriverConn432.r, odriverConn432.setup)
}
func (odriverConn432 *tdriverConn432) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn432.r, odriverConn432.setup, query)
}
func (odriverConn432 *tdriverConn432) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn432.r, odriverConn432.setup, ctx, opts)
}
func (odriverConn432 *tdriverConn432) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn432.r, odriverConn432.setup, ctx, query, args)
}
func (odriverConn432 *tdriverConn432) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn432.r, odriverConn432.setup, param0)
}
func (odriverConn432 *tdriverConn432) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn432.r, odriverConn432.setup, ctx)
}
func (odriverConn432 *tdriverConn432) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn432.r, odriverConn432.setup, query, args)
}
func (odriverConn432 *tdriverConn432) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn432.r, odriverConn432.setup, ctx, query, args)
}

func (odriverConn433 *tdriverConn433) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn433.r, odriverConn433.setup)
}
func (odriverConn433 *tdriverConn433) Close() error {
	return traceDCClose(odriverConn433.r, odriverConn433.setup)
}
func (odriverConn433 *tdriverConn433) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn433.r, odriverConn433.setup, query)
}
func (odriverConn433 *tdriverConn433) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn433.r, odriverConn433.setup, ctx, opts)
}
func (odriverConn433 *tdriverConn433) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn433.r, odriverConn433.setup, ctx, query, args)
}
func (odriverConn433 *tdriverConn433) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn433.r, odriverConn433.setup, param0)
}
func (odriverConn433 *tdriverConn433) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn433.r, odriverConn433.setup, ctx)
}
func (odriverConn433 *tdriverConn433) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn433.r, odriverConn433.setup, query, args)
}
func (odriverConn433 *tdriverConn433) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn433.r, odriverConn433.setup, ctx)
}

func (odriverConn434 *tdriverConn434) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn434.r, odriverConn434.setup)
}
func (odriverConn434 *tdriverConn434) Close() error {
	return traceDCClose(odriverConn434.r, odriverConn434.setup)
}
func (odriverConn434 *tdriverConn434) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn434.r, odriverConn434.setup, query)
}
func (odriverConn434 *tdriverConn434) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn434.r, odriverConn434.setup, ctx, opts)
}
func (odriverConn434 *tdriverConn434) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn434.r, odriverConn434.setup, ctx, query, args)
}
func (odriverConn434 *tdriverConn434) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn434.r, odriverConn434.setup, param0)
}
func (odriverConn434 *tdriverConn434) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn434.r, odriverConn434.setup, ctx)
}
func (odriverConn434 *tdriverConn434) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn434.r, odriverConn434.setup, ctx, query, args)
}
func (odriverConn434 *tdriverConn434) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn434.r, odriverConn434.setup, ctx)
}

func (odriverConn435 *tdriverConn435) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn435.r, odriverConn435.setup)
}
func (odriverConn435 *tdriverConn435) Close() error {
	return traceDCClose(odriverConn435.r, odriverConn435.setup)
}
func (odriverConn435 *tdriverConn435) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn435.r, odriverConn435.setup, query)
}
func (odriverConn435 *tdriverConn435) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn435.r, odriverConn435.setup, ctx, opts)
}
func (odriverConn435 *tdriverConn435) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn435.r, odriverConn435.setup, ctx, query, args)
}
func (odriverConn435 *tdriverConn435) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn435.r, odriverConn435.setup, param0)
}
func (odriverConn435 *tdriverConn435) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn435.r, odriverConn435.setup, query, args)
}
func (odriverConn435 *tdriverConn435) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn435.r, odriverConn435.setup, ctx, query, args)
}
func (odriverConn435 *tdriverConn435) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn435.r, odriverConn435.setup, ctx)
}

func (odriverConn436 *tdriverConn436) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn436.r, odriverConn436.setup)
}
func (odriverConn436 *tdriverConn436) Close() error {
	return traceDCClose(odriverConn436.r, odriverConn436.setup)
}
func (odriverConn436 *tdriverConn436) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn436.r, odriverConn436.setup, query)
}
func (odriverConn436 *tdriverConn436) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn436.r, odriverConn436.setup, ctx, opts)
}
func (odriverConn436 *tdriverConn436) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn436.r, odriverConn436.setup, ctx, query, args)
}
func (odriverConn436 *tdriverConn436) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn436.r, odriverConn436.setup, ctx)
}
func (odriverConn436 *tdriverConn436) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn436.r, odriverConn436.setup, query, args)
}
func (odriverConn436 *tdriverConn436) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn436.r, odriverConn436.setup, ctx, query, args)
}
func (odriverConn436 *tdriverConn436) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn436.r, odriverConn436.setup, ctx)
}

func (odriverConn437 *tdriverConn437) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn437.r, odriverConn437.setup)
}
func (odriverConn437 *tdriverConn437) Close() error {
	return traceDCClose(odriverConn437.r, odriverConn437.setup)
}
func (odriverConn437 *tdriverConn437) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn437.r, odriverConn437.setup, query)
}
func (odriverConn437 *tdriverConn437) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn437.r, odriverConn437.setup, ctx, opts)
}
func (odriverConn437 *tdriverConn437) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn437.r, odriverConn437.setup, param0)
}
func (odriverConn437 *tdriverConn437) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn437.r, odriverConn437.setup, ctx)
}
func (odriverConn437 *tdriverConn437) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn437.r, odriverConn437.setup, query, args)
}
func (odriverConn437 *tdriverConn437) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn437.r, odriverConn437.setup, ctx, query, args)
}
func (odriverConn437 *tdriverConn437) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn437.r, odriverConn437.setup, ctx)
}

func (odriverConn438 *tdriverConn438) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn438.r, odriverConn438.setup)
}
func (odriverConn438 *tdriverConn438) Close() error {
	return traceDCClose(odriverConn438.r, odriverConn438.setup)
}
func (odriverConn438 *tdriverConn438) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn438.r, odriverConn438.setup, query)
}
func (odriverConn438 *tdriverConn438) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn438.r, odriverConn438.setup, ctx, query)
}
func (odriverConn438 *tdriverConn438) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn438.r, odriverConn438.setup, query, args)
}
func (odriverConn438 *tdriverConn438) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn438.r, odriverConn438.setup, ctx, query, args)
}
func (odriverConn438 *tdriverConn438) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn438.r, odriverConn438.setup, param0)
}
func (odriverConn438 *tdriverConn438) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn438.r, odriverConn438.setup, ctx)
}
func (odriverConn438 *tdriverConn438) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn438.r, odriverConn438.setup, query, args)
}

func (odriverConn439 *tdriverConn439) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn439.r, odriverConn439.setup)
}
func (odriverConn439 *tdriverConn439) Close() error {
	return traceDCClose(odriverConn439.r, odriverConn439.setup)
}
func (odriverConn439 *tdriverConn439) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn439.r, odriverConn439.setup, query)
}
func (odriverConn439 *tdriverConn439) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn439.r, odriverConn439.setup, ctx, query)
}
func (odriverConn439 *tdriverConn439) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn439.r, odriverConn439.setup, query, args)
}
func (odriverConn439 *tdriverConn439) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn439.r, odriverConn439.setup, ctx, query, args)
}
func (odriverConn439 *tdriverConn439) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn439.r, odriverConn439.setup, param0)
}
func (odriverConn439 *tdriverConn439) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn439.r, odriverConn439.setup, ctx)
}
func (odriverConn439 *tdriverConn439) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn439.r, odriverConn439.setup, ctx, query, args)
}

func (odriverConn440 *tdriverConn440) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn440.r, odriverConn440.setup)
}
func (odriverConn440 *tdriverConn440) Close() error {
	return traceDCClose(odriverConn440.r, odriverConn440.setup)
}
func (odriverConn440 *tdriverConn440) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn440.r, odriverConn440.setup, query)
}
func (odriverConn440 *tdriverConn440) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn440.r, odriverConn440.setup, ctx, query)
}
func (odriverConn440 *tdriverConn440) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn440.r, odriverConn440.setup, query, args)
}
func (odriverConn440 *tdriverConn440) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn440.r, odriverConn440.setup, ctx, query, args)
}
func (odriverConn440 *tdriverConn440) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn440.r, odriverConn440.setup, param0)
}
func (odriverConn440 *tdriverConn440) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn440.r, odriverConn440.setup, ctx)
}
func (odriverConn440 *tdriverConn440) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn440.r, odriverConn440.setup, ctx)
}

func (odriverConn441 *tdriverConn441) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn441.r, odriverConn441.setup)
}
func (odriverConn441 *tdriverConn441) Close() error {
	return traceDCClose(odriverConn441.r, odriverConn441.setup)
}
func (odriverConn441 *tdriverConn441) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn441.r, odriverConn441.setup, query)
}
func (odriverConn441 *tdriverConn441) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn441.r, odriverConn441.setup, ctx, query)
}
func (odriverConn441 *tdriverConn441) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn441.r, odriverConn441.setup, query, args)
}
func (odriverConn441 *tdriverConn441) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn441.r, odriverConn441.setup, ctx, query, args)
}
func (odriverConn441 *tdriverConn441) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn441.r, odriverConn441.setup, param0)
}
func (odriverConn441 *tdriverConn441) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn441.r, odriverConn441.setup, query, args)
}
func (odriverConn441 *tdriverConn441) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn441.r, odriverConn441.setup, ctx, query, args)
}

func (odriverConn442 *tdriverConn442) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn442.r, odriverConn442.setup)
}
func (odriverConn442 *tdriverConn442) Close() error {
	return traceDCClose(odriverConn442.r, odriverConn442.setup)
}
func (odriverConn442 *tdriverConn442) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn442.r, odriverConn442.setup, query)
}
func (odriverConn442 *tdriverConn442) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn442.r, odriverConn442.setup, ctx, query)
}
func (odriverConn442 *tdriverConn442) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn442.r, odriverConn442.setup, query, args)
}
func (odriverConn442 *tdriverConn442) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn442.r, odriverConn442.setup, ctx, query, args)
}
func (odriverConn442 *tdriverConn442) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn442.r, odriverConn442.setup, param0)
}
func (odriverConn442 *tdriverConn442) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn442.r, odriverConn442.setup, query, args)
}
func (odriverConn442 *tdriverConn442) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn442.r, odriverConn442.setup, ctx)
}

func (odriverConn443 *tdriverConn443) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn443.r, odriverConn443.setup)
}
func (odriverConn443 *tdriverConn443) Close() error {
	return traceDCClose(odriverConn443.r, odriverConn443.setup)
}
func (odriverConn443 *tdriverConn443) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn443.r, odriverConn443.setup, query)
}
func (odriverConn443 *tdriverConn443) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn443.r, odriverConn443.setup, ctx, query)
}
func (odriverConn443 *tdriverConn443) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn443.r, odriverConn443.setup, query, args)
}
func (odriverConn443 *tdriverConn443) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn443.r, odriverConn443.setup, ctx, query, args)
}
func (odriverConn443 *tdriverConn443) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn443.r, odriverConn443.setup, param0)
}
func (odriverConn443 *tdriverConn443) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn443.r, odriverConn443.setup, ctx, query, args)
}
func (odriverConn443 *tdriverConn443) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn443.r, odriverConn443.setup, ctx)
}

func (odriverConn444 *tdriverConn444) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn444.r, odriverConn444.setup)
}
func (odriverConn444 *tdriverConn444) Close() error {
	return traceDCClose(odriverConn444.r, odriverConn444.setup)
}
func (odriverConn444 *tdriverConn444) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn444.r, odriverConn444.setup, query)
}
func (odriverConn444 *tdriverConn444) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn444.r, odriverConn444.setup, ctx, query)
}
func (odriverConn444 *tdriverConn444) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn444.r, odriverConn444.setup, query, args)
}
func (odriverConn444 *tdriverConn444) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn444.r, odriverConn444.setup, ctx, query, args)
}
func (odriverConn444 *tdriverConn444) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn444.r, odriverConn444.setup, ctx)
}
func (odriverConn444 *tdriverConn444) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn444.r, odriverConn444.setup, query, args)
}
func (odriverConn444 *tdriverConn444) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn444.r, odriverConn444.setup, ctx, query, args)
}

func (odriverConn445 *tdriverConn445) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn445.r, odriverConn445.setup)
}
func (odriverConn445 *tdriverConn445) Close() error {
	return traceDCClose(odriverConn445.r, odriverConn445.setup)
}
func (odriverConn445 *tdriverConn445) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn445.r, odriverConn445.setup, query)
}
func (odriverConn445 *tdriverConn445) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn445.r, odriverConn445.setup, ctx, query)
}
func (odriverConn445 *tdriverConn445) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn445.r, odriverConn445.setup, query, args)
}
func (odriverConn445 *tdriverConn445) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn445.r, odriverConn445.setup, ctx, query, args)
}
func (odriverConn445 *tdriverConn445) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn445.r, odriverConn445.setup, ctx)
}
func (odriverConn445 *tdriverConn445) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn445.r, odriverConn445.setup, query, args)
}
func (odriverConn445 *tdriverConn445) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn445.r, odriverConn445.setup, ctx)
}

func (odriverConn446 *tdriverConn446) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn446.r, odriverConn446.setup)
}
func (odriverConn446 *tdriverConn446) Close() error {
	return traceDCClose(odriverConn446.r, odriverConn446.setup)
}
func (odriverConn446 *tdriverConn446) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn446.r, odriverConn446.setup, query)
}
func (odriverConn446 *tdriverConn446) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn446.r, odriverConn446.setup, ctx, query)
}
func (odriverConn446 *tdriverConn446) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn446.r, odriverConn446.setup, query, args)
}
func (odriverConn446 *tdriverConn446) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn446.r, odriverConn446.setup, ctx, query, args)
}
func (odriverConn446 *tdriverConn446) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn446.r, odriverConn446.setup, ctx)
}
func (odriverConn446 *tdriverConn446) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn446.r, odriverConn446.setup, ctx, query, args)
}
func (odriverConn446 *tdriverConn446) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn446.r, odriverConn446.setup, ctx)
}

func (odriverConn447 *tdriverConn447) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn447.r, odriverConn447.setup)
}
func (odriverConn447 *tdriverConn447) Close() error {
	return traceDCClose(odriverConn447.r, odriverConn447.setup)
}
func (odriverConn447 *tdriverConn447) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn447.r, odriverConn447.setup, query)
}
func (odriverConn447 *tdriverConn447) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn447.r, odriverConn447.setup, ctx, query)
}
func (odriverConn447 *tdriverConn447) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn447.r, odriverConn447.setup, query, args)
}
func (odriverConn447 *tdriverConn447) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn447.r, odriverConn447.setup, ctx, query, args)
}
func (odriverConn447 *tdriverConn447) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn447.r, odriverConn447.setup, query, args)
}
func (odriverConn447 *tdriverConn447) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn447.r, odriverConn447.setup, ctx, query, args)
}
func (odriverConn447 *tdriverConn447) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn447.r, odriverConn447.setup, ctx)
}

func (odriverConn448 *tdriverConn448) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn448.r, odriverConn448.setup)
}
func (odriverConn448 *tdriverConn448) Close() error {
	return traceDCClose(odriverConn448.r, odriverConn448.setup)
}
func (odriverConn448 *tdriverConn448) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn448.r, odriverConn448.setup, query)
}
func (odriverConn448 *tdriverConn448) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn448.r, odriverConn448.setup, ctx, query)
}
func (odriverConn448 *tdriverConn448) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn448.r, odriverConn448.setup, query, args)
}
func (odriverConn448 *tdriverConn448) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn448.r, odriverConn448.setup, param0)
}
func (odriverConn448 *tdriverConn448) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn448.r, odriverConn448.setup, ctx)
}
func (odriverConn448 *tdriverConn448) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn448.r, odriverConn448.setup, query, args)
}
func (odriverConn448 *tdriverConn448) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn448.r, odriverConn448.setup, ctx, query, args)
}

func (odriverConn449 *tdriverConn449) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn449.r, odriverConn449.setup)
}
func (odriverConn449 *tdriverConn449) Close() error {
	return traceDCClose(odriverConn449.r, odriverConn449.setup)
}
func (odriverConn449 *tdriverConn449) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn449.r, odriverConn449.setup, query)
}
func (odriverConn449 *tdriverConn449) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn449.r, odriverConn449.setup, ctx, query)
}
func (odriverConn449 *tdriverConn449) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn449.r, odriverConn449.setup, query, args)
}
func (odriverConn449 *tdriverConn449) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn449.r, odriverConn449.setup, param0)
}
func (odriverConn449 *tdriverConn449) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn449.r, odriverConn449.setup, ctx)
}
func (odriverConn449 *tdriverConn449) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn449.r, odriverConn449.setup, query, args)
}
func (odriverConn449 *tdriverConn449) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn449.r, odriverConn449.setup, ctx)
}

func (odriverConn450 *tdriverConn450) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn450.r, odriverConn450.setup)
}
func (odriverConn450 *tdriverConn450) Close() error {
	return traceDCClose(odriverConn450.r, odriverConn450.setup)
}
func (odriverConn450 *tdriverConn450) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn450.r, odriverConn450.setup, query)
}
func (odriverConn450 *tdriverConn450) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn450.r, odriverConn450.setup, ctx, query)
}
func (odriverConn450 *tdriverConn450) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn450.r, odriverConn450.setup, query, args)
}
func (odriverConn450 *tdriverConn450) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn450.r, odriverConn450.setup, param0)
}
func (odriverConn450 *tdriverConn450) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn450.r, odriverConn450.setup, ctx)
}
func (odriverConn450 *tdriverConn450) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn450.r, odriverConn450.setup, ctx, query, args)
}
func (odriverConn450 *tdriverConn450) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn450.r, odriverConn450.setup, ctx)
}

func (odriverConn451 *tdriverConn451) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn451.r, odriverConn451.setup)
}
func (odriverConn451 *tdriverConn451) Close() error {
	return traceDCClose(odriverConn451.r, odriverConn451.setup)
}
func (odriverConn451 *tdriverConn451) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn451.r, odriverConn451.setup, query)
}
func (odriverConn451 *tdriverConn451) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn451.r, odriverConn451.setup, ctx, query)
}
func (odriverConn451 *tdriverConn451) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn451.r, odriverConn451.setup, query, args)
}
func (odriverConn451 *tdriverConn451) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn451.r, odriverConn451.setup, param0)
}
func (odriverConn451 *tdriverConn451) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn451.r, odriverConn451.setup, query, args)
}
func (odriverConn451 *tdriverConn451) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn451.r, odriverConn451.setup, ctx, query, args)
}
func (odriverConn451 *tdriverConn451) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn451.r, odriverConn451.setup, ctx)
}

func (odriverConn452 *tdriverConn452) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn452.r, odriverConn452.setup)
}
func (odriverConn452 *tdriverConn452) Close() error {
	return traceDCClose(odriverConn452.r, odriverConn452.setup)
}
func (odriverConn452 *tdriverConn452) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn452.r, odriverConn452.setup, query)
}
func (odriverConn452 *tdriverConn452) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn452.r, odriverConn452.setup, ctx, query)
}
func (odriverConn452 *tdriverConn452) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn452.r, odriverConn452.setup, query, args)
}
func (odriverConn452 *tdriverConn452) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn452.r, odriverConn452.setup, ctx)
}
func (odriverConn452 *tdriverConn452) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn452.r, odriverConn452.setup, query, args)
}
func (odriverConn452 *tdriverConn452) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn452.r, odriverConn452.setup, ctx, query, args)
}
func (odriverConn452 *tdriverConn452) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn452.r, odriverConn452.setup, ctx)
}

func (odriverConn453 *tdriverConn453) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn453.r, odriverConn453.setup)
}
func (odriverConn453 *tdriverConn453) Close() error {
	return traceDCClose(odriverConn453.r, odriverConn453.setup)
}
func (odriverConn453 *tdriverConn453) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn453.r, odriverConn453.setup, query)
}
func (odriverConn453 *tdriverConn453) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn453.r, odriverConn453.setup, ctx, query)
}
func (odriverConn453 *tdriverConn453) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn453.r, odriverConn453.setup, ctx, query, args)
}
func (odriverConn453 *tdriverConn453) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn453.r, odriverConn453.setup, param0)
}
func (odriverConn453 *tdriverConn453) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn453.r, odriverConn453.setup, ctx)
}
func (odriverConn453 *tdriverConn453) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn453.r, odriverConn453.setup, query, args)
}
func (odriverConn453 *tdriverConn453) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn453.r, odriverConn453.setup, ctx, query, args)
}

func (odriverConn454 *tdriverConn454) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn454.r, odriverConn454.setup)
}
func (odriverConn454 *tdriverConn454) Close() error {
	return traceDCClose(odriverConn454.r, odriverConn454.setup)
}
func (odriverConn454 *tdriverConn454) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn454.r, odriverConn454.setup, query)
}
func (odriverConn454 *tdriverConn454) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn454.r, odriverConn454.setup, ctx, query)
}
func (odriverConn454 *tdriverConn454) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn454.r, odriverConn454.setup, ctx, query, args)
}
func (odriverConn454 *tdriverConn454) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn454.r, odriverConn454.setup, param0)
}
func (odriverConn454 *tdriverConn454) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn454.r, odriverConn454.setup, ctx)
}
func (odriverConn454 *tdriverConn454) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn454.r, odriverConn454.setup, query, args)
}
func (odriverConn454 *tdriverConn454) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn454.r, odriverConn454.setup, ctx)
}

func (odriverConn455 *tdriverConn455) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn455.r, odriverConn455.setup)
}
func (odriverConn455 *tdriverConn455) Close() error {
	return traceDCClose(odriverConn455.r, odriverConn455.setup)
}
func (odriverConn455 *tdriverConn455) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn455.r, odriverConn455.setup, query)
}
func (odriverConn455 *tdriverConn455) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn455.r, odriverConn455.setup, ctx, query)
}
func (odriverConn455 *tdriverConn455) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn455.r, odriverConn455.setup, ctx, query, args)
}
func (odriverConn455 *tdriverConn455) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn455.r, odriverConn455.setup, param0)
}
func (odriverConn455 *tdriverConn455) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn455.r, odriverConn455.setup, ctx)
}
func (odriverConn455 *tdriverConn455) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn455.r, odriverConn455.setup, ctx, query, args)
}
func (odriverConn455 *tdriverConn455) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn455.r, odriverConn455.setup, ctx)
}

func (odriverConn456 *tdriverConn456) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn456.r, odriverConn456.setup)
}
func (odriverConn456 *tdriverConn456) Close() error {
	return traceDCClose(odriverConn456.r, odriverConn456.setup)
}
func (odriverConn456 *tdriverConn456) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn456.r, odriverConn456.setup, query)
}
func (odriverConn456 *tdriverConn456) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn456.r, odriverConn456.setup, ctx, query)
}
func (odriverConn456 *tdriverConn456) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn456.r, odriverConn456.setup, ctx, query, args)
}
func (odriverConn456 *tdriverConn456) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn456.r, odriverConn456.setup, param0)
}
func (odriverConn456 *tdriverConn456) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn456.r, odriverConn456.setup, query, args)
}
func (odriverConn456 *tdriverConn456) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn456.r, odriverConn456.setup, ctx, query, args)
}
func (odriverConn456 *tdriverConn456) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn456.r, odriverConn456.setup, ctx)
}

func (odriverConn457 *tdriverConn457) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn457.r, odriverConn457.setup)
}
func (odriverConn457 *tdriverConn457) Close() error {
	return traceDCClose(odriverConn457.r, odriverConn457.setup)
}
func (odriverConn457 *tdriverConn457) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn457.r, odriverConn457.setup, query)
}
func (odriverConn457 *tdriverConn457) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn457.r, odriverConn457.setup, ctx, query)
}
func (odriverConn457 *tdriverConn457) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn457.r, odriverConn457.setup, ctx, query, args)
}
func (odriverConn457 *tdriverConn457) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn457.r, odriverConn457.setup, ctx)
}
func (odriverConn457 *tdriverConn457) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn457.r, odriverConn457.setup, query, args)
}
func (odriverConn457 *tdriverConn457) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn457.r, odriverConn457.setup, ctx, query, args)
}
func (odriverConn457 *tdriverConn457) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn457.r, odriverConn457.setup, ctx)
}

func (odriverConn458 *tdriverConn458) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn458.r, odriverConn458.setup)
}
func (odriverConn458 *tdriverConn458) Close() error {
	return traceDCClose(odriverConn458.r, odriverConn458.setup)
}
func (odriverConn458 *tdriverConn458) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn458.r, odriverConn458.setup, query)
}
func (odriverConn458 *tdriverConn458) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn458.r, odriverConn458.setup, ctx, query)
}
func (odriverConn458 *tdriverConn458) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn458.r, odriverConn458.setup, param0)
}
func (odriverConn458 *tdriverConn458) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn458.r, odriverConn458.setup, ctx)
}
func (odriverConn458 *tdriverConn458) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn458.r, odriverConn458.setup, query, args)
}
func (odriverConn458 *tdriverConn458) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn458.r, odriverConn458.setup, ctx, query, args)
}
func (odriverConn458 *tdriverConn458) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn458.r, odriverConn458.setup, ctx)
}

func (odriverConn459 *tdriverConn459) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn459.r, odriverConn459.setup)
}
func (odriverConn459 *tdriverConn459) Close() error {
	return traceDCClose(odriverConn459.r, odriverConn459.setup)
}
func (odriverConn459 *tdriverConn459) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn459.r, odriverConn459.setup, query)
}
func (odriverConn459 *tdriverConn459) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn459.r, odriverConn459.setup, query, args)
}
func (odriverConn459 *tdriverConn459) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn459.r, odriverConn459.setup, ctx, query, args)
}
func (odriverConn459 *tdriverConn459) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn459.r, odriverConn459.setup, param0)
}
func (odriverConn459 *tdriverConn459) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn459.r, odriverConn459.setup, ctx)
}
func (odriverConn459 *tdriverConn459) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn459.r, odriverConn459.setup, query, args)
}
func (odriverConn459 *tdriverConn459) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn459.r, odriverConn459.setup, ctx, query, args)
}

func (odriverConn460 *tdriverConn460) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn460.r, odriverConn460.setup)
}
func (odriverConn460 *tdriverConn460) Close() error {
	return traceDCClose(odriverConn460.r, odriverConn460.setup)
}
func (odriverConn460 *tdriverConn460) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn460.r, odriverConn460.setup, query)
}
func (odriverConn460 *tdriverConn460) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn460.r, odriverConn460.setup, query, args)
}
func (odriverConn460 *tdriverConn460) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn460.r, odriverConn460.setup, ctx, query, args)
}
func (odriverConn460 *tdriverConn460) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn460.r, odriverConn460.setup, param0)
}
func (odriverConn460 *tdriverConn460) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn460.r, odriverConn460.setup, ctx)
}
func (odriverConn460 *tdriverConn460) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn460.r, odriverConn460.setup, query, args)
}
func (odriverConn460 *tdriverConn460) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn460.r, odriverConn460.setup, ctx)
}

func (odriverConn461 *tdriverConn461) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn461.r, odriverConn461.setup)
}
func (odriverConn461 *tdriverConn461) Close() error {
	return traceDCClose(odriverConn461.r, odriverConn461.setup)
}
func (odriverConn461 *tdriverConn461) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn461.r, odriverConn461.setup, query)
}
func (odriverConn461 *tdriverConn461) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn461.r, odriverConn461.setup, query, args)
}
func (odriverConn461 *tdriverConn461) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn461.r, odriverConn461.setup, ctx, query, args)
}
func (odriverConn461 *tdriverConn461) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn461.r, odriverConn461.setup, param0)
}
func (odriverConn461 *tdriverConn461) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn461.r, odriverConn461.setup, ctx)
}
func (odriverConn461 *tdriverConn461) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn461.r, odriverConn461.setup, ctx, query, args)
}
func (odriverConn461 *tdriverConn461) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn461.r, odriverConn461.setup, ctx)
}

func (odriverConn462 *tdriverConn462) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn462.r, odriverConn462.setup)
}
func (odriverConn462 *tdriverConn462) Close() error {
	return traceDCClose(odriverConn462.r, odriverConn462.setup)
}
func (odriverConn462 *tdriverConn462) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn462.r, odriverConn462.setup, query)
}
func (odriverConn462 *tdriverConn462) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn462.r, odriverConn462.setup, query, args)
}
func (odriverConn462 *tdriverConn462) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn462.r, odriverConn462.setup, ctx, query, args)
}
func (odriverConn462 *tdriverConn462) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn462.r, odriverConn462.setup, param0)
}
func (odriverConn462 *tdriverConn462) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn462.r, odriverConn462.setup, query, args)
}
func (odriverConn462 *tdriverConn462) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn462.r, odriverConn462.setup, ctx, query, args)
}
func (odriverConn462 *tdriverConn462) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn462.r, odriverConn462.setup, ctx)
}

func (odriverConn463 *tdriverConn463) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn463.r, odriverConn463.setup)
}
func (odriverConn463 *tdriverConn463) Close() error {
	return traceDCClose(odriverConn463.r, odriverConn463.setup)
}
func (odriverConn463 *tdriverConn463) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn463.r, odriverConn463.setup, query)
}
func (odriverConn463 *tdriverConn463) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn463.r, odriverConn463.setup, query, args)
}
func (odriverConn463 *tdriverConn463) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn463.r, odriverConn463.setup, ctx, query, args)
}
func (odriverConn463 *tdriverConn463) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn463.r, odriverConn463.setup, ctx)
}
func (odriverConn463 *tdriverConn463) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn463.r, odriverConn463.setup, query, args)
}
func (odriverConn463 *tdriverConn463) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn463.r, odriverConn463.setup, ctx, query, args)
}
func (odriverConn463 *tdriverConn463) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn463.r, odriverConn463.setup, ctx)
}

func (odriverConn464 *tdriverConn464) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn464.r, odriverConn464.setup)
}
func (odriverConn464 *tdriverConn464) Close() error {
	return traceDCClose(odriverConn464.r, odriverConn464.setup)
}
func (odriverConn464 *tdriverConn464) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn464.r, odriverConn464.setup, query)
}
func (odriverConn464 *tdriverConn464) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn464.r, odriverConn464.setup, query, args)
}
func (odriverConn464 *tdriverConn464) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn464.r, odriverConn464.setup, param0)
}
func (odriverConn464 *tdriverConn464) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn464.r, odriverConn464.setup, ctx)
}
func (odriverConn464 *tdriverConn464) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn464.r, odriverConn464.setup, query, args)
}
func (odriverConn464 *tdriverConn464) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn464.r, odriverConn464.setup, ctx, query, args)
}
func (odriverConn464 *tdriverConn464) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn464.r, odriverConn464.setup, ctx)
}

func (odriverConn465 *tdriverConn465) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn465.r, odriverConn465.setup)
}
func (odriverConn465 *tdriverConn465) Close() error {
	return traceDCClose(odriverConn465.r, odriverConn465.setup)
}
func (odriverConn465 *tdriverConn465) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn465.r, odriverConn465.setup, query)
}
func (odriverConn465 *tdriverConn465) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn465.r, odriverConn465.setup, ctx, query, args)
}
func (odriverConn465 *tdriverConn465) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn465.r, odriverConn465.setup, param0)
}
func (odriverConn465 *tdriverConn465) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn465.r, odriverConn465.setup, ctx)
}
func (odriverConn465 *tdriverConn465) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn465.r, odriverConn465.setup, query, args)
}
func (odriverConn465 *tdriverConn465) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn465.r, odriverConn465.setup, ctx, query, args)
}
func (odriverConn465 *tdriverConn465) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn465.r, odriverConn465.setup, ctx)
}

func (odriverConn466 *tdriverConn466) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn466.r, odriverConn466.setup)
}
func (odriverConn466 *tdriverConn466) Close() error {
	return traceDCClose(odriverConn466.r, odriverConn466.setup)
}
func (odriverConn466 *tdriverConn466) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn466.r, odriverConn466.setup, query)
}
func (odriverConn466 *tdriverConn466) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn466.r, odriverConn466.setup, ctx, opts)
}
func (odriverConn466 *tdriverConn466) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn466.r, odriverConn466.setup, ctx, query)
}
func (odriverConn466 *tdriverConn466) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn466.r, odriverConn466.setup, query, args)
}
func (odriverConn466 *tdriverConn466) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn466.r, odriverConn466.setup, ctx, query, args)
}
func (odriverConn466 *tdriverConn466) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn466.r, odriverConn466.setup, param0)
}
func (odriverConn466 *tdriverConn466) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn466.r, odriverConn466.setup, ctx)
}
func (odriverConn466 *tdriverConn466) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn466.r, odriverConn466.setup, query, args)
}

func (odriverConn467 *tdriverConn467) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn467.r, odriverConn467.setup)
}
func (odriverConn467 *tdriverConn467) Close() error {
	return traceDCClose(odriverConn467.r, odriverConn467.setup)
}
func (odriverConn467 *tdriverConn467) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn467.r, odriverConn467.setup, query)
}
func (odriverConn467 *tdriverConn467) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn467.r, odriverConn467.setup, ctx, opts)
}
func (odriverConn467 *tdriverConn467) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn467.r, odriverConn467.setup, ctx, query)
}
func (odriverConn467 *tdriverConn467) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn467.r, odriverConn467.setup, query, args)
}
func (odriverConn467 *tdriverConn467) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn467.r, odriverConn467.setup, ctx, query, args)
}
func (odriverConn467 *tdriverConn467) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn467.r, odriverConn467.setup, param0)
}
func (odriverConn467 *tdriverConn467) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn467.r, odriverConn467.setup, ctx)
}
func (odriverConn467 *tdriverConn467) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn467.r, odriverConn467.setup, ctx, query, args)
}

func (odriverConn468 *tdriverConn468) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn468.r, odriverConn468.setup)
}
func (odriverConn468 *tdriverConn468) Close() error {
	return traceDCClose(odriverConn468.r, odriverConn468.setup)
}
func (odriverConn468 *tdriverConn468) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn468.r, odriverConn468.setup, query)
}
func (odriverConn468 *tdriverConn468) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn468.r, odriverConn468.setup, ctx, opts)
}
func (odriverConn468 *tdriverConn468) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn468.r, odriverConn468.setup, ctx, query)
}
func (odriverConn468 *tdriverConn468) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn468.r, odriverConn468.setup, query, args)
}
func (odriverConn468 *tdriverConn468) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn468.r, odriverConn468.setup, ctx, query, args)
}
func (odriverConn468 *tdriverConn468) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn468.r, odriverConn468.setup, param0)
}
func (odriverConn468 *tdriverConn468) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn468.r, odriverConn468.setup, ctx)
}
func (odriverConn468 *tdriverConn468) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn468.r, odriverConn468.setup, ctx)
}

func (odriverConn469 *tdriverConn469) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn469.r, odriverConn469.setup)
}
func (odriverConn469 *tdriverConn469) Close() error {
	return traceDCClose(odriverConn469.r, odriverConn469.setup)
}
func (odriverConn469 *tdriverConn469) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn469.r, odriverConn469.setup, query)
}
func (odriverConn469 *tdriverConn469) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn469.r, odriverConn469.setup, ctx, opts)
}
func (odriverConn469 *tdriverConn469) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn469.r, odriverConn469.setup, ctx, query)
}
func (odriverConn469 *tdriverConn469) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn469.r, odriverConn469.setup, query, args)
}
func (odriverConn469 *tdriverConn469) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn469.r, odriverConn469.setup, ctx, query, args)
}
func (odriverConn469 *tdriverConn469) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn469.r, odriverConn469.setup, param0)
}
func (odriverConn469 *tdriverConn469) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn469.r, odriverConn469.setup, query, args)
}
func (odriverConn469 *tdriverConn469) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn469.r, odriverConn469.setup, ctx, query, args)
}

func (odriverConn470 *tdriverConn470) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn470.r, odriverConn470.setup)
}
func (odriverConn470 *tdriverConn470) Close() error {
	return traceDCClose(odriverConn470.r, odriverConn470.setup)
}
func (odriverConn470 *tdriverConn470) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn470.r, odriverConn470.setup, query)
}
func (odriverConn470 *tdriverConn470) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn470.r, odriverConn470.setup, ctx, opts)
}
func (odriverConn470 *tdriverConn470) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn470.r, odriverConn470.setup, ctx, query)
}
func (odriverConn470 *tdriverConn470) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn470.r, odriverConn470.setup, query, args)
}
func (odriverConn470 *tdriverConn470) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn470.r, odriverConn470.setup, ctx, query, args)
}
func (odriverConn470 *tdriverConn470) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn470.r, odriverConn470.setup, param0)
}
func (odriverConn470 *tdriverConn470) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn470.r, odriverConn470.setup, query, args)
}
func (odriverConn470 *tdriverConn470) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn470.r, odriverConn470.setup, ctx)
}

func (odriverConn471 *tdriverConn471) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn471.r, odriverConn471.setup)
}
func (odriverConn471 *tdriverConn471) Close() error {
	return traceDCClose(odriverConn471.r, odriverConn471.setup)
}
func (odriverConn471 *tdriverConn471) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn471.r, odriverConn471.setup, query)
}
func (odriverConn471 *tdriverConn471) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn471.r, odriverConn471.setup, ctx, opts)
}
func (odriverConn471 *tdriverConn471) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn471.r, odriverConn471.setup, ctx, query)
}
func (odriverConn471 *tdriverConn471) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn471.r, odriverConn471.setup, query, args)
}
func (odriverConn471 *tdriverConn471) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn471.r, odriverConn471.setup, ctx, query, args)
}
func (odriverConn471 *tdriverConn471) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn471.r, odriverConn471.setup, param0)
}
func (odriverConn471 *tdriverConn471) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn471.r, odriverConn471.setup, ctx, query, args)
}
func (odriverConn471 *tdriverConn471) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn471.r, odriverConn471.setup, ctx)
}

func (odriverConn472 *tdriverConn472) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn472.r, odriverConn472.setup)
}
func (odriverConn472 *tdriverConn472) Close() error {
	return traceDCClose(odriverConn472.r, odriverConn472.setup)
}
func (odriverConn472 *tdriverConn472) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn472.r, odriverConn472.setup, query)
}
func (odriverConn472 *tdriverConn472) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn472.r, odriverConn472.setup, ctx, opts)
}
func (odriverConn472 *tdriverConn472) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn472.r, odriverConn472.setup, ctx, query)
}
func (odriverConn472 *tdriverConn472) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn472.r, odriverConn472.setup, query, args)
}
func (odriverConn472 *tdriverConn472) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn472.r, odriverConn472.setup, ctx, query, args)
}
func (odriverConn472 *tdriverConn472) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn472.r, odriverConn472.setup, ctx)
}
func (odriverConn472 *tdriverConn472) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn472.r, odriverConn472.setup, query, args)
}
func (odriverConn472 *tdriverConn472) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn472.r, odriverConn472.setup, ctx, query, args)
}

func (odriverConn473 *tdriverConn473) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn473.r, odriverConn473.setup)
}
func (odriverConn473 *tdriverConn473) Close() error {
	return traceDCClose(odriverConn473.r, odriverConn473.setup)
}
func (odriverConn473 *tdriverConn473) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn473.r, odriverConn473.setup, query)
}
func (odriverConn473 *tdriverConn473) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn473.r, odriverConn473.setup, ctx, opts)
}
func (odriverConn473 *tdriverConn473) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn473.r, odriverConn473.setup, ctx, query)
}
func (odriverConn473 *tdriverConn473) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn473.r, odriverConn473.setup, query, args)
}
func (odriverConn473 *tdriverConn473) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn473.r, odriverConn473.setup, ctx, query, args)
}
func (odriverConn473 *tdriverConn473) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn473.r, odriverConn473.setup, ctx)
}
func (odriverConn473 *tdriverConn473) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn473.r, odriverConn473.setup, query, args)
}
func (odriverConn473 *tdriverConn473) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn473.r, odriverConn473.setup, ctx)
}

func (odriverConn474 *tdriverConn474) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn474.r, odriverConn474.setup)
}
func (odriverConn474 *tdriverConn474) Close() error {
	return traceDCClose(odriverConn474.r, odriverConn474.setup)
}
func (odriverConn474 *tdriverConn474) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn474.r, odriverConn474.setup, query)
}
func (odriverConn474 *tdriverConn474) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn474.r, odriverConn474.setup, ctx, opts)
}
func (odriverConn474 *tdriverConn474) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn474.r, odriverConn474.setup, ctx, query)
}
func (odriverConn474 *tdriverConn474) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn474.r, odriverConn474.setup, query, args)
}
func (odriverConn474 *tdriverConn474) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn474.r, odriverConn474.setup, ctx, query, args)
}
func (odriverConn474 *tdriverConn474) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn474.r, odriverConn474.setup, ctx)
}
func (odriverConn474 *tdriverConn474) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn474.r, odriverConn474.setup, ctx, query, args)
}
func (odriverConn474 *tdriverConn474) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn474.r, odriverConn474.setup, ctx)
}

func (odriverConn475 *tdriverConn475) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn475.r, odriverConn475.setup)
}
func (odriverConn475 *tdriverConn475) Close() error {
	return traceDCClose(odriverConn475.r, odriverConn475.setup)
}
func (odriverConn475 *tdriverConn475) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn475.r, odriverConn475.setup, query)
}
func (odriverConn475 *tdriverConn475) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn475.r, odriverConn475.setup, ctx, opts)
}
func (odriverConn475 *tdriverConn475) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn475.r, odriverConn475.setup, ctx, query)
}
func (odriverConn475 *tdriverConn475) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn475.r, odriverConn475.setup, query, args)
}
func (odriverConn475 *tdriverConn475) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn475.r, odriverConn475.setup, ctx, query, args)
}
func (odriverConn475 *tdriverConn475) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn475.r, odriverConn475.setup, query, args)
}
func (odriverConn475 *tdriverConn475) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn475.r, odriverConn475.setup, ctx, query, args)
}
func (odriverConn475 *tdriverConn475) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn475.r, odriverConn475.setup, ctx)
}

func (odriverConn476 *tdriverConn476) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn476.r, odriverConn476.setup)
}
func (odriverConn476 *tdriverConn476) Close() error {
	return traceDCClose(odriverConn476.r, odriverConn476.setup)
}
func (odriverConn476 *tdriverConn476) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn476.r, odriverConn476.setup, query)
}
func (odriverConn476 *tdriverConn476) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn476.r, odriverConn476.setup, ctx, opts)
}
func (odriverConn476 *tdriverConn476) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn476.r, odriverConn476.setup, ctx, query)
}
func (odriverConn476 *tdriverConn476) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn476.r, odriverConn476.setup, query, args)
}
func (odriverConn476 *tdriverConn476) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn476.r, odriverConn476.setup, param0)
}
func (odriverConn476 *tdriverConn476) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn476.r, odriverConn476.setup, ctx)
}
func (odriverConn476 *tdriverConn476) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn476.r, odriverConn476.setup, query, args)
}
func (odriverConn476 *tdriverConn476) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn476.r, odriverConn476.setup, ctx, query, args)
}

func (odriverConn477 *tdriverConn477) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn477.r, odriverConn477.setup)
}
func (odriverConn477 *tdriverConn477) Close() error {
	return traceDCClose(odriverConn477.r, odriverConn477.setup)
}
func (odriverConn477 *tdriverConn477) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn477.r, odriverConn477.setup, query)
}
func (odriverConn477 *tdriverConn477) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn477.r, odriverConn477.setup, ctx, opts)
}
func (odriverConn477 *tdriverConn477) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn477.r, odriverConn477.setup, ctx, query)
}
func (odriverConn477 *tdriverConn477) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn477.r, odriverConn477.setup, query, args)
}
func (odriverConn477 *tdriverConn477) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn477.r, odriverConn477.setup, param0)
}
func (odriverConn477 *tdriverConn477) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn477.r, odriverConn477.setup, ctx)
}
func (odriverConn477 *tdriverConn477) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn477.r, odriverConn477.setup, query, args)
}
func (odriverConn477 *tdriverConn477) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn477.r, odriverConn477.setup, ctx)
}

func (odriverConn478 *tdriverConn478) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn478.r, odriverConn478.setup)
}
func (odriverConn478 *tdriverConn478) Close() error {
	return traceDCClose(odriverConn478.r, odriverConn478.setup)
}
func (odriverConn478 *tdriverConn478) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn478.r, odriverConn478.setup, query)
}
func (odriverConn478 *tdriverConn478) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn478.r, odriverConn478.setup, ctx, opts)
}
func (odriverConn478 *tdriverConn478) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn478.r, odriverConn478.setup, ctx, query)
}
func (odriverConn478 *tdriverConn478) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn478.r, odriverConn478.setup, query, args)
}
func (odriverConn478 *tdriverConn478) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn478.r, odriverConn478.setup, param0)
}
func (odriverConn478 *tdriverConn478) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn478.r, odriverConn478.setup, ctx)
}
func (odriverConn478 *tdriverConn478) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn478.r, odriverConn478.setup, ctx, query, args)
}
func (odriverConn478 *tdriverConn478) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn478.r, odriverConn478.setup, ctx)
}

func (odriverConn479 *tdriverConn479) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn479.r, odriverConn479.setup)
}
func (odriverConn479 *tdriverConn479) Close() error {
	return traceDCClose(odriverConn479.r, odriverConn479.setup)
}
func (odriverConn479 *tdriverConn479) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn479.r, odriverConn479.setup, query)
}
func (odriverConn479 *tdriverConn479) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn479.r, odriverConn479.setup, ctx, opts)
}
func (odriverConn479 *tdriverConn479) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn479.r, odriverConn479.setup, ctx, query)
}
func (odriverConn479 *tdriverConn479) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn479.r, odriverConn479.setup, query, args)
}
func (odriverConn479 *tdriverConn479) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn479.r, odriverConn479.setup, param0)
}
func (odriverConn479 *tdriverConn479) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn479.r, odriverConn479.setup, query, args)
}
func (odriverConn479 *tdriverConn479) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn479.r, odriverConn479.setup, ctx, query, args)
}
func (odriverConn479 *tdriverConn479) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn479.r, odriverConn479.setup, ctx)
}

func (odriverConn480 *tdriverConn480) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn480.r, odriverConn480.setup)
}
func (odriverConn480 *tdriverConn480) Close() error {
	return traceDCClose(odriverConn480.r, odriverConn480.setup)
}
func (odriverConn480 *tdriverConn480) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn480.r, odriverConn480.setup, query)
}
func (odriverConn480 *tdriverConn480) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn480.r, odriverConn480.setup, ctx, opts)
}
func (odriverConn480 *tdriverConn480) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn480.r, odriverConn480.setup, ctx, query)
}
func (odriverConn480 *tdriverConn480) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn480.r, odriverConn480.setup, query, args)
}
func (odriverConn480 *tdriverConn480) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn480.r, odriverConn480.setup, ctx)
}
func (odriverConn480 *tdriverConn480) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn480.r, odriverConn480.setup, query, args)
}
func (odriverConn480 *tdriverConn480) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn480.r, odriverConn480.setup, ctx, query, args)
}
func (odriverConn480 *tdriverConn480) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn480.r, odriverConn480.setup, ctx)
}

func (odriverConn481 *tdriverConn481) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn481.r, odriverConn481.setup)
}
func (odriverConn481 *tdriverConn481) Close() error {
	return traceDCClose(odriverConn481.r, odriverConn481.setup)
}
func (odriverConn481 *tdriverConn481) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn481.r, odriverConn481.setup, query)
}
func (odriverConn481 *tdriverConn481) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn481.r, odriverConn481.setup, ctx, opts)
}
func (odriverConn481 *tdriverConn481) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn481.r, odriverConn481.setup, ctx, query)
}
func (odriverConn481 *tdriverConn481) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn481.r, odriverConn481.setup, ctx, query, args)
}
func (odriverConn481 *tdriverConn481) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn481.r, odriverConn481.setup, param0)
}
func (odriverConn481 *tdriverConn481) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn481.r, odriverConn481.setup, ctx)
}
func (odriverConn481 *tdriverConn481) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn481.r, odriverConn481.setup, query, args)
}
func (odriverConn481 *tdriverConn481) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn481.r, odriverConn481.setup, ctx, query, args)
}

func (odriverConn482 *tdriverConn482) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn482.r, odriverConn482.setup)
}
func (odriverConn482 *tdriverConn482) Close() error {
	return traceDCClose(odriverConn482.r, odriverConn482.setup)
}
func (odriverConn482 *tdriverConn482) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn482.r, odriverConn482.setup, query)
}
func (odriverConn482 *tdriverConn482) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn482.r, odriverConn482.setup, ctx, opts)
}
func (odriverConn482 *tdriverConn482) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn482.r, odriverConn482.setup, ctx, query)
}
func (odriverConn482 *tdriverConn482) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn482.r, odriverConn482.setup, ctx, query, args)
}
func (odriverConn482 *tdriverConn482) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn482.r, odriverConn482.setup, param0)
}
func (odriverConn482 *tdriverConn482) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn482.r, odriverConn482.setup, ctx)
}
func (odriverConn482 *tdriverConn482) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn482.r, odriverConn482.setup, query, args)
}
func (odriverConn482 *tdriverConn482) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn482.r, odriverConn482.setup, ctx)
}

func (odriverConn483 *tdriverConn483) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn483.r, odriverConn483.setup)
}
func (odriverConn483 *tdriverConn483) Close() error {
	return traceDCClose(odriverConn483.r, odriverConn483.setup)
}
func (odriverConn483 *tdriverConn483) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn483.r, odriverConn483.setup, query)
}
func (odriverConn483 *tdriverConn483) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn483.r, odriverConn483.setup, ctx, opts)
}
func (odriverConn483 *tdriverConn483) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn483.r, odriverConn483.setup, ctx, query)
}
func (odriverConn483 *tdriverConn483) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn483.r, odriverConn483.setup, ctx, query, args)
}
func (odriverConn483 *tdriverConn483) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn483.r, odriverConn483.setup, param0)
}
func (odriverConn483 *tdriverConn483) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn483.r, odriverConn483.setup, ctx)
}
func (odriverConn483 *tdriverConn483) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn483.r, odriverConn483.setup, ctx, query, args)
}
func (odriverConn483 *tdriverConn483) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn483.r, odriverConn483.setup, ctx)
}

func (odriverConn484 *tdriverConn484) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn484.r, odriverConn484.setup)
}
func (odriverConn484 *tdriverConn484) Close() error {
	return traceDCClose(odriverConn484.r, odriverConn484.setup)
}
func (odriverConn484 *tdriverConn484) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn484.r, odriverConn484.setup, query)
}
func (odriverConn484 *tdriverConn484) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn484.r, odriverConn484.setup, ctx, opts)
}
func (odriverConn484 *tdriverConn484) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn484.r, odriverConn484.setup, ctx, query)
}
func (odriverConn484 *tdriverConn484) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn484.r, odriverConn484.setup, ctx, query, args)
}
func (odriverConn484 *tdriverConn484) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn484.r, odriverConn484.setup, param0)
}
func (odriverConn484 *tdriverConn484) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn484.r, odriverConn484.setup, query, args)
}
func (odriverConn484 *tdriverConn484) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn484.r, odriverConn484.setup, ctx, query, args)
}
func (odriverConn484 *tdriverConn484) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn484.r, odriverConn484.setup, ctx)
}

func (odriverConn485 *tdriverConn485) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn485.r, odriverConn485.setup)
}
func (odriverConn485 *tdriverConn485) Close() error {
	return traceDCClose(odriverConn485.r, odriverConn485.setup)
}
func (odriverConn485 *tdriverConn485) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn485.r, odriverConn485.setup, query)
}
func (odriverConn485 *tdriverConn485) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn485.r, odriverConn485.setup, ctx, opts)
}
func (odriverConn485 *tdriverConn485) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn485.r, odriverConn485.setup, ctx, query)
}
func (odriverConn485 *tdriverConn485) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn485.r, odriverConn485.setup, ctx, query, args)
}
func (odriverConn485 *tdriverConn485) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn485.r, odriverConn485.setup, ctx)
}
func (odriverConn485 *tdriverConn485) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn485.r, odriverConn485.setup, query, args)
}
func (odriverConn485 *tdriverConn485) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn485.r, odriverConn485.setup, ctx, query, args)
}
func (odriverConn485 *tdriverConn485) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn485.r, odriverConn485.setup, ctx)
}

func (odriverConn486 *tdriverConn486) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn486.r, odriverConn486.setup)
}
func (odriverConn486 *tdriverConn486) Close() error {
	return traceDCClose(odriverConn486.r, odriverConn486.setup)
}
func (odriverConn486 *tdriverConn486) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn486.r, odriverConn486.setup, query)
}
func (odriverConn486 *tdriverConn486) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn486.r, odriverConn486.setup, ctx, opts)
}
func (odriverConn486 *tdriverConn486) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn486.r, odriverConn486.setup, ctx, query)
}
func (odriverConn486 *tdriverConn486) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn486.r, odriverConn486.setup, param0)
}
func (odriverConn486 *tdriverConn486) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn486.r, odriverConn486.setup, ctx)
}
func (odriverConn486 *tdriverConn486) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn486.r, odriverConn486.setup, query, args)
}
func (odriverConn486 *tdriverConn486) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn486.r, odriverConn486.setup, ctx, query, args)
}
func (odriverConn486 *tdriverConn486) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn486.r, odriverConn486.setup, ctx)
}

func (odriverConn487 *tdriverConn487) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn487.r, odriverConn487.setup)
}
func (odriverConn487 *tdriverConn487) Close() error {
	return traceDCClose(odriverConn487.r, odriverConn487.setup)
}
func (odriverConn487 *tdriverConn487) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn487.r, odriverConn487.setup, query)
}
func (odriverConn487 *tdriverConn487) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn487.r, odriverConn487.setup, ctx, opts)
}
func (odriverConn487 *tdriverConn487) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn487.r, odriverConn487.setup, query, args)
}
func (odriverConn487 *tdriverConn487) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn487.r, odriverConn487.setup, ctx, query, args)
}
func (odriverConn487 *tdriverConn487) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn487.r, odriverConn487.setup, param0)
}
func (odriverConn487 *tdriverConn487) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn487.r, odriverConn487.setup, ctx)
}
func (odriverConn487 *tdriverConn487) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn487.r, odriverConn487.setup, query, args)
}
func (odriverConn487 *tdriverConn487) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn487.r, odriverConn487.setup, ctx, query, args)
}

func (odriverConn488 *tdriverConn488) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn488.r, odriverConn488.setup)
}
func (odriverConn488 *tdriverConn488) Close() error {
	return traceDCClose(odriverConn488.r, odriverConn488.setup)
}
func (odriverConn488 *tdriverConn488) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn488.r, odriverConn488.setup, query)
}
func (odriverConn488 *tdriverConn488) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn488.r, odriverConn488.setup, ctx, opts)
}
func (odriverConn488 *tdriverConn488) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn488.r, odriverConn488.setup, query, args)
}
func (odriverConn488 *tdriverConn488) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn488.r, odriverConn488.setup, ctx, query, args)
}
func (odriverConn488 *tdriverConn488) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn488.r, odriverConn488.setup, param0)
}
func (odriverConn488 *tdriverConn488) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn488.r, odriverConn488.setup, ctx)
}
func (odriverConn488 *tdriverConn488) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn488.r, odriverConn488.setup, query, args)
}
func (odriverConn488 *tdriverConn488) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn488.r, odriverConn488.setup, ctx)
}

func (odriverConn489 *tdriverConn489) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn489.r, odriverConn489.setup)
}
func (odriverConn489 *tdriverConn489) Close() error {
	return traceDCClose(odriverConn489.r, odriverConn489.setup)
}
func (odriverConn489 *tdriverConn489) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn489.r, odriverConn489.setup, query)
}
func (odriverConn489 *tdriverConn489) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn489.r, odriverConn489.setup, ctx, opts)
}
func (odriverConn489 *tdriverConn489) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn489.r, odriverConn489.setup, query, args)
}
func (odriverConn489 *tdriverConn489) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn489.r, odriverConn489.setup, ctx, query, args)
}
func (odriverConn489 *tdriverConn489) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn489.r, odriverConn489.setup, param0)
}
func (odriverConn489 *tdriverConn489) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn489.r, odriverConn489.setup, ctx)
}
func (odriverConn489 *tdriverConn489) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn489.r, odriverConn489.setup, ctx, query, args)
}
func (odriverConn489 *tdriverConn489) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn489.r, odriverConn489.setup, ctx)
}

func (odriverConn490 *tdriverConn490) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn490.r, odriverConn490.setup)
}
func (odriverConn490 *tdriverConn490) Close() error {
	return traceDCClose(odriverConn490.r, odriverConn490.setup)
}
func (odriverConn490 *tdriverConn490) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn490.r, odriverConn490.setup, query)
}
func (odriverConn490 *tdriverConn490) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn490.r, odriverConn490.setup, ctx, opts)
}
func (odriverConn490 *tdriverConn490) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn490.r, odriverConn490.setup, query, args)
}
func (odriverConn490 *tdriverConn490) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn490.r, odriverConn490.setup, ctx, query, args)
}
func (odriverConn490 *tdriverConn490) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn490.r, odriverConn490.setup, param0)
}
func (odriverConn490 *tdriverConn490) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn490.r, odriverConn490.setup, query, args)
}
func (odriverConn490 *tdriverConn490) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn490.r, odriverConn490.setup, ctx, query, args)
}
func (odriverConn490 *tdriverConn490) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn490.r, odriverConn490.setup, ctx)
}

func (odriverConn491 *tdriverConn491) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn491.r, odriverConn491.setup)
}
func (odriverConn491 *tdriverConn491) Close() error {
	return traceDCClose(odriverConn491.r, odriverConn491.setup)
}
func (odriverConn491 *tdriverConn491) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn491.r, odriverConn491.setup, query)
}
func (odriverConn491 *tdriverConn491) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn491.r, odriverConn491.setup, ctx, opts)
}
func (odriverConn491 *tdriverConn491) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn491.r, odriverConn491.setup, query, args)
}
func (odriverConn491 *tdriverConn491) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn491.r, odriverConn491.setup, ctx, query, args)
}
func (odriverConn491 *tdriverConn491) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn491.r, odriverConn491.setup, ctx)
}
func (odriverConn491 *tdriverConn491) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn491.r, odriverConn491.setup, query, args)
}
func (odriverConn491 *tdriverConn491) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn491.r, odriverConn491.setup, ctx, query, args)
}
func (odriverConn491 *tdriverConn491) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn491.r, odriverConn491.setup, ctx)
}

func (odriverConn492 *tdriverConn492) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn492.r, odriverConn492.setup)
}
func (odriverConn492 *tdriverConn492) Close() error {
	return traceDCClose(odriverConn492.r, odriverConn492.setup)
}
func (odriverConn492 *tdriverConn492) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn492.r, odriverConn492.setup, query)
}
func (odriverConn492 *tdriverConn492) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn492.r, odriverConn492.setup, ctx, opts)
}
func (odriverConn492 *tdriverConn492) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn492.r, odriverConn492.setup, query, args)
}
func (odriverConn492 *tdriverConn492) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn492.r, odriverConn492.setup, param0)
}
func (odriverConn492 *tdriverConn492) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn492.r, odriverConn492.setup, ctx)
}
func (odriverConn492 *tdriverConn492) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn492.r, odriverConn492.setup, query, args)
}
func (odriverConn492 *tdriverConn492) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn492.r, odriverConn492.setup, ctx, query, args)
}
func (odriverConn492 *tdriverConn492) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn492.r, odriverConn492.setup, ctx)
}

func (odriverConn493 *tdriverConn493) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn493.r, odriverConn493.setup)
}
func (odriverConn493 *tdriverConn493) Close() error {
	return traceDCClose(odriverConn493.r, odriverConn493.setup)
}
func (odriverConn493 *tdriverConn493) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn493.r, odriverConn493.setup, query)
}
func (odriverConn493 *tdriverConn493) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn493.r, odriverConn493.setup, ctx, opts)
}
func (odriverConn493 *tdriverConn493) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn493.r, odriverConn493.setup, ctx, query, args)
}
func (odriverConn493 *tdriverConn493) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn493.r, odriverConn493.setup, param0)
}
func (odriverConn493 *tdriverConn493) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn493.r, odriverConn493.setup, ctx)
}
func (odriverConn493 *tdriverConn493) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn493.r, odriverConn493.setup, query, args)
}
func (odriverConn493 *tdriverConn493) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn493.r, odriverConn493.setup, ctx, query, args)
}
func (odriverConn493 *tdriverConn493) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn493.r, odriverConn493.setup, ctx)
}

func (odriverConn494 *tdriverConn494) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn494.r, odriverConn494.setup)
}
func (odriverConn494 *tdriverConn494) Close() error {
	return traceDCClose(odriverConn494.r, odriverConn494.setup)
}
func (odriverConn494 *tdriverConn494) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn494.r, odriverConn494.setup, query)
}
func (odriverConn494 *tdriverConn494) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn494.r, odriverConn494.setup, ctx, query)
}
func (odriverConn494 *tdriverConn494) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn494.r, odriverConn494.setup, query, args)
}
func (odriverConn494 *tdriverConn494) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn494.r, odriverConn494.setup, ctx, query, args)
}
func (odriverConn494 *tdriverConn494) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn494.r, odriverConn494.setup, param0)
}
func (odriverConn494 *tdriverConn494) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn494.r, odriverConn494.setup, ctx)
}
func (odriverConn494 *tdriverConn494) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn494.r, odriverConn494.setup, query, args)
}
func (odriverConn494 *tdriverConn494) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn494.r, odriverConn494.setup, ctx, query, args)
}

func (odriverConn495 *tdriverConn495) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn495.r, odriverConn495.setup)
}
func (odriverConn495 *tdriverConn495) Close() error {
	return traceDCClose(odriverConn495.r, odriverConn495.setup)
}
func (odriverConn495 *tdriverConn495) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn495.r, odriverConn495.setup, query)
}
func (odriverConn495 *tdriverConn495) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn495.r, odriverConn495.setup, ctx, query)
}
func (odriverConn495 *tdriverConn495) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn495.r, odriverConn495.setup, query, args)
}
func (odriverConn495 *tdriverConn495) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn495.r, odriverConn495.setup, ctx, query, args)
}
func (odriverConn495 *tdriverConn495) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn495.r, odriverConn495.setup, param0)
}
func (odriverConn495 *tdriverConn495) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn495.r, odriverConn495.setup, ctx)
}
func (odriverConn495 *tdriverConn495) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn495.r, odriverConn495.setup, query, args)
}
func (odriverConn495 *tdriverConn495) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn495.r, odriverConn495.setup, ctx)
}

func (odriverConn496 *tdriverConn496) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn496.r, odriverConn496.setup)
}
func (odriverConn496 *tdriverConn496) Close() error {
	return traceDCClose(odriverConn496.r, odriverConn496.setup)
}
func (odriverConn496 *tdriverConn496) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn496.r, odriverConn496.setup, query)
}
func (odriverConn496 *tdriverConn496) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn496.r, odriverConn496.setup, ctx, query)
}
func (odriverConn496 *tdriverConn496) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn496.r, odriverConn496.setup, query, args)
}
func (odriverConn496 *tdriverConn496) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn496.r, odriverConn496.setup, ctx, query, args)
}
func (odriverConn496 *tdriverConn496) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn496.r, odriverConn496.setup, param0)
}
func (odriverConn496 *tdriverConn496) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn496.r, odriverConn496.setup, ctx)
}
func (odriverConn496 *tdriverConn496) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn496.r, odriverConn496.setup, ctx, query, args)
}
func (odriverConn496 *tdriverConn496) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn496.r, odriverConn496.setup, ctx)
}

func (odriverConn497 *tdriverConn497) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn497.r, odriverConn497.setup)
}
func (odriverConn497 *tdriverConn497) Close() error {
	return traceDCClose(odriverConn497.r, odriverConn497.setup)
}
func (odriverConn497 *tdriverConn497) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn497.r, odriverConn497.setup, query)
}
func (odriverConn497 *tdriverConn497) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn497.r, odriverConn497.setup, ctx, query)
}
func (odriverConn497 *tdriverConn497) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn497.r, odriverConn497.setup, query, args)
}
func (odriverConn497 *tdriverConn497) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn497.r, odriverConn497.setup, ctx, query, args)
}
func (odriverConn497 *tdriverConn497) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn497.r, odriverConn497.setup, param0)
}
func (odriverConn497 *tdriverConn497) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn497.r, odriverConn497.setup, query, args)
}
func (odriverConn497 *tdriverConn497) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn497.r, odriverConn497.setup, ctx, query, args)
}
func (odriverConn497 *tdriverConn497) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn497.r, odriverConn497.setup, ctx)
}

func (odriverConn498 *tdriverConn498) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn498.r, odriverConn498.setup)
}
func (odriverConn498 *tdriverConn498) Close() error {
	return traceDCClose(odriverConn498.r, odriverConn498.setup)
}
func (odriverConn498 *tdriverConn498) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn498.r, odriverConn498.setup, query)
}
func (odriverConn498 *tdriverConn498) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn498.r, odriverConn498.setup, ctx, query)
}
func (odriverConn498 *tdriverConn498) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn498.r, odriverConn498.setup, query, args)
}
func (odriverConn498 *tdriverConn498) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn498.r, odriverConn498.setup, ctx, query, args)
}
func (odriverConn498 *tdriverConn498) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn498.r, odriverConn498.setup, ctx)
}
func (odriverConn498 *tdriverConn498) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn498.r, odriverConn498.setup, query, args)
}
func (odriverConn498 *tdriverConn498) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn498.r, odriverConn498.setup, ctx, query, args)
}
func (odriverConn498 *tdriverConn498) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn498.r, odriverConn498.setup, ctx)
}

func (odriverConn499 *tdriverConn499) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn499.r, odriverConn499.setup)
}
func (odriverConn499 *tdriverConn499) Close() error {
	return traceDCClose(odriverConn499.r, odriverConn499.setup)
}
func (odriverConn499 *tdriverConn499) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn499.r, odriverConn499.setup, query)
}
func (odriverConn499 *tdriverConn499) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn499.r, odriverConn499.setup, ctx, query)
}
func (odriverConn499 *tdriverConn499) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn499.r, odriverConn499.setup, query, args)
}
func (odriverConn499 *tdriverConn499) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn499.r, odriverConn499.setup, param0)
}
func (odriverConn499 *tdriverConn499) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn499.r, odriverConn499.setup, ctx)
}
func (odriverConn499 *tdriverConn499) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn499.r, odriverConn499.setup, query, args)
}
func (odriverConn499 *tdriverConn499) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn499.r, odriverConn499.setup, ctx, query, args)
}
func (odriverConn499 *tdriverConn499) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn499.r, odriverConn499.setup, ctx)
}

func (odriverConn500 *tdriverConn500) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn500.r, odriverConn500.setup)
}
func (odriverConn500 *tdriverConn500) Close() error {
	return traceDCClose(odriverConn500.r, odriverConn500.setup)
}
func (odriverConn500 *tdriverConn500) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn500.r, odriverConn500.setup, query)
}
func (odriverConn500 *tdriverConn500) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn500.r, odriverConn500.setup, ctx, query)
}
func (odriverConn500 *tdriverConn500) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn500.r, odriverConn500.setup, ctx, query, args)
}
func (odriverConn500 *tdriverConn500) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn500.r, odriverConn500.setup, param0)
}
func (odriverConn500 *tdriverConn500) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn500.r, odriverConn500.setup, ctx)
}
func (odriverConn500 *tdriverConn500) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn500.r, odriverConn500.setup, query, args)
}
func (odriverConn500 *tdriverConn500) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn500.r, odriverConn500.setup, ctx, query, args)
}
func (odriverConn500 *tdriverConn500) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn500.r, odriverConn500.setup, ctx)
}

func (odriverConn501 *tdriverConn501) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn501.r, odriverConn501.setup)
}
func (odriverConn501 *tdriverConn501) Close() error {
	return traceDCClose(odriverConn501.r, odriverConn501.setup)
}
func (odriverConn501 *tdriverConn501) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn501.r, odriverConn501.setup, query)
}
func (odriverConn501 *tdriverConn501) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn501.r, odriverConn501.setup, query, args)
}
func (odriverConn501 *tdriverConn501) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn501.r, odriverConn501.setup, ctx, query, args)
}
func (odriverConn501 *tdriverConn501) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn501.r, odriverConn501.setup, param0)
}
func (odriverConn501 *tdriverConn501) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn501.r, odriverConn501.setup, ctx)
}
func (odriverConn501 *tdriverConn501) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn501.r, odriverConn501.setup, query, args)
}
func (odriverConn501 *tdriverConn501) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn501.r, odriverConn501.setup, ctx, query, args)
}
func (odriverConn501 *tdriverConn501) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn501.r, odriverConn501.setup, ctx)
}

func (odriverConn502 *tdriverConn502) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn502.r, odriverConn502.setup)
}
func (odriverConn502 *tdriverConn502) Close() error {
	return traceDCClose(odriverConn502.r, odriverConn502.setup)
}
func (odriverConn502 *tdriverConn502) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn502.r, odriverConn502.setup, query)
}
func (odriverConn502 *tdriverConn502) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn502.r, odriverConn502.setup, ctx, opts)
}
func (odriverConn502 *tdriverConn502) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn502.r, odriverConn502.setup, ctx, query)
}
func (odriverConn502 *tdriverConn502) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn502.r, odriverConn502.setup, query, args)
}
func (odriverConn502 *tdriverConn502) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn502.r, odriverConn502.setup, ctx, query, args)
}
func (odriverConn502 *tdriverConn502) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn502.r, odriverConn502.setup, param0)
}
func (odriverConn502 *tdriverConn502) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn502.r, odriverConn502.setup, ctx)
}
func (odriverConn502 *tdriverConn502) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn502.r, odriverConn502.setup, query, args)
}
func (odriverConn502 *tdriverConn502) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn502.r, odriverConn502.setup, ctx, query, args)
}

func (odriverConn503 *tdriverConn503) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn503.r, odriverConn503.setup)
}
func (odriverConn503 *tdriverConn503) Close() error {
	return traceDCClose(odriverConn503.r, odriverConn503.setup)
}
func (odriverConn503 *tdriverConn503) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn503.r, odriverConn503.setup, query)
}
func (odriverConn503 *tdriverConn503) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn503.r, odriverConn503.setup, ctx, opts)
}
func (odriverConn503 *tdriverConn503) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn503.r, odriverConn503.setup, ctx, query)
}
func (odriverConn503 *tdriverConn503) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn503.r, odriverConn503.setup, query, args)
}
func (odriverConn503 *tdriverConn503) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn503.r, odriverConn503.setup, ctx, query, args)
}
func (odriverConn503 *tdriverConn503) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn503.r, odriverConn503.setup, param0)
}
func (odriverConn503 *tdriverConn503) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn503.r, odriverConn503.setup, ctx)
}
func (odriverConn503 *tdriverConn503) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn503.r, odriverConn503.setup, query, args)
}
func (odriverConn503 *tdriverConn503) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn503.r, odriverConn503.setup, ctx)
}

func (odriverConn504 *tdriverConn504) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn504.r, odriverConn504.setup)
}
func (odriverConn504 *tdriverConn504) Close() error {
	return traceDCClose(odriverConn504.r, odriverConn504.setup)
}
func (odriverConn504 *tdriverConn504) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn504.r, odriverConn504.setup, query)
}
func (odriverConn504 *tdriverConn504) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn504.r, odriverConn504.setup, ctx, opts)
}
func (odriverConn504 *tdriverConn504) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn504.r, odriverConn504.setup, ctx, query)
}
func (odriverConn504 *tdriverConn504) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn504.r, odriverConn504.setup, query, args)
}
func (odriverConn504 *tdriverConn504) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn504.r, odriverConn504.setup, ctx, query, args)
}
func (odriverConn504 *tdriverConn504) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn504.r, odriverConn504.setup, param0)
}
func (odriverConn504 *tdriverConn504) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn504.r, odriverConn504.setup, ctx)
}
func (odriverConn504 *tdriverConn504) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn504.r, odriverConn504.setup, ctx, query, args)
}
func (odriverConn504 *tdriverConn504) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn504.r, odriverConn504.setup, ctx)
}

func (odriverConn505 *tdriverConn505) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn505.r, odriverConn505.setup)
}
func (odriverConn505 *tdriverConn505) Close() error {
	return traceDCClose(odriverConn505.r, odriverConn505.setup)
}
func (odriverConn505 *tdriverConn505) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn505.r, odriverConn505.setup, query)
}
func (odriverConn505 *tdriverConn505) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn505.r, odriverConn505.setup, ctx, opts)
}
func (odriverConn505 *tdriverConn505) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn505.r, odriverConn505.setup, ctx, query)
}
func (odriverConn505 *tdriverConn505) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn505.r, odriverConn505.setup, query, args)
}
func (odriverConn505 *tdriverConn505) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn505.r, odriverConn505.setup, ctx, query, args)
}
func (odriverConn505 *tdriverConn505) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn505.r, odriverConn505.setup, param0)
}
func (odriverConn505 *tdriverConn505) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn505.r, odriverConn505.setup, query, args)
}
func (odriverConn505 *tdriverConn505) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn505.r, odriverConn505.setup, ctx, query, args)
}
func (odriverConn505 *tdriverConn505) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn505.r, odriverConn505.setup, ctx)
}

func (odriverConn506 *tdriverConn506) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn506.r, odriverConn506.setup)
}
func (odriverConn506 *tdriverConn506) Close() error {
	return traceDCClose(odriverConn506.r, odriverConn506.setup)
}
func (odriverConn506 *tdriverConn506) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn506.r, odriverConn506.setup, query)
}
func (odriverConn506 *tdriverConn506) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn506.r, odriverConn506.setup, ctx, opts)
}
func (odriverConn506 *tdriverConn506) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn506.r, odriverConn506.setup, ctx, query)
}
func (odriverConn506 *tdriverConn506) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn506.r, odriverConn506.setup, query, args)
}
func (odriverConn506 *tdriverConn506) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn506.r, odriverConn506.setup, ctx, query, args)
}
func (odriverConn506 *tdriverConn506) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn506.r, odriverConn506.setup, ctx)
}
func (odriverConn506 *tdriverConn506) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn506.r, odriverConn506.setup, query, args)
}
func (odriverConn506 *tdriverConn506) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn506.r, odriverConn506.setup, ctx, query, args)
}
func (odriverConn506 *tdriverConn506) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn506.r, odriverConn506.setup, ctx)
}

func (odriverConn507 *tdriverConn507) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn507.r, odriverConn507.setup)
}
func (odriverConn507 *tdriverConn507) Close() error {
	return traceDCClose(odriverConn507.r, odriverConn507.setup)
}
func (odriverConn507 *tdriverConn507) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn507.r, odriverConn507.setup, query)
}
func (odriverConn507 *tdriverConn507) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn507.r, odriverConn507.setup, ctx, opts)
}
func (odriverConn507 *tdriverConn507) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn507.r, odriverConn507.setup, ctx, query)
}
func (odriverConn507 *tdriverConn507) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn507.r, odriverConn507.setup, query, args)
}
func (odriverConn507 *tdriverConn507) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn507.r, odriverConn507.setup, param0)
}
func (odriverConn507 *tdriverConn507) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn507.r, odriverConn507.setup, ctx)
}
func (odriverConn507 *tdriverConn507) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn507.r, odriverConn507.setup, query, args)
}
func (odriverConn507 *tdriverConn507) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn507.r, odriverConn507.setup, ctx, query, args)
}
func (odriverConn507 *tdriverConn507) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn507.r, odriverConn507.setup, ctx)
}

func (odriverConn508 *tdriverConn508) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn508.r, odriverConn508.setup)
}
func (odriverConn508 *tdriverConn508) Close() error {
	return traceDCClose(odriverConn508.r, odriverConn508.setup)
}
func (odriverConn508 *tdriverConn508) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn508.r, odriverConn508.setup, query)
}
func (odriverConn508 *tdriverConn508) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn508.r, odriverConn508.setup, ctx, opts)
}
func (odriverConn508 *tdriverConn508) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn508.r, odriverConn508.setup, ctx, query)
}
func (odriverConn508 *tdriverConn508) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn508.r, odriverConn508.setup, ctx, query, args)
}
func (odriverConn508 *tdriverConn508) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn508.r, odriverConn508.setup, param0)
}
func (odriverConn508 *tdriverConn508) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn508.r, odriverConn508.setup, ctx)
}
func (odriverConn508 *tdriverConn508) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn508.r, odriverConn508.setup, query, args)
}
func (odriverConn508 *tdriverConn508) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn508.r, odriverConn508.setup, ctx, query, args)
}
func (odriverConn508 *tdriverConn508) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn508.r, odriverConn508.setup, ctx)
}

func (odriverConn509 *tdriverConn509) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn509.r, odriverConn509.setup)
}
func (odriverConn509 *tdriverConn509) Close() error {
	return traceDCClose(odriverConn509.r, odriverConn509.setup)
}
func (odriverConn509 *tdriverConn509) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn509.r, odriverConn509.setup, query)
}
func (odriverConn509 *tdriverConn509) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn509.r, odriverConn509.setup, ctx, opts)
}
func (odriverConn509 *tdriverConn509) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn509.r, odriverConn509.setup, query, args)
}
func (odriverConn509 *tdriverConn509) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn509.r, odriverConn509.setup, ctx, query, args)
}
func (odriverConn509 *tdriverConn509) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn509.r, odriverConn509.setup, param0)
}
func (odriverConn509 *tdriverConn509) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn509.r, odriverConn509.setup, ctx)
}
func (odriverConn509 *tdriverConn509) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn509.r, odriverConn509.setup, query, args)
}
func (odriverConn509 *tdriverConn509) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn509.r, odriverConn509.setup, ctx, query, args)
}
func (odriverConn509 *tdriverConn509) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn509.r, odriverConn509.setup, ctx)
}

func (odriverConn510 *tdriverConn510) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn510.r, odriverConn510.setup)
}
func (odriverConn510 *tdriverConn510) Close() error {
	return traceDCClose(odriverConn510.r, odriverConn510.setup)
}
func (odriverConn510 *tdriverConn510) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn510.r, odriverConn510.setup, query)
}
func (odriverConn510 *tdriverConn510) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn510.r, odriverConn510.setup, ctx, query)
}
func (odriverConn510 *tdriverConn510) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn510.r, odriverConn510.setup, query, args)
}
func (odriverConn510 *tdriverConn510) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn510.r, odriverConn510.setup, ctx, query, args)
}
func (odriverConn510 *tdriverConn510) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn510.r, odriverConn510.setup, param0)
}
func (odriverConn510 *tdriverConn510) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn510.r, odriverConn510.setup, ctx)
}
func (odriverConn510 *tdriverConn510) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn510.r, odriverConn510.setup, query, args)
}
func (odriverConn510 *tdriverConn510) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn510.r, odriverConn510.setup, ctx, query, args)
}
func (odriverConn510 *tdriverConn510) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn510.r, odriverConn510.setup, ctx)
}

func (odriverConn511 *tdriverConn511) Begin() (driver.Tx, error) {
	return traceDCBegin(odriverConn511.r, odriverConn511.setup)
}
func (odriverConn511 *tdriverConn511) Close() error {
	return traceDCClose(odriverConn511.r, odriverConn511.setup)
}
func (odriverConn511 *tdriverConn511) Prepare(query string) (driver.Stmt, error) {
	return traceDCPrepare(odriverConn511.r, odriverConn511.setup, query)
}
func (odriverConn511 *tdriverConn511) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return traceDCBeginTx(odriverConn511.r, odriverConn511.setup, ctx, opts)
}
func (odriverConn511 *tdriverConn511) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return traceDCPrepareContext(odriverConn511.r, odriverConn511.setup, ctx, query)
}
func (odriverConn511 *tdriverConn511) Exec(query string, args []driver.Value) (driver.Result, error) {
	return traceDCExec(odriverConn511.r, odriverConn511.setup, query, args)
}
func (odriverConn511 *tdriverConn511) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return traceDCExecContext(odriverConn511.r, odriverConn511.setup, ctx, query, args)
}
func (odriverConn511 *tdriverConn511) CheckNamedValue(param0 *driver.NamedValue) error {
	return traceDCCheckNamedValue(odriverConn511.r, odriverConn511.setup, param0)
}
func (odriverConn511 *tdriverConn511) Ping(ctx context.Context) error {
	return traceDCPing(odriverConn511.r, odriverConn511.setup, ctx)
}
func (odriverConn511 *tdriverConn511) Query(query string, args []driver.Value) (driver.Rows, error) {
	return traceDCQuery(odriverConn511.r, odriverConn511.setup, query, args)
}
func (odriverConn511 *tdriverConn511) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return traceDCQueryContext(odriverConn511.r, odriverConn511.setup, ctx, query, args)
}
func (odriverConn511 *tdriverConn511) ResetSession(ctx context.Context) error {
	return traceDCResetSession(odriverConn511.r, odriverConn511.setup, ctx)
}

func newConn(traceDCConn driver.Conn, setup *tracingSetup) driver.Conn {
	switch r := traceDCConn.(type) {
	case idriverConn511:
		return &tdriverConn511{
			r:     r,
			setup: setup,
		}
	case idriverConn510:
		return &tdriverConn510{
			r:     r,
			setup: setup,
		}
	case idriverConn509:
		return &tdriverConn509{
			r:     r,
			setup: setup,
		}
	case idriverConn508:
		return &tdriverConn508{
			r:     r,
			setup: setup,
		}
	case idriverConn507:
		return &tdriverConn507{
			r:     r,
			setup: setup,
		}
	case idriverConn506:
		return &tdriverConn506{
			r:     r,
			setup: setup,
		}
	case idriverConn505:
		return &tdriverConn505{
			r:     r,
			setup: setup,
		}
	case idriverConn504:
		return &tdriverConn504{
			r:     r,
			setup: setup,
		}
	case idriverConn503:
		return &tdriverConn503{
			r:     r,
			setup: setup,
		}
	case idriverConn502:
		return &tdriverConn502{
			r:     r,
			setup: setup,
		}
	case idriverConn501:
		return &tdriverConn501{
			r:     r,
			setup: setup,
		}
	case idriverConn500:
		return &tdriverConn500{
			r:     r,
			setup: setup,
		}
	case idriverConn499:
		return &tdriverConn499{
			r:     r,
			setup: setup,
		}
	case idriverConn498:
		return &tdriverConn498{
			r:     r,
			setup: setup,
		}
	case idriverConn497:
		return &tdriverConn497{
			r:     r,
			setup: setup,
		}
	case idriverConn496:
		return &tdriverConn496{
			r:     r,
			setup: setup,
		}
	case idriverConn495:
		return &tdriverConn495{
			r:     r,
			setup: setup,
		}
	case idriverConn494:
		return &tdriverConn494{
			r:     r,
			setup: setup,
		}
	case idriverConn493:
		return &tdriverConn493{
			r:     r,
			setup: setup,
		}
	case idriverConn492:
		return &tdriverConn492{
			r:     r,
			setup: setup,
		}
	case idriverConn491:
		return &tdriverConn491{
			r:     r,
			setup: setup,
		}
	case idriverConn490:
		return &tdriverConn490{
			r:     r,
			setup: setup,
		}
	case idriverConn489:
		return &tdriverConn489{
			r:     r,
			setup: setup,
		}
	case idriverConn488:
		return &tdriverConn488{
			r:     r,
			setup: setup,
		}
	case idriverConn487:
		return &tdriverConn487{
			r:     r,
			setup: setup,
		}
	case idriverConn486:
		return &tdriverConn486{
			r:     r,
			setup: setup,
		}
	case idriverConn485:
		return &tdriverConn485{
			r:     r,
			setup: setup,
		}
	case idriverConn484:
		return &tdriverConn484{
			r:     r,
			setup: setup,
		}
	case idriverConn483:
		return &tdriverConn483{
			r:     r,
			setup: setup,
		}
	case idriverConn482:
		return &tdriverConn482{
			r:     r,
			setup: setup,
		}
	case idriverConn481:
		return &tdriverConn481{
			r:     r,
			setup: setup,
		}
	case idriverConn480:
		return &tdriverConn480{
			r:     r,
			setup: setup,
		}
	case idriverConn479:
		return &tdriverConn479{
			r:     r,
			setup: setup,
		}
	case idriverConn478:
		return &tdriverConn478{
			r:     r,
			setup: setup,
		}
	case idriverConn477:
		return &tdriverConn477{
			r:     r,
			setup: setup,
		}
	case idriverConn476:
		return &tdriverConn476{
			r:     r,
			setup: setup,
		}
	case idriverConn475:
		return &tdriverConn475{
			r:     r,
			setup: setup,
		}
	case idriverConn474:
		return &tdriverConn474{
			r:     r,
			setup: setup,
		}
	case idriverConn473:
		return &tdriverConn473{
			r:     r,
			setup: setup,
		}
	case idriverConn472:
		return &tdriverConn472{
			r:     r,
			setup: setup,
		}
	case idriverConn471:
		return &tdriverConn471{
			r:     r,
			setup: setup,
		}
	case idriverConn470:
		return &tdriverConn470{
			r:     r,
			setup: setup,
		}
	case idriverConn469:
		return &tdriverConn469{
			r:     r,
			setup: setup,
		}
	case idriverConn468:
		return &tdriverConn468{
			r:     r,
			setup: setup,
		}
	case idriverConn467:
		return &tdriverConn467{
			r:     r,
			setup: setup,
		}
	case idriverConn466:
		return &tdriverConn466{
			r:     r,
			setup: setup,
		}
	case idriverConn465:
		return &tdriverConn465{
			r:     r,
			setup: setup,
		}
	case idriverConn464:
		return &tdriverConn464{
			r:     r,
			setup: setup,
		}
	case idriverConn463:
		return &tdriverConn463{
			r:     r,
			setup: setup,
		}
	case idriverConn462:
		return &tdriverConn462{
			r:     r,
			setup: setup,
		}
	case idriverConn461:
		return &tdriverConn461{
			r:     r,
			setup: setup,
		}
	case idriverConn460:
		return &tdriverConn460{
			r:     r,
			setup: setup,
		}
	case idriverConn459:
		return &tdriverConn459{
			r:     r,
			setup: setup,
		}
	case idriverConn458:
		return &tdriverConn458{
			r:     r,
			setup: setup,
		}
	case idriverConn457:
		return &tdriverConn457{
			r:     r,
			setup: setup,
		}
	case idriverConn456:
		return &tdriverConn456{
			r:     r,
			setup: setup,
		}
	case idriverConn455:
		return &tdriverConn455{
			r:     r,
			setup: setup,
		}
	case idriverConn454:
		return &tdriverConn454{
			r:     r,
			setup: setup,
		}
	case idriverConn453:
		return &tdriverConn453{
			r:     r,
			setup: setup,
		}
	case idriverConn452:
		return &tdriverConn452{
			r:     r,
			setup: setup,
		}
	case idriverConn451:
		return &tdriverConn451{
			r:     r,
			setup: setup,
		}
	case idriverConn450:
		return &tdriverConn450{
			r:     r,
			setup: setup,
		}
	case idriverConn449:
		return &tdriverConn449{
			r:     r,
			setup: setup,
		}
	case idriverConn448:
		return &tdriverConn448{
			r:     r,
			setup: setup,
		}
	case idriverConn447:
		return &tdriverConn447{
			r:     r,
			setup: setup,
		}
	case idriverConn446:
		return &tdriverConn446{
			r:     r,
			setup: setup,
		}
	case idriverConn445:
		return &tdriverConn445{
			r:     r,
			setup: setup,
		}
	case idriverConn444:
		return &tdriverConn444{
			r:     r,
			setup: setup,
		}
	case idriverConn443:
		return &tdriverConn443{
			r:     r,
			setup: setup,
		}
	case idriverConn442:
		return &tdriverConn442{
			r:     r,
			setup: setup,
		}
	case idriverConn441:
		return &tdriverConn441{
			r:     r,
			setup: setup,
		}
	case idriverConn440:
		return &tdriverConn440{
			r:     r,
			setup: setup,
		}
	case idriverConn439:
		return &tdriverConn439{
			r:     r,
			setup: setup,
		}
	case idriverConn438:
		return &tdriverConn438{
			r:     r,
			setup: setup,
		}
	case idriverConn437:
		return &tdriverConn437{
			r:     r,
			setup: setup,
		}
	case idriverConn436:
		return &tdriverConn436{
			r:     r,
			setup: setup,
		}
	case idriverConn435:
		return &tdriverConn435{
			r:     r,
			setup: setup,
		}
	case idriverConn434:
		return &tdriverConn434{
			r:     r,
			setup: setup,
		}
	case idriverConn433:
		return &tdriverConn433{
			r:     r,
			setup: setup,
		}
	case idriverConn432:
		return &tdriverConn432{
			r:     r,
			setup: setup,
		}
	case idriverConn431:
		return &tdriverConn431{
			r:     r,
			setup: setup,
		}
	case idriverConn430:
		return &tdriverConn430{
			r:     r,
			setup: setup,
		}
	case idriverConn429:
		return &tdriverConn429{
			r:     r,
			setup: setup,
		}
	case idriverConn428:
		return &tdriverConn428{
			r:     r,
			setup: setup,
		}
	case idriverConn427:
		return &tdriverConn427{
			r:     r,
			setup: setup,
		}
	case idriverConn426:
		return &tdriverConn426{
			r:     r,
			setup: setup,
		}
	case idriverConn425:
		return &tdriverConn425{
			r:     r,
			setup: setup,
		}
	case idriverConn424:
		return &tdriverConn424{
			r:     r,
			setup: setup,
		}
	case idriverConn423:
		return &tdriverConn423{
			r:     r,
			setup: setup,
		}
	case idriverConn422:
		return &tdriverConn422{
			r:     r,
			setup: setup,
		}
	case idriverConn421:
		return &tdriverConn421{
			r:     r,
			setup: setup,
		}
	case idriverConn420:
		return &tdriverConn420{
			r:     r,
			setup: setup,
		}
	case idriverConn419:
		return &tdriverConn419{
			r:     r,
			setup: setup,
		}
	case idriverConn418:
		return &tdriverConn418{
			r:     r,
			setup: setup,
		}
	case idriverConn417:
		return &tdriverConn417{
			r:     r,
			setup: setup,
		}
	case idriverConn416:
		return &tdriverConn416{
			r:     r,
			setup: setup,
		}
	case idriverConn415:
		return &tdriverConn415{
			r:     r,
			setup: setup,
		}
	case idriverConn414:
		return &tdriverConn414{
			r:     r,
			setup: setup,
		}
	case idriverConn413:
		return &tdriverConn413{
			r:     r,
			setup: setup,
		}
	case idriverConn412:
		return &tdriverConn412{
			r:     r,
			setup: setup,
		}
	case idriverConn411:
		return &tdriverConn411{
			r:     r,
			setup: setup,
		}
	case idriverConn410:
		return &tdriverConn410{
			r:     r,
			setup: setup,
		}
	case idriverConn409:
		return &tdriverConn409{
			r:     r,
			setup: setup,
		}
	case idriverConn408:
		return &tdriverConn408{
			r:     r,
			setup: setup,
		}
	case idriverConn407:
		return &tdriverConn407{
			r:     r,
			setup: setup,
		}
	case idriverConn406:
		return &tdriverConn406{
			r:     r,
			setup: setup,
		}
	case idriverConn405:
		return &tdriverConn405{
			r:     r,
			setup: setup,
		}
	case idriverConn404:
		return &tdriverConn404{
			r:     r,
			setup: setup,
		}
	case idriverConn403:
		return &tdriverConn403{
			r:     r,
			setup: setup,
		}
	case idriverConn402:
		return &tdriverConn402{
			r:     r,
			setup: setup,
		}
	case idriverConn401:
		return &tdriverConn401{
			r:     r,
			setup: setup,
		}
	case idriverConn400:
		return &tdriverConn400{
			r:     r,
			setup: setup,
		}
	case idriverConn399:
		return &tdriverConn399{
			r:     r,
			setup: setup,
		}
	case idriverConn398:
		return &tdriverConn398{
			r:     r,
			setup: setup,
		}
	case idriverConn397:
		return &tdriverConn397{
			r:     r,
			setup: setup,
		}
	case idriverConn396:
		return &tdriverConn396{
			r:     r,
			setup: setup,
		}
	case idriverConn395:
		return &tdriverConn395{
			r:     r,
			setup: setup,
		}
	case idriverConn394:
		return &tdriverConn394{
			r:     r,
			setup: setup,
		}
	case idriverConn393:
		return &tdriverConn393{
			r:     r,
			setup: setup,
		}
	case idriverConn392:
		return &tdriverConn392{
			r:     r,
			setup: setup,
		}
	case idriverConn391:
		return &tdriverConn391{
			r:     r,
			setup: setup,
		}
	case idriverConn390:
		return &tdriverConn390{
			r:     r,
			setup: setup,
		}
	case idriverConn389:
		return &tdriverConn389{
			r:     r,
			setup: setup,
		}
	case idriverConn388:
		return &tdriverConn388{
			r:     r,
			setup: setup,
		}
	case idriverConn387:
		return &tdriverConn387{
			r:     r,
			setup: setup,
		}
	case idriverConn386:
		return &tdriverConn386{
			r:     r,
			setup: setup,
		}
	case idriverConn385:
		return &tdriverConn385{
			r:     r,
			setup: setup,
		}
	case idriverConn384:
		return &tdriverConn384{
			r:     r,
			setup: setup,
		}
	case idriverConn383:
		return &tdriverConn383{
			r:     r,
			setup: setup,
		}
	case idriverConn382:
		return &tdriverConn382{
			r:     r,
			setup: setup,
		}
	case idriverConn381:
		return &tdriverConn381{
			r:     r,
			setup: setup,
		}
	case idriverConn380:
		return &tdriverConn380{
			r:     r,
			setup: setup,
		}
	case idriverConn379:
		return &tdriverConn379{
			r:     r,
			setup: setup,
		}
	case idriverConn378:
		return &tdriverConn378{
			r:     r,
			setup: setup,
		}
	case idriverConn377:
		return &tdriverConn377{
			r:     r,
			setup: setup,
		}
	case idriverConn376:
		return &tdriverConn376{
			r:     r,
			setup: setup,
		}
	case idriverConn375:
		return &tdriverConn375{
			r:     r,
			setup: setup,
		}
	case idriverConn374:
		return &tdriverConn374{
			r:     r,
			setup: setup,
		}
	case idriverConn373:
		return &tdriverConn373{
			r:     r,
			setup: setup,
		}
	case idriverConn372:
		return &tdriverConn372{
			r:     r,
			setup: setup,
		}
	case idriverConn371:
		return &tdriverConn371{
			r:     r,
			setup: setup,
		}
	case idriverConn370:
		return &tdriverConn370{
			r:     r,
			setup: setup,
		}
	case idriverConn369:
		return &tdriverConn369{
			r:     r,
			setup: setup,
		}
	case idriverConn368:
		return &tdriverConn368{
			r:     r,
			setup: setup,
		}
	case idriverConn367:
		return &tdriverConn367{
			r:     r,
			setup: setup,
		}
	case idriverConn366:
		return &tdriverConn366{
			r:     r,
			setup: setup,
		}
	case idriverConn365:
		return &tdriverConn365{
			r:     r,
			setup: setup,
		}
	case idriverConn364:
		return &tdriverConn364{
			r:     r,
			setup: setup,
		}
	case idriverConn363:
		return &tdriverConn363{
			r:     r,
			setup: setup,
		}
	case idriverConn362:
		return &tdriverConn362{
			r:     r,
			setup: setup,
		}
	case idriverConn361:
		return &tdriverConn361{
			r:     r,
			setup: setup,
		}
	case idriverConn360:
		return &tdriverConn360{
			r:     r,
			setup: setup,
		}
	case idriverConn359:
		return &tdriverConn359{
			r:     r,
			setup: setup,
		}
	case idriverConn358:
		return &tdriverConn358{
			r:     r,
			setup: setup,
		}
	case idriverConn357:
		return &tdriverConn357{
			r:     r,
			setup: setup,
		}
	case idriverConn356:
		return &tdriverConn356{
			r:     r,
			setup: setup,
		}
	case idriverConn355:
		return &tdriverConn355{
			r:     r,
			setup: setup,
		}
	case idriverConn354:
		return &tdriverConn354{
			r:     r,
			setup: setup,
		}
	case idriverConn353:
		return &tdriverConn353{
			r:     r,
			setup: setup,
		}
	case idriverConn352:
		return &tdriverConn352{
			r:     r,
			setup: setup,
		}
	case idriverConn351:
		return &tdriverConn351{
			r:     r,
			setup: setup,
		}
	case idriverConn350:
		return &tdriverConn350{
			r:     r,
			setup: setup,
		}
	case idriverConn349:
		return &tdriverConn349{
			r:     r,
			setup: setup,
		}
	case idriverConn348:
		return &tdriverConn348{
			r:     r,
			setup: setup,
		}
	case idriverConn347:
		return &tdriverConn347{
			r:     r,
			setup: setup,
		}
	case idriverConn346:
		return &tdriverConn346{
			r:     r,
			setup: setup,
		}
	case idriverConn345:
		return &tdriverConn345{
			r:     r,
			setup: setup,
		}
	case idriverConn344:
		return &tdriverConn344{
			r:     r,
			setup: setup,
		}
	case idriverConn343:
		return &tdriverConn343{
			r:     r,
			setup: setup,
		}
	case idriverConn342:
		return &tdriverConn342{
			r:     r,
			setup: setup,
		}
	case idriverConn341:
		return &tdriverConn341{
			r:     r,
			setup: setup,
		}
	case idriverConn340:
		return &tdriverConn340{
			r:     r,
			setup: setup,
		}
	case idriverConn339:
		return &tdriverConn339{
			r:     r,
			setup: setup,
		}
	case idriverConn338:
		return &tdriverConn338{
			r:     r,
			setup: setup,
		}
	case idriverConn337:
		return &tdriverConn337{
			r:     r,
			setup: setup,
		}
	case idriverConn336:
		return &tdriverConn336{
			r:     r,
			setup: setup,
		}
	case idriverConn335:
		return &tdriverConn335{
			r:     r,
			setup: setup,
		}
	case idriverConn334:
		return &tdriverConn334{
			r:     r,
			setup: setup,
		}
	case idriverConn333:
		return &tdriverConn333{
			r:     r,
			setup: setup,
		}
	case idriverConn332:
		return &tdriverConn332{
			r:     r,
			setup: setup,
		}
	case idriverConn331:
		return &tdriverConn331{
			r:     r,
			setup: setup,
		}
	case idriverConn330:
		return &tdriverConn330{
			r:     r,
			setup: setup,
		}
	case idriverConn329:
		return &tdriverConn329{
			r:     r,
			setup: setup,
		}
	case idriverConn328:
		return &tdriverConn328{
			r:     r,
			setup: setup,
		}
	case idriverConn327:
		return &tdriverConn327{
			r:     r,
			setup: setup,
		}
	case idriverConn326:
		return &tdriverConn326{
			r:     r,
			setup: setup,
		}
	case idriverConn325:
		return &tdriverConn325{
			r:     r,
			setup: setup,
		}
	case idriverConn324:
		return &tdriverConn324{
			r:     r,
			setup: setup,
		}
	case idriverConn323:
		return &tdriverConn323{
			r:     r,
			setup: setup,
		}
	case idriverConn322:
		return &tdriverConn322{
			r:     r,
			setup: setup,
		}
	case idriverConn321:
		return &tdriverConn321{
			r:     r,
			setup: setup,
		}
	case idriverConn320:
		return &tdriverConn320{
			r:     r,
			setup: setup,
		}
	case idriverConn319:
		return &tdriverConn319{
			r:     r,
			setup: setup,
		}
	case idriverConn318:
		return &tdriverConn318{
			r:     r,
			setup: setup,
		}
	case idriverConn317:
		return &tdriverConn317{
			r:     r,
			setup: setup,
		}
	case idriverConn316:
		return &tdriverConn316{
			r:     r,
			setup: setup,
		}
	case idriverConn315:
		return &tdriverConn315{
			r:     r,
			setup: setup,
		}
	case idriverConn314:
		return &tdriverConn314{
			r:     r,
			setup: setup,
		}
	case idriverConn313:
		return &tdriverConn313{
			r:     r,
			setup: setup,
		}
	case idriverConn312:
		return &tdriverConn312{
			r:     r,
			setup: setup,
		}
	case idriverConn311:
		return &tdriverConn311{
			r:     r,
			setup: setup,
		}
	case idriverConn310:
		return &tdriverConn310{
			r:     r,
			setup: setup,
		}
	case idriverConn309:
		return &tdriverConn309{
			r:     r,
			setup: setup,
		}
	case idriverConn308:
		return &tdriverConn308{
			r:     r,
			setup: setup,
		}
	case idriverConn307:
		return &tdriverConn307{
			r:     r,
			setup: setup,
		}
	case idriverConn306:
		return &tdriverConn306{
			r:     r,
			setup: setup,
		}
	case idriverConn305:
		return &tdriverConn305{
			r:     r,
			setup: setup,
		}
	case idriverConn304:
		return &tdriverConn304{
			r:     r,
			setup: setup,
		}
	case idriverConn303:
		return &tdriverConn303{
			r:     r,
			setup: setup,
		}
	case idriverConn302:
		return &tdriverConn302{
			r:     r,
			setup: setup,
		}
	case idriverConn301:
		return &tdriverConn301{
			r:     r,
			setup: setup,
		}
	case idriverConn300:
		return &tdriverConn300{
			r:     r,
			setup: setup,
		}
	case idriverConn299:
		return &tdriverConn299{
			r:     r,
			setup: setup,
		}
	case idriverConn298:
		return &tdriverConn298{
			r:     r,
			setup: setup,
		}
	case idriverConn297:
		return &tdriverConn297{
			r:     r,
			setup: setup,
		}
	case idriverConn296:
		return &tdriverConn296{
			r:     r,
			setup: setup,
		}
	case idriverConn295:
		return &tdriverConn295{
			r:     r,
			setup: setup,
		}
	case idriverConn294:
		return &tdriverConn294{
			r:     r,
			setup: setup,
		}
	case idriverConn293:
		return &tdriverConn293{
			r:     r,
			setup: setup,
		}
	case idriverConn292:
		return &tdriverConn292{
			r:     r,
			setup: setup,
		}
	case idriverConn291:
		return &tdriverConn291{
			r:     r,
			setup: setup,
		}
	case idriverConn290:
		return &tdriverConn290{
			r:     r,
			setup: setup,
		}
	case idriverConn289:
		return &tdriverConn289{
			r:     r,
			setup: setup,
		}
	case idriverConn288:
		return &tdriverConn288{
			r:     r,
			setup: setup,
		}
	case idriverConn287:
		return &tdriverConn287{
			r:     r,
			setup: setup,
		}
	case idriverConn286:
		return &tdriverConn286{
			r:     r,
			setup: setup,
		}
	case idriverConn285:
		return &tdriverConn285{
			r:     r,
			setup: setup,
		}
	case idriverConn284:
		return &tdriverConn284{
			r:     r,
			setup: setup,
		}
	case idriverConn283:
		return &tdriverConn283{
			r:     r,
			setup: setup,
		}
	case idriverConn282:
		return &tdriverConn282{
			r:     r,
			setup: setup,
		}
	case idriverConn281:
		return &tdriverConn281{
			r:     r,
			setup: setup,
		}
	case idriverConn280:
		return &tdriverConn280{
			r:     r,
			setup: setup,
		}
	case idriverConn279:
		return &tdriverConn279{
			r:     r,
			setup: setup,
		}
	case idriverConn278:
		return &tdriverConn278{
			r:     r,
			setup: setup,
		}
	case idriverConn277:
		return &tdriverConn277{
			r:     r,
			setup: setup,
		}
	case idriverConn276:
		return &tdriverConn276{
			r:     r,
			setup: setup,
		}
	case idriverConn275:
		return &tdriverConn275{
			r:     r,
			setup: setup,
		}
	case idriverConn274:
		return &tdriverConn274{
			r:     r,
			setup: setup,
		}
	case idriverConn273:
		return &tdriverConn273{
			r:     r,
			setup: setup,
		}
	case idriverConn272:
		return &tdriverConn272{
			r:     r,
			setup: setup,
		}
	case idriverConn271:
		return &tdriverConn271{
			r:     r,
			setup: setup,
		}
	case idriverConn270:
		return &tdriverConn270{
			r:     r,
			setup: setup,
		}
	case idriverConn269:
		return &tdriverConn269{
			r:     r,
			setup: setup,
		}
	case idriverConn268:
		return &tdriverConn268{
			r:     r,
			setup: setup,
		}
	case idriverConn267:
		return &tdriverConn267{
			r:     r,
			setup: setup,
		}
	case idriverConn266:
		return &tdriverConn266{
			r:     r,
			setup: setup,
		}
	case idriverConn265:
		return &tdriverConn265{
			r:     r,
			setup: setup,
		}
	case idriverConn264:
		return &tdriverConn264{
			r:     r,
			setup: setup,
		}
	case idriverConn263:
		return &tdriverConn263{
			r:     r,
			setup: setup,
		}
	case idriverConn262:
		return &tdriverConn262{
			r:     r,
			setup: setup,
		}
	case idriverConn261:
		return &tdriverConn261{
			r:     r,
			setup: setup,
		}
	case idriverConn260:
		return &tdriverConn260{
			r:     r,
			setup: setup,
		}
	case idriverConn259:
		return &tdriverConn259{
			r:     r,
			setup: setup,
		}
	case idriverConn258:
		return &tdriverConn258{
			r:     r,
			setup: setup,
		}
	case idriverConn257:
		return &tdriverConn257{
			r:     r,
			setup: setup,
		}
	case idriverConn256:
		return &tdriverConn256{
			r:     r,
			setup: setup,
		}
	case idriverConn255:
		return &tdriverConn255{
			r:     r,
			setup: setup,
		}
	case idriverConn254:
		return &tdriverConn254{
			r:     r,
			setup: setup,
		}
	case idriverConn253:
		return &tdriverConn253{
			r:     r,
			setup: setup,
		}
	case idriverConn252:
		return &tdriverConn252{
			r:     r,
			setup: setup,
		}
	case idriverConn251:
		return &tdriverConn251{
			r:     r,
			setup: setup,
		}
	case idriverConn250:
		return &tdriverConn250{
			r:     r,
			setup: setup,
		}
	case idriverConn249:
		return &tdriverConn249{
			r:     r,
			setup: setup,
		}
	case idriverConn248:
		return &tdriverConn248{
			r:     r,
			setup: setup,
		}
	case idriverConn247:
		return &tdriverConn247{
			r:     r,
			setup: setup,
		}
	case idriverConn246:
		return &tdriverConn246{
			r:     r,
			setup: setup,
		}
	case idriverConn245:
		return &tdriverConn245{
			r:     r,
			setup: setup,
		}
	case idriverConn244:
		return &tdriverConn244{
			r:     r,
			setup: setup,
		}
	case idriverConn243:
		return &tdriverConn243{
			r:     r,
			setup: setup,
		}
	case idriverConn242:
		return &tdriverConn242{
			r:     r,
			setup: setup,
		}
	case idriverConn241:
		return &tdriverConn241{
			r:     r,
			setup: setup,
		}
	case idriverConn240:
		return &tdriverConn240{
			r:     r,
			setup: setup,
		}
	case idriverConn239:
		return &tdriverConn239{
			r:     r,
			setup: setup,
		}
	case idriverConn238:
		return &tdriverConn238{
			r:     r,
			setup: setup,
		}
	case idriverConn237:
		return &tdriverConn237{
			r:     r,
			setup: setup,
		}
	case idriverConn236:
		return &tdriverConn236{
			r:     r,
			setup: setup,
		}
	case idriverConn235:
		return &tdriverConn235{
			r:     r,
			setup: setup,
		}
	case idriverConn234:
		return &tdriverConn234{
			r:     r,
			setup: setup,
		}
	case idriverConn233:
		return &tdriverConn233{
			r:     r,
			setup: setup,
		}
	case idriverConn232:
		return &tdriverConn232{
			r:     r,
			setup: setup,
		}
	case idriverConn231:
		return &tdriverConn231{
			r:     r,
			setup: setup,
		}
	case idriverConn230:
		return &tdriverConn230{
			r:     r,
			setup: setup,
		}
	case idriverConn229:
		return &tdriverConn229{
			r:     r,
			setup: setup,
		}
	case idriverConn228:
		return &tdriverConn228{
			r:     r,
			setup: setup,
		}
	case idriverConn227:
		return &tdriverConn227{
			r:     r,
			setup: setup,
		}
	case idriverConn226:
		return &tdriverConn226{
			r:     r,
			setup: setup,
		}
	case idriverConn225:
		return &tdriverConn225{
			r:     r,
			setup: setup,
		}
	case idriverConn224:
		return &tdriverConn224{
			r:     r,
			setup: setup,
		}
	case idriverConn223:
		return &tdriverConn223{
			r:     r,
			setup: setup,
		}
	case idriverConn222:
		return &tdriverConn222{
			r:     r,
			setup: setup,
		}
	case idriverConn221:
		return &tdriverConn221{
			r:     r,
			setup: setup,
		}
	case idriverConn220:
		return &tdriverConn220{
			r:     r,
			setup: setup,
		}
	case idriverConn219:
		return &tdriverConn219{
			r:     r,
			setup: setup,
		}
	case idriverConn218:
		return &tdriverConn218{
			r:     r,
			setup: setup,
		}
	case idriverConn217:
		return &tdriverConn217{
			r:     r,
			setup: setup,
		}
	case idriverConn216:
		return &tdriverConn216{
			r:     r,
			setup: setup,
		}
	case idriverConn215:
		return &tdriverConn215{
			r:     r,
			setup: setup,
		}
	case idriverConn214:
		return &tdriverConn214{
			r:     r,
			setup: setup,
		}
	case idriverConn213:
		return &tdriverConn213{
			r:     r,
			setup: setup,
		}
	case idriverConn212:
		return &tdriverConn212{
			r:     r,
			setup: setup,
		}
	case idriverConn211:
		return &tdriverConn211{
			r:     r,
			setup: setup,
		}
	case idriverConn210:
		return &tdriverConn210{
			r:     r,
			setup: setup,
		}
	case idriverConn209:
		return &tdriverConn209{
			r:     r,
			setup: setup,
		}
	case idriverConn208:
		return &tdriverConn208{
			r:     r,
			setup: setup,
		}
	case idriverConn207:
		return &tdriverConn207{
			r:     r,
			setup: setup,
		}
	case idriverConn206:
		return &tdriverConn206{
			r:     r,
			setup: setup,
		}
	case idriverConn205:
		return &tdriverConn205{
			r:     r,
			setup: setup,
		}
	case idriverConn204:
		return &tdriverConn204{
			r:     r,
			setup: setup,
		}
	case idriverConn203:
		return &tdriverConn203{
			r:     r,
			setup: setup,
		}
	case idriverConn202:
		return &tdriverConn202{
			r:     r,
			setup: setup,
		}
	case idriverConn201:
		return &tdriverConn201{
			r:     r,
			setup: setup,
		}
	case idriverConn200:
		return &tdriverConn200{
			r:     r,
			setup: setup,
		}
	case idriverConn199:
		return &tdriverConn199{
			r:     r,
			setup: setup,
		}
	case idriverConn198:
		return &tdriverConn198{
			r:     r,
			setup: setup,
		}
	case idriverConn197:
		return &tdriverConn197{
			r:     r,
			setup: setup,
		}
	case idriverConn196:
		return &tdriverConn196{
			r:     r,
			setup: setup,
		}
	case idriverConn195:
		return &tdriverConn195{
			r:     r,
			setup: setup,
		}
	case idriverConn194:
		return &tdriverConn194{
			r:     r,
			setup: setup,
		}
	case idriverConn193:
		return &tdriverConn193{
			r:     r,
			setup: setup,
		}
	case idriverConn192:
		return &tdriverConn192{
			r:     r,
			setup: setup,
		}
	case idriverConn191:
		return &tdriverConn191{
			r:     r,
			setup: setup,
		}
	case idriverConn190:
		return &tdriverConn190{
			r:     r,
			setup: setup,
		}
	case idriverConn189:
		return &tdriverConn189{
			r:     r,
			setup: setup,
		}
	case idriverConn188:
		return &tdriverConn188{
			r:     r,
			setup: setup,
		}
	case idriverConn187:
		return &tdriverConn187{
			r:     r,
			setup: setup,
		}
	case idriverConn186:
		return &tdriverConn186{
			r:     r,
			setup: setup,
		}
	case idriverConn185:
		return &tdriverConn185{
			r:     r,
			setup: setup,
		}
	case idriverConn184:
		return &tdriverConn184{
			r:     r,
			setup: setup,
		}
	case idriverConn183:
		return &tdriverConn183{
			r:     r,
			setup: setup,
		}
	case idriverConn182:
		return &tdriverConn182{
			r:     r,
			setup: setup,
		}
	case idriverConn181:
		return &tdriverConn181{
			r:     r,
			setup: setup,
		}
	case idriverConn180:
		return &tdriverConn180{
			r:     r,
			setup: setup,
		}
	case idriverConn179:
		return &tdriverConn179{
			r:     r,
			setup: setup,
		}
	case idriverConn178:
		return &tdriverConn178{
			r:     r,
			setup: setup,
		}
	case idriverConn177:
		return &tdriverConn177{
			r:     r,
			setup: setup,
		}
	case idriverConn176:
		return &tdriverConn176{
			r:     r,
			setup: setup,
		}
	case idriverConn175:
		return &tdriverConn175{
			r:     r,
			setup: setup,
		}
	case idriverConn174:
		return &tdriverConn174{
			r:     r,
			setup: setup,
		}
	case idriverConn173:
		return &tdriverConn173{
			r:     r,
			setup: setup,
		}
	case idriverConn172:
		return &tdriverConn172{
			r:     r,
			setup: setup,
		}
	case idriverConn171:
		return &tdriverConn171{
			r:     r,
			setup: setup,
		}
	case idriverConn170:
		return &tdriverConn170{
			r:     r,
			setup: setup,
		}
	case idriverConn169:
		return &tdriverConn169{
			r:     r,
			setup: setup,
		}
	case idriverConn168:
		return &tdriverConn168{
			r:     r,
			setup: setup,
		}
	case idriverConn167:
		return &tdriverConn167{
			r:     r,
			setup: setup,
		}
	case idriverConn166:
		return &tdriverConn166{
			r:     r,
			setup: setup,
		}
	case idriverConn165:
		return &tdriverConn165{
			r:     r,
			setup: setup,
		}
	case idriverConn164:
		return &tdriverConn164{
			r:     r,
			setup: setup,
		}
	case idriverConn163:
		return &tdriverConn163{
			r:     r,
			setup: setup,
		}
	case idriverConn162:
		return &tdriverConn162{
			r:     r,
			setup: setup,
		}
	case idriverConn161:
		return &tdriverConn161{
			r:     r,
			setup: setup,
		}
	case idriverConn160:
		return &tdriverConn160{
			r:     r,
			setup: setup,
		}
	case idriverConn159:
		return &tdriverConn159{
			r:     r,
			setup: setup,
		}
	case idriverConn158:
		return &tdriverConn158{
			r:     r,
			setup: setup,
		}
	case idriverConn157:
		return &tdriverConn157{
			r:     r,
			setup: setup,
		}
	case idriverConn156:
		return &tdriverConn156{
			r:     r,
			setup: setup,
		}
	case idriverConn155:
		return &tdriverConn155{
			r:     r,
			setup: setup,
		}
	case idriverConn154:
		return &tdriverConn154{
			r:     r,
			setup: setup,
		}
	case idriverConn153:
		return &tdriverConn153{
			r:     r,
			setup: setup,
		}
	case idriverConn152:
		return &tdriverConn152{
			r:     r,
			setup: setup,
		}
	case idriverConn151:
		return &tdriverConn151{
			r:     r,
			setup: setup,
		}
	case idriverConn150:
		return &tdriverConn150{
			r:     r,
			setup: setup,
		}
	case idriverConn149:
		return &tdriverConn149{
			r:     r,
			setup: setup,
		}
	case idriverConn148:
		return &tdriverConn148{
			r:     r,
			setup: setup,
		}
	case idriverConn147:
		return &tdriverConn147{
			r:     r,
			setup: setup,
		}
	case idriverConn146:
		return &tdriverConn146{
			r:     r,
			setup: setup,
		}
	case idriverConn145:
		return &tdriverConn145{
			r:     r,
			setup: setup,
		}
	case idriverConn144:
		return &tdriverConn144{
			r:     r,
			setup: setup,
		}
	case idriverConn143:
		return &tdriverConn143{
			r:     r,
			setup: setup,
		}
	case idriverConn142:
		return &tdriverConn142{
			r:     r,
			setup: setup,
		}
	case idriverConn141:
		return &tdriverConn141{
			r:     r,
			setup: setup,
		}
	case idriverConn140:
		return &tdriverConn140{
			r:     r,
			setup: setup,
		}
	case idriverConn139:
		return &tdriverConn139{
			r:     r,
			setup: setup,
		}
	case idriverConn138:
		return &tdriverConn138{
			r:     r,
			setup: setup,
		}
	case idriverConn137:
		return &tdriverConn137{
			r:     r,
			setup: setup,
		}
	case idriverConn136:
		return &tdriverConn136{
			r:     r,
			setup: setup,
		}
	case idriverConn135:
		return &tdriverConn135{
			r:     r,
			setup: setup,
		}
	case idriverConn134:
		return &tdriverConn134{
			r:     r,
			setup: setup,
		}
	case idriverConn133:
		return &tdriverConn133{
			r:     r,
			setup: setup,
		}
	case idriverConn132:
		return &tdriverConn132{
			r:     r,
			setup: setup,
		}
	case idriverConn131:
		return &tdriverConn131{
			r:     r,
			setup: setup,
		}
	case idriverConn130:
		return &tdriverConn130{
			r:     r,
			setup: setup,
		}
	case idriverConn129:
		return &tdriverConn129{
			r:     r,
			setup: setup,
		}
	case idriverConn128:
		return &tdriverConn128{
			r:     r,
			setup: setup,
		}
	case idriverConn127:
		return &tdriverConn127{
			r:     r,
			setup: setup,
		}
	case idriverConn126:
		return &tdriverConn126{
			r:     r,
			setup: setup,
		}
	case idriverConn125:
		return &tdriverConn125{
			r:     r,
			setup: setup,
		}
	case idriverConn124:
		return &tdriverConn124{
			r:     r,
			setup: setup,
		}
	case idriverConn123:
		return &tdriverConn123{
			r:     r,
			setup: setup,
		}
	case idriverConn122:
		return &tdriverConn122{
			r:     r,
			setup: setup,
		}
	case idriverConn121:
		return &tdriverConn121{
			r:     r,
			setup: setup,
		}
	case idriverConn120:
		return &tdriverConn120{
			r:     r,
			setup: setup,
		}
	case idriverConn119:
		return &tdriverConn119{
			r:     r,
			setup: setup,
		}
	case idriverConn118:
		return &tdriverConn118{
			r:     r,
			setup: setup,
		}
	case idriverConn117:
		return &tdriverConn117{
			r:     r,
			setup: setup,
		}
	case idriverConn116:
		return &tdriverConn116{
			r:     r,
			setup: setup,
		}
	case idriverConn115:
		return &tdriverConn115{
			r:     r,
			setup: setup,
		}
	case idriverConn114:
		return &tdriverConn114{
			r:     r,
			setup: setup,
		}
	case idriverConn113:
		return &tdriverConn113{
			r:     r,
			setup: setup,
		}
	case idriverConn112:
		return &tdriverConn112{
			r:     r,
			setup: setup,
		}
	case idriverConn111:
		return &tdriverConn111{
			r:     r,
			setup: setup,
		}
	case idriverConn110:
		return &tdriverConn110{
			r:     r,
			setup: setup,
		}
	case idriverConn109:
		return &tdriverConn109{
			r:     r,
			setup: setup,
		}
	case idriverConn108:
		return &tdriverConn108{
			r:     r,
			setup: setup,
		}
	case idriverConn107:
		return &tdriverConn107{
			r:     r,
			setup: setup,
		}
	case idriverConn106:
		return &tdriverConn106{
			r:     r,
			setup: setup,
		}
	case idriverConn105:
		return &tdriverConn105{
			r:     r,
			setup: setup,
		}
	case idriverConn104:
		return &tdriverConn104{
			r:     r,
			setup: setup,
		}
	case idriverConn103:
		return &tdriverConn103{
			r:     r,
			setup: setup,
		}
	case idriverConn102:
		return &tdriverConn102{
			r:     r,
			setup: setup,
		}
	case idriverConn101:
		return &tdriverConn101{
			r:     r,
			setup: setup,
		}
	case idriverConn100:
		return &tdriverConn100{
			r:     r,
			setup: setup,
		}
	case idriverConn99:
		return &tdriverConn99{
			r:     r,
			setup: setup,
		}
	case idriverConn98:
		return &tdriverConn98{
			r:     r,
			setup: setup,
		}
	case idriverConn97:
		return &tdriverConn97{
			r:     r,
			setup: setup,
		}
	case idriverConn96:
		return &tdriverConn96{
			r:     r,
			setup: setup,
		}
	case idriverConn95:
		return &tdriverConn95{
			r:     r,
			setup: setup,
		}
	case idriverConn94:
		return &tdriverConn94{
			r:     r,
			setup: setup,
		}
	case idriverConn93:
		return &tdriverConn93{
			r:     r,
			setup: setup,
		}
	case idriverConn92:
		return &tdriverConn92{
			r:     r,
			setup: setup,
		}
	case idriverConn91:
		return &tdriverConn91{
			r:     r,
			setup: setup,
		}
	case idriverConn90:
		return &tdriverConn90{
			r:     r,
			setup: setup,
		}
	case idriverConn89:
		return &tdriverConn89{
			r:     r,
			setup: setup,
		}
	case idriverConn88:
		return &tdriverConn88{
			r:     r,
			setup: setup,
		}
	case idriverConn87:
		return &tdriverConn87{
			r:     r,
			setup: setup,
		}
	case idriverConn86:
		return &tdriverConn86{
			r:     r,
			setup: setup,
		}
	case idriverConn85:
		return &tdriverConn85{
			r:     r,
			setup: setup,
		}
	case idriverConn84:
		return &tdriverConn84{
			r:     r,
			setup: setup,
		}
	case idriverConn83:
		return &tdriverConn83{
			r:     r,
			setup: setup,
		}
	case idriverConn82:
		return &tdriverConn82{
			r:     r,
			setup: setup,
		}
	case idriverConn81:
		return &tdriverConn81{
			r:     r,
			setup: setup,
		}
	case idriverConn80:
		return &tdriverConn80{
			r:     r,
			setup: setup,
		}
	case idriverConn79:
		return &tdriverConn79{
			r:     r,
			setup: setup,
		}
	case idriverConn78:
		return &tdriverConn78{
			r:     r,
			setup: setup,
		}
	case idriverConn77:
		return &tdriverConn77{
			r:     r,
			setup: setup,
		}
	case idriverConn76:
		return &tdriverConn76{
			r:     r,
			setup: setup,
		}
	case idriverConn75:
		return &tdriverConn75{
			r:     r,
			setup: setup,
		}
	case idriverConn74:
		return &tdriverConn74{
			r:     r,
			setup: setup,
		}
	case idriverConn73:
		return &tdriverConn73{
			r:     r,
			setup: setup,
		}
	case idriverConn72:
		return &tdriverConn72{
			r:     r,
			setup: setup,
		}
	case idriverConn71:
		return &tdriverConn71{
			r:     r,
			setup: setup,
		}
	case idriverConn70:
		return &tdriverConn70{
			r:     r,
			setup: setup,
		}
	case idriverConn69:
		return &tdriverConn69{
			r:     r,
			setup: setup,
		}
	case idriverConn68:
		return &tdriverConn68{
			r:     r,
			setup: setup,
		}
	case idriverConn67:
		return &tdriverConn67{
			r:     r,
			setup: setup,
		}
	case idriverConn66:
		return &tdriverConn66{
			r:     r,
			setup: setup,
		}
	case idriverConn65:
		return &tdriverConn65{
			r:     r,
			setup: setup,
		}
	case idriverConn64:
		return &tdriverConn64{
			r:     r,
			setup: setup,
		}
	case idriverConn63:
		return &tdriverConn63{
			r:     r,
			setup: setup,
		}
	case idriverConn62:
		return &tdriverConn62{
			r:     r,
			setup: setup,
		}
	case idriverConn61:
		return &tdriverConn61{
			r:     r,
			setup: setup,
		}
	case idriverConn60:
		return &tdriverConn60{
			r:     r,
			setup: setup,
		}
	case idriverConn59:
		return &tdriverConn59{
			r:     r,
			setup: setup,
		}
	case idriverConn58:
		return &tdriverConn58{
			r:     r,
			setup: setup,
		}
	case idriverConn57:
		return &tdriverConn57{
			r:     r,
			setup: setup,
		}
	case idriverConn56:
		return &tdriverConn56{
			r:     r,
			setup: setup,
		}
	case idriverConn55:
		return &tdriverConn55{
			r:     r,
			setup: setup,
		}
	case idriverConn54:
		return &tdriverConn54{
			r:     r,
			setup: setup,
		}
	case idriverConn53:
		return &tdriverConn53{
			r:     r,
			setup: setup,
		}
	case idriverConn52:
		return &tdriverConn52{
			r:     r,
			setup: setup,
		}
	case idriverConn51:
		return &tdriverConn51{
			r:     r,
			setup: setup,
		}
	case idriverConn50:
		return &tdriverConn50{
			r:     r,
			setup: setup,
		}
	case idriverConn49:
		return &tdriverConn49{
			r:     r,
			setup: setup,
		}
	case idriverConn48:
		return &tdriverConn48{
			r:     r,
			setup: setup,
		}
	case idriverConn47:
		return &tdriverConn47{
			r:     r,
			setup: setup,
		}
	case idriverConn46:
		return &tdriverConn46{
			r:     r,
			setup: setup,
		}
	case idriverConn45:
		return &tdriverConn45{
			r:     r,
			setup: setup,
		}
	case idriverConn44:
		return &tdriverConn44{
			r:     r,
			setup: setup,
		}
	case idriverConn43:
		return &tdriverConn43{
			r:     r,
			setup: setup,
		}
	case idriverConn42:
		return &tdriverConn42{
			r:     r,
			setup: setup,
		}
	case idriverConn41:
		return &tdriverConn41{
			r:     r,
			setup: setup,
		}
	case idriverConn40:
		return &tdriverConn40{
			r:     r,
			setup: setup,
		}
	case idriverConn39:
		return &tdriverConn39{
			r:     r,
			setup: setup,
		}
	case idriverConn38:
		return &tdriverConn38{
			r:     r,
			setup: setup,
		}
	case idriverConn37:
		return &tdriverConn37{
			r:     r,
			setup: setup,
		}
	case idriverConn36:
		return &tdriverConn36{
			r:     r,
			setup: setup,
		}
	case idriverConn35:
		return &tdriverConn35{
			r:     r,
			setup: setup,
		}
	case idriverConn34:
		return &tdriverConn34{
			r:     r,
			setup: setup,
		}
	case idriverConn33:
		return &tdriverConn33{
			r:     r,
			setup: setup,
		}
	case idriverConn32:
		return &tdriverConn32{
			r:     r,
			setup: setup,
		}
	case idriverConn31:
		return &tdriverConn31{
			r:     r,
			setup: setup,
		}
	case idriverConn30:
		return &tdriverConn30{
			r:     r,
			setup: setup,
		}
	case idriverConn29:
		return &tdriverConn29{
			r:     r,
			setup: setup,
		}
	case idriverConn28:
		return &tdriverConn28{
			r:     r,
			setup: setup,
		}
	case idriverConn27:
		return &tdriverConn27{
			r:     r,
			setup: setup,
		}
	case idriverConn26:
		return &tdriverConn26{
			r:     r,
			setup: setup,
		}
	case idriverConn25:
		return &tdriverConn25{
			r:     r,
			setup: setup,
		}
	case idriverConn24:
		return &tdriverConn24{
			r:     r,
			setup: setup,
		}
	case idriverConn23:
		return &tdriverConn23{
			r:     r,
			setup: setup,
		}
	case idriverConn22:
		return &tdriverConn22{
			r:     r,
			setup: setup,
		}
	case idriverConn21:
		return &tdriverConn21{
			r:     r,
			setup: setup,
		}
	case idriverConn20:
		return &tdriverConn20{
			r:     r,
			setup: setup,
		}
	case idriverConn19:
		return &tdriverConn19{
			r:     r,
			setup: setup,
		}
	case idriverConn18:
		return &tdriverConn18{
			r:     r,
			setup: setup,
		}
	case idriverConn17:
		return &tdriverConn17{
			r:     r,
			setup: setup,
		}
	case idriverConn16:
		return &tdriverConn16{
			r:     r,
			setup: setup,
		}
	case idriverConn15:
		return &tdriverConn15{
			r:     r,
			setup: setup,
		}
	case idriverConn14:
		return &tdriverConn14{
			r:     r,
			setup: setup,
		}
	case idriverConn13:
		return &tdriverConn13{
			r:     r,
			setup: setup,
		}
	case idriverConn12:
		return &tdriverConn12{
			r:     r,
			setup: setup,
		}
	case idriverConn11:
		return &tdriverConn11{
			r:     r,
			setup: setup,
		}
	case idriverConn10:
		return &tdriverConn10{
			r:     r,
			setup: setup,
		}
	case idriverConn9:
		return &tdriverConn9{
			r:     r,
			setup: setup,
		}
	case idriverConn8:
		return &tdriverConn8{
			r:     r,
			setup: setup,
		}
	case idriverConn7:
		return &tdriverConn7{
			r:     r,
			setup: setup,
		}
	case idriverConn6:
		return &tdriverConn6{
			r:     r,
			setup: setup,
		}
	case idriverConn5:
		return &tdriverConn5{
			r:     r,
			setup: setup,
		}
	case idriverConn4:
		return &tdriverConn4{
			r:     r,
			setup: setup,
		}
	case idriverConn3:
		return &tdriverConn3{
			r:     r,
			setup: setup,
		}
	case idriverConn2:
		return &tdriverConn2{
			r:     r,
			setup: setup,
		}
	case idriverConn1:
		return &tdriverConn1{
			r:     r,
			setup: setup,
		}
	}
	return &tdriverConn0{
		r:     traceDCConn,
		setup: setup,
	}
}
