// Code generated by "wrappergen -basetype=driver.Driver -exttypes=driver.DriverContext -extrafields=setup,*tracingSetup -prefix=traceDD -newfuncname=newDriver"; DO NOT EDIT.

package driver

import (
	"database/sql/driver"
)

type (
	idriverDriver0 interface {
		driver.Driver
	}

	tdriverDriver0 struct {
		r     idriverDriver0
		setup *tracingSetup
	}

	idriverDriver1 interface {
		driver.Driver
		driver.DriverContext
	}

	tdriverDriver1 struct {
		r     idriverDriver1
		setup *tracingSetup
	}
)

var (
	_ driver.Driver        = &tdriverDriver0{}
	_ driver.Driver        = &tdriverDriver1{}
	_ driver.DriverContext = &tdriverDriver1{}
)

func (odriverDriver0 *tdriverDriver0) Open(name string) (driver.Conn, error) {
	return traceDDOpen(odriverDriver0.r, odriverDriver0.setup, name)
}

func (odriverDriver1 *tdriverDriver1) Open(name string) (driver.Conn, error) {
	return traceDDOpen(odriverDriver1.r, odriverDriver1.setup, name)
}
func (odriverDriver1 *tdriverDriver1) OpenConnector(name string) (driver.Connector, error) {
	return traceDDOpenConnector(odriverDriver1.r, odriverDriver1.setup, name)
}

func newDriver(traceDDDriver driver.Driver, setup *tracingSetup) driver.Driver {
	switch r := traceDDDriver.(type) {
	case idriverDriver1:
		return &tdriverDriver1{
			r:     r,
			setup: setup,
		}
	}
	return &tdriverDriver0{
		r:     traceDDDriver,
		setup: setup,
	}
}
